<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/DocMate-Architecture-Diagrams.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DocMate-Architecture-Diagrams.txt" />
              <option name="updatedContent" value="# DocMate Platform - System Architecture Diagram&#10;# This file provides ASCII-based system architecture visualization&#10;# Import into Excel and use drawing tools to create visual diagrams&#10;&#10;=== HIGH-LEVEL SYSTEM ARCHITECTURE ===&#10;&#10;                                    ┌─────────────────┐&#10;                                    │   Mobile App    │&#10;                                    │   Web Client    │&#10;                                    └─────────┬───────┘&#10;                                              │&#10;                                              │ HTTPS/REST&#10;                                              ▼&#10;                    ┌─────────────────────────────────────────────────┐&#10;                    │            API Gateway (Port 8080)              │&#10;                    │         Spring Cloud Gateway                    │&#10;                    │    ┌─────────────┐  ┌─────────────┐            │&#10;                    │    │Rate Limiting│  │Load Balancer│            │&#10;                    │    └─────────────┘  └─────────────┘            │&#10;                    └─────────────────┬───────────────────────────────┘&#10;                                      │&#10;                    ┌─────────────────┼───────────────────────────────┐&#10;                    │                 │                               │&#10;            ┌───────▼────────┐ ┌─────▼──────┐ ┌──────▼───────┐     │&#10;            │  Auth Service  │ │User Service│ │Admin Service │     │&#10;            │   Port 8081    │ │ Port 8082  │ │  Port 8083   │     │&#10;            └────────────────┘ └────────────┘ └──────────────┘     │&#10;                    │                 │                               │&#10;            ┌───────▼────────┐ ┌─────▼──────┐ ┌──────▼───────┐     │&#10;            │Appointment Svc │ │Availability│ │ File Service │     │&#10;            │   Port 8084    │ │ Port 8085  │ │  Port 8086   │     │&#10;            └────────────────┘ └────────────┘ └──────────────┘     │&#10;                    │                 │                               │&#10;            ┌───────▼────────┐ ┌─────▼──────┐ ┌──────▼───────┐     │&#10;            │Notification    │ │Payment Svc │ │Prescription  │     │&#10;            │   Port 8087    │ │ Port 8088  │ │  Port 8089   │     │&#10;            └────────────────┘ └────────────┘ └──────────────┘     │&#10;                    │                 │                               │&#10;                    └─────────────────┼──────────────────────▼───────┘&#10;                                      │                  ┌──────────────┐&#10;                                      │                  │Taxonomy Svc  │&#10;                                      │                  │ Port 8090    │&#10;                                      │                  └──────────────┘&#10;                                      │&#10;        ┌─────────────────────────────┼─────────────────────────────┐&#10;        │                             │                             │&#10;        ▼                             ▼                             ▼&#10;┌─────────────┐              ┌─────────────┐              ┌─────────────┐&#10;│ PostgreSQL  │              │    Redis    │              │ LocalStack  │&#10;│ Port 5432   │              │  Port 6379  │              │ Port 4566   │&#10;│(Primary DB) │              │  (Cache)    │              │ (S3 Mock)   │&#10;└─────────────┘              └─────────────┘              └─────────────┘&#10;&#10;=== SERVICE INTERACTION MATRIX ===&#10;&#10;Service,Auth,User,Admin,Appointment,Availability,File,Notification,Payment,Prescription,Taxonomy&#10;Auth Service,SELF,Provides JWT,Provides JWT,Provides JWT,Provides JWT,Provides JWT,Provides JWT,Provides JWT,Provides JWT,Provides JWT&#10;User Service,Validates JWT,SELF,N/A,User Data,User Data,User Files,User Profile,User Data,User Data,User Prefs&#10;Admin Service,Validates JWT,Admin Ops,SELF,Admin Ops,Admin Ops,Admin Ops,Admin Notif,Admin Reports,Admin Ops,Admin Ops&#10;Appointment,Validates JWT,Patient/Doctor,Admin View,SELF,Check Slots,Appt Files,Appt Notif,Appt Payment,Appt Prescription,N/A&#10;Availability,Validates JWT,Doctor Profile,Admin View,Slot Booking,SELF,N/A,Availability Notif,N/A,N/A,N/A&#10;File Service,Validates JWT,User Files,Admin Files,Appt Files,N/A,SELF,File Notif,Receipt Files,Prescription Files,N/A&#10;Notification,Validates JWT,User Notif,Admin Notif,Appt Notif,Avail Notif,File Notif,SELF,Payment Notif,Prescription Notif,N/A&#10;Payment,Validates JWT,User Payments,Admin Reports,Appt Payment,N/A,Receipt Files,Payment Notif,SELF,N/A,N/A&#10;Prescription,Validates JWT,Patient Rx,Admin View,Prescription,N/A,Rx Files,Rx Notif,N/A,SELF,Drug Info&#10;Taxonomy,No Auth,Specializations,Admin Manage,N/A,N/A,N/A,N/A,N/A,Drug Database,SELF&#10;&#10;=== DATA FLOW DIAGRAMS ===&#10;&#10;PATIENT REGISTRATION FLOW:&#10;┌─────────┐    ┌─────────────┐    ┌──────────────┐    ┌─────────────┐&#10;│ Patient │───▶│ Auth Service│───▶│ User Service │───▶│ PostgreSQL  │&#10;│ Request │    │   (8081)    │    │   (8082)     │    │   Database  │&#10;└─────────┘    └─────────────┘    └──────────────┘    └─────────────┘&#10;                       │                   │&#10;                       ▼                   ▼&#10;               ┌─────────────┐    ┌──────────────┐&#10;               │ JWT Token   │    │ Notification │&#10;               │ Generated   │    │ Service (8087)│&#10;               └─────────────┘    └──────────────┘&#10;&#10;APPOINTMENT BOOKING FLOW:&#10;┌─────────┐    ┌─────────────┐    ┌──────────────┐    ┌─────────────┐&#10;│ Patient │───▶│Availability │───▶│ Appointment  │───▶│ Payment     │&#10;│ Request │    │Svc (8085)   │    │ Svc (8084)   │    │ Svc (8088)  │&#10;└─────────┘    └─────────────┘    └──────────────┘    └─────────────┘&#10;                       │                   │                   │&#10;                       ▼                   ▼                   ▼&#10;               ┌─────────────┐    ┌──────────────┐    ┌─────────────┐&#10;               │ Check Slots │    │ Create Appt  │    │ Process     │&#10;               │ Available   │    │ Record       │    │ Payment     │&#10;               └─────────────┘    └──────────────┘    └─────────────┘&#10;&#10;DOCTOR VERIFICATION FLOW:&#10;┌─────────┐    ┌─────────────┐    ┌──────────────┐    ┌─────────────┐&#10;│ Doctor  │───▶│ User Service│───▶│ File Service │───▶│ Admin       │&#10;│Submits  │    │   (8082)    │    │   (8086)     │    │ Service     │&#10;└─────────┘    └─────────────┘    └──────────────┘    └─────────────┘&#10;                       │                   │                   │&#10;                       ▼                   ▼                   ▼&#10;               ┌─────────────┐    ┌──────────────┐    ┌─────────────┐&#10;               │ Create      │    │ Store        │    │ Admin       │&#10;               │ Verification│    │ Documents    │    │ Review      │&#10;               └─────────────┘    └──────────────┘    └─────────────┘&#10;&#10;=== SECURITY ARCHITECTURE ===&#10;&#10;                    ┌─────────────────────────────────┐&#10;                    │          Internet               │&#10;                    └─────────────┬───────────────────┘&#10;                                  │ HTTPS/TLS&#10;                                  ▼&#10;                    ┌─────────────────────────────────┐&#10;                    │         API Gateway             │&#10;                    │    ┌─────────────────────────┐  │&#10;                    │    │    Rate Limiting        │  │&#10;                    │    │    CORS Configuration   │  │&#10;                    │    │    Request Validation   │  │&#10;                    │    └─────────────────────────┘  │&#10;                    └─────────────┬───────────────────┘&#10;                                  │ JWT Validation&#10;                                  ▼&#10;                    ┌─────────────────────────────────┐&#10;                    │      Microservices Layer       │&#10;                    │  ┌─────────────────────────────┐ │&#10;                    │  │  Spring Security Config     │ │&#10;                    │  │  @PreAuthorize Annotations  │ │&#10;                    │  │  Method-level Security      │ │&#10;                    │  │  Role-based Access Control  │ │&#10;                    │  └─────────────────────────────┘ │&#10;                    └─────────────┬───────────────────┘&#10;                                  │ Encrypted&#10;                                  ▼&#10;                    ┌─────────────────────────────────┐&#10;                    │        Data Layer               │&#10;                    │  ┌─────────────────────────────┐ │&#10;                    │  │  Database Encryption        │ │&#10;                    │  │  Connection Pooling         │ │&#10;                    │  │  Audit Logging              │ │&#10;                    │  │  Backup Encryption          │ │&#10;                    │  └─────────────────────────────┘ │&#10;                    └─────────────────────────────────┘&#10;&#10;=== MONITORING ARCHITECTURE ===&#10;&#10;    ┌─────────────┐    ┌─────────────┐    ┌─────────────┐&#10;    │Auth Service │    │User Service │    │Admin Service│&#10;    │   :8081     │    │   :8082     │    │   :8083     │&#10;    └──────┬──────┘    └──────┬──────┘    └──────┬──────┘&#10;           │                  │                  │&#10;           │ /actuator/       │ /actuator/       │ /actuator/&#10;           │ prometheus       │ prometheus       │ prometheus&#10;           │                  │                  │&#10;           └──────────────────┼──────────────────┘&#10;                              │&#10;                              ▼&#10;                    ┌─────────────────┐&#10;                    │   Prometheus    │&#10;                    │    :9090        │&#10;                    │  ┌─────────────┐│&#10;                    │  │Metrics      ││&#10;                    │  │Collection   ││&#10;                    │  │Rules Engine ││&#10;                    │  │Alerting     ││&#10;                    │  └─────────────┘│&#10;                    └─────────┬───────┘&#10;                              │&#10;                              ▼&#10;                    ┌─────────────────┐&#10;                    │    Grafana      │&#10;                    │     :3000       │&#10;                    │  ┌─────────────┐│&#10;                    │  │Dashboards   ││&#10;                    │  │Visualizations││&#10;                    │  │Alerts       ││&#10;                    │  │Reports      ││&#10;                    │  └─────────────┘│&#10;                    └─────────────────┘&#10;&#10;=== DEPLOYMENT ARCHITECTURE ===&#10;&#10;DEVELOPMENT ENVIRONMENT:&#10;┌─────────────────────────────────────────────────────────────┐&#10;│                    Docker Compose                           │&#10;│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐        │&#10;│  │   Service   │  │   Service   │  │   Service   │        │&#10;│  │ Container 1 │  │ Container 2 │  │ Container 3 │   ...  │&#10;│  └─────────────┘  └─────────────┘  └─────────────┘        │&#10;│                                                             │&#10;│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐        │&#10;│  │ PostgreSQL  │  │    Redis    │  │ LocalStack  │        │&#10;│  │ Container   │  │ Container   │  │ Container   │        │&#10;│  └─────────────┘  └─────────────┘  └─────────────┘        │&#10;└─────────────────────────────────────────────────────────────┘&#10;&#10;PRODUCTION ENVIRONMENT:&#10;┌─────────────────────────────────────────────────────────────┐&#10;│                    Kubernetes Cluster                       │&#10;│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐        │&#10;│  │  Service    │  │  Service    │  │  Service    │        │&#10;│  │   Pod 1     │  │   Pod 2     │  │   Pod 3     │   ...  │&#10;│  │ (Multiple   │  │ (Multiple   │  │ (Multiple   │        │&#10;│  │ Replicas)   │  │ Replicas)   │  │ Replicas)   │        │&#10;│  └─────────────┘  └─────────────┘  └─────────────┘        │&#10;│                                                             │&#10;│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐        │&#10;│  │   RDS       │  │   ElastiCache│  │    S3       │        │&#10;│  │ PostgreSQL  │  │    Redis    │  │  Storage    │        │&#10;│  └─────────────┘  └─────────────┘  └─────────────┘        │&#10;└─────────────────────────────────────────────────────────────┘" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/DocMate-System-Design.csv">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DocMate-System-Design.csv" />
              <option name="updatedContent" value="# DocMate Platform - System Design Documentation&#10;# Generated on: August 8, 2025&#10;# &#10;# This file contains comprehensive system design documentation&#10;# Import this into Excel and split by sections for multiple sheets&#10;&#10;=== SYSTEM OVERVIEW ===&#10;Component,Type,Technology,Port,Database,Description&#10;API Gateway,Gateway,Spring Cloud Gateway,8080,N/A,Central entry point for all API requests&#10;Auth Service,Microservice,Spring Boot,8081,PostgreSQL,Authentication and authorization service&#10;User Service,Microservice,Spring Boot,8082,PostgreSQL,User management for patients and doctors&#10;Admin Service,Microservice,Spring Boot,8083,PostgreSQL,Administrative operations and verification&#10;Appointment Service,Microservice,Spring Boot,8084,PostgreSQL,Appointment booking and management&#10;Availability Service,Microservice,Spring Boot,8085,PostgreSQL,Doctor availability management&#10;File Service,Microservice,Spring Boot,8086,S3/LocalStack,File upload and management&#10;Notification Service,Microservice,Spring Boot,8087,Redis,Email and notification system&#10;Payment Service,Microservice,Spring Boot,8088,PostgreSQL,Payment processing with Stripe&#10;Prescription Service,Microservice,Spring Boot,8089,PostgreSQL,Digital prescription management&#10;Taxonomy Service,Microservice,Spring Boot,8090,PostgreSQL,Medical specializations and conditions&#10;DB Migration,Utility,Liquibase,N/A,PostgreSQL,Database schema management&#10;Common Module,Library,Spring Boot,N/A,N/A,Shared entities and utilities&#10;&#10;=== INFRASTRUCTURE COMPONENTS ===&#10;Component,Type,Image,Port,Purpose,Configuration&#10;PostgreSQL,Database,postgres:15-alpine,5432,Primary database,docmate_platform database&#10;Redis,Cache,redis:7-alpine,6379,Session management and caching,Default configuration&#10;LocalStack,AWS Simulation,localstack/localstack,4566,S3 simulation for development,S3 service enabled&#10;Prometheus,Monitoring,prom/prometheus,9090,Metrics collection,Custom configuration&#10;Grafana,Monitoring,grafana/grafana,3000,Metrics visualization,Admin: admin123&#10;&#10;=== API ENDPOINTS - AUTH SERVICE ===&#10;Method,Endpoint,Description,Request Body,Response,Authentication Required&#10;POST,/api/auth/register/patient,Register new patient,RegisterPatientRequest,AuthResponse,No&#10;POST,/api/auth/register/doctor,Register new doctor,RegisterDoctorRequest,AuthResponse,No&#10;POST,/api/auth/login,User login,LoginRequest,AuthResponse,No&#10;POST,/api/auth/logout,User logout,None,Success message,Yes&#10;POST,/api/auth/refresh,Refresh JWT token,Refresh token,AuthResponse,No&#10;POST,/api/auth/forgot-password,Request password reset,ForgotPasswordRequest,Success message,No&#10;POST,/api/auth/reset-password,Reset password,ResetPasswordRequest,Success message,No&#10;GET,/api/auth/me,Get current user info,None,UserProfileResponse,Yes&#10;&#10;=== API ENDPOINTS - USER SERVICE ===&#10;Method,Endpoint,Description,Request Body,Response,Authentication Required&#10;GET,/api/users/profile,Get user profile,None,UserProfileResponse,Yes&#10;PUT,/api/users/profile,Update user profile,UpdateUserProfileRequest,UserProfileResponse,Yes&#10;GET,/api/doctors/search,Search doctors,Query parameters,Page&lt;DoctorSearchResponse&gt;,No&#10;GET,/api/doctors/{id},Get doctor details,None,DoctorDto,No&#10;PUT,/api/doctors/profile,Update doctor profile,UpdateDoctorProfileRequest,DoctorDto,Yes (Doctor)&#10;GET,/api/doctors/stats,Get doctor statistics,None,DoctorStatsResponse,Yes (Doctor)&#10;GET,/api/patients/profile,Get patient profile,None,PatientDto,Yes (Patient)&#10;PUT,/api/patients/profile,Update patient profile,UpdatePatientProfileDto,PatientDto,Yes (Patient)&#10;GET,/api/patients/reports,Get patient reports,Pagination params,Page&lt;PatientReportResponse&gt;,Yes (Patient)&#10;POST,/api/patients/reports,Upload patient report,MultipartFile,PatientReportResponse,Yes (Patient)&#10;DELETE,/api/patients/reports/{id},Delete patient report,None,Success message,Yes (Patient)&#10;PUT,/api/patients/medical-history,Update medical history,UpdatePatientMedicalHistoryRequest,PatientMedicalHistoryResponse,Yes (Patient)&#10;&#10;=== API ENDPOINTS - ADMIN SERVICE ===&#10;Method,Endpoint,Description,Request Body,Response,Authentication Required&#10;GET,/api/admin/dashboard,Get dashboard statistics,None,DashboardStatsDto,Yes (Admin)&#10;GET,/api/admin/verifications/pending,Get pending verifications,None,List&lt;DoctorVerificationDto&gt;,Yes (Admin)&#10;GET,/api/admin/verifications/{id},Get verification details,None,DoctorVerificationDto,Yes (Admin)&#10;POST,/api/admin/verifications/review,Review verification,VerificationReviewRequest,Success message,Yes (Admin)&#10;GET,/api/admin/verifications,Get verifications by status,Status parameter,List&lt;DoctorVerificationDto&gt;,Yes (Admin)&#10;GET,/api/admin/verifications/count,Get pending count,None,Long,Yes (Admin)&#10;&#10;=== API ENDPOINTS - APPOINTMENT SERVICE ===&#10;Method,Endpoint,Description,Request Body,Response,Authentication Required&#10;POST,/api/appointments,Create appointment,CreateAppointmentRequest,AppointmentDto,Yes&#10;GET,/api/appointments,Get user appointments,Pagination params,Page&lt;AppointmentDto&gt;,Yes&#10;GET,/api/appointments/{id},Get appointment details,None,AppointmentDto,Yes&#10;PUT,/api/appointments/{id}/cancel,Cancel appointment,Cancellation reason,AppointmentDto,Yes&#10;GET,/api/appointments/upcoming,Get upcoming appointments,None,List&lt;AppointmentDto&gt;,Yes&#10;GET,/api/appointments/history,Get appointment history,Pagination params,Page&lt;AppointmentDto&gt;,Yes&#10;&#10;=== API ENDPOINTS - AVAILABILITY SERVICE ===&#10;Method,Endpoint,Description,Request Body,Response,Authentication Required&#10;POST,/api/availability/recurring,Set recurring availability,CreateAvailabilityRequest,AvailabilityDto,Yes (Doctor)&#10;POST,/api/availability/adhoc,Set adhoc availability,CreateAvailabilityRequest,AvailabilityDto,Yes (Doctor)&#10;GET,/api/availability/{doctorId},Get doctor availability,Date parameters,List&lt;AvailabilityDto&gt;,No&#10;GET,/api/availability/{doctorId}/slots,Get available time slots,Date parameters,List&lt;TimeSlotDto&gt;,No&#10;DELETE,/api/availability/{id},Delete availability,None,Success message,Yes (Doctor)&#10;&#10;=== API ENDPOINTS - FILE SERVICE ===&#10;Method,Endpoint,Description,Request Body,Response,Authentication Required&#10;POST,/api/files/upload,Upload file,MultipartFile,FileUploadResponse,Yes&#10;GET,/api/files/{id},Download file,None,File binary,Yes&#10;DELETE,/api/files/{id},Delete file,None,Success message,Yes&#10;GET,/api/files/user,Get user files,Pagination params,Page&lt;FileDto&gt;,Yes&#10;&#10;=== API ENDPOINTS - NOTIFICATION SERVICE ===&#10;Method,Endpoint,Description,Request Body,Response,Authentication Required&#10;POST,/api/notifications/send,Send notification,CreateNotificationRequest,Success message,Yes&#10;GET,/api/notifications,Get user notifications,Pagination params,Page&lt;NotificationDto&gt;,Yes&#10;PUT,/api/notifications/{id}/read,Mark as read,None,Success message,Yes&#10;DELETE,/api/notifications/{id},Delete notification,None,Success message,Yes&#10;GET,/api/notifications/unread-count,Get unread count,None,Long,Yes&#10;&#10;=== API ENDPOINTS - PAYMENT SERVICE ===&#10;Method,Endpoint,Description,Request Body,Response,Authentication Required&#10;POST,/api/payments/create-intent,Create payment intent,CreatePaymentRequest,PaymentIntentResponse,Yes&#10;POST,/api/payments/confirm,Confirm payment,ConfirmPaymentRequest,PaymentDto,Yes&#10;GET,/api/payments/{id},Get payment details,None,PaymentDto,Yes&#10;GET,/api/payments/history,Get payment history,Pagination params,Page&lt;PaymentDto&gt;,Yes&#10;POST,/api/payments/refund/{id},Request refund,Refund reason,RefundResponse,Yes&#10;&#10;=== API ENDPOINTS - PRESCRIPTION SERVICE ===&#10;Method,Endpoint,Description,Request Body,Response,Authentication Required&#10;POST,/api/prescriptions,Create prescription,CreatePrescriptionRequest,PrescriptionDto,Yes (Doctor)&#10;GET,/api/prescriptions/{id},Get prescription details,None,PrescriptionDto,Yes&#10;GET,/api/prescriptions/patient/{patientId},Get patient prescriptions,Pagination params,Page&lt;PrescriptionDto&gt;,Yes&#10;GET,/api/prescriptions/doctor,Get doctor prescriptions,Pagination params,Page&lt;PrescriptionDto&gt;,Yes (Doctor)&#10;PUT,/api/prescriptions/{id},Update prescription,UpdatePrescriptionRequest,PrescriptionDto,Yes (Doctor)&#10;&#10;=== API ENDPOINTS - TAXONOMY SERVICE ===&#10;Method,Endpoint,Description,Request Body,Response,Authentication Required&#10;GET,/api/specializations,Get all specializations,None,List&lt;SpecializationDto&gt;,No&#10;GET,/api/specializations/{id},Get specialization details,None,SpecializationDto,No&#10;GET,/api/conditions,Get all conditions,None,List&lt;ConditionDto&gt;,No&#10;GET,/api/conditions/{id},Get condition details,None,ConditionDto,No&#10;&#10;=== DATABASE ENTITIES ===&#10;Entity,Table Name,Key Relationships,Primary Purpose,Key Fields&#10;User,users,One-to-One with Patient/Doctor/Admin,Base user information,id email fullName role&#10;Patient,patients,One-to-One with User,Patient-specific data,userId dateOfBirth gender&#10;Doctor,doctors,One-to-One with User,Doctor-specific data,userId licenseNumber experience&#10;Admin,admins,One-to-One with User,Admin-specific data,userId permissions&#10;Address,addresses,Many-to-One with Patient/Doctor,Location information,addressLine1 city state zipCode&#10;Specialization,specializations,Many-to-Many with Doctor,Medical specialties,name description&#10;Condition,conditions,Many-to-Many with Doctor,Medical conditions,name description severity&#10;CommonAppointment,appointments,Many-to-One with Doctor/Patient,Appointment booking,doctorId patientId appointmentDateTime status&#10;TimeSlot,time_slots,Many-to-One with Doctor,Available time slots,doctorId startTime endTime status&#10;DoctorAvailability,doctor_availability,Many-to-One with Doctor,Doctor working hours,doctorId dayOfWeek startTime endTime&#10;Prescription,prescriptions,One-to-One with CommonAppointment,Digital prescriptions,appointmentId diagnosis advice&#10;PrescriptionMedicine,prescription_items,Many-to-One with Prescription,Prescribed medications,prescriptionId name dosage frequency&#10;Payment,payments,One-to-One with CommonAppointment,Payment processing,appointmentId amount status paymentMethod&#10;Review,reviews,One-to-One with CommonAppointment,Appointment reviews,appointmentId rating comment&#10;Notification,notifications,Many-to-One with User,User notifications,userId type message isRead&#10;PatientMedicalHistory,patient_medical_history,One-to-One with Patient,Medical history,patientId allergies chronicConditions&#10;PatientReport,patient_reports,Many-to-One with Patient,Medical reports,patientId title reportType uploadDate&#10;DoctorVerificationDocuments,doctor_verification_documents,One-to-One with Doctor,Verification docs,doctorId licenseDocument status&#10;AuditLog,audit_log,Many-to-One with User,System auditing,userId action entityType oldValues newValues&#10;&#10;=== DOCKER CONFIGURATION ===&#10;Service,Image Type,Base Image,Size Estimate,Optimization Features&#10;Distroless,Ultra-secure,gcr.io/distroless/java17-debian12:nonroot,~100MB,&quot;No shell, minimal attack surface&quot;&#10;Alpine,Lightweight,openjdk:17-jre-alpine,~150MB,&quot;Shell access, small footprint&quot;&#10;Minimal,Custom JRE,debian:12-slim + custom JRE,~80MB,&quot;Custom JRE with only required modules&quot;&#10;Standard,Full-featured,amazoncorretto:17-alpine,~300MB,&quot;Full JDK with debugging capabilities&quot;&#10;&#10;=== SECURITY CONFIGURATION ===&#10;Component,Authentication,Authorization,Security Features,Configuration&#10;API Gateway,JWT Validation,Route-based,Rate limiting CORS,Custom security filters&#10;Auth Service,Password + JWT,Role-based,BCrypt hashing,JWT expiration: 24h&#10;User Service,JWT Required,Role + Resource-based,Field-level security,Method-level authorization&#10;Admin Service,JWT Required,Admin role only,Audit logging,@PreAuthorize annotations&#10;All Services,JWT Bearer,Spring Security,HTTPS only,Non-root containers&#10;&#10;=== MONITORING AND HEALTH CHECKS ===&#10;Service,Health Check Endpoint,Metrics Endpoint,Monitoring Features,Alerting&#10;All Services,/actuator/health,/actuator/prometheus,Spring Boot Actuator,Custom metrics&#10;Prometheus,/metrics,/-/healthy,System metrics collection,Rule-based alerts&#10;Grafana,/api/health,N/A,Visualization dashboards,Dashboard alerts&#10;Database,pg_isready,N/A,Connection monitoring,Connection pool metrics&#10;Redis,redis-cli ping,N/A,Cache monitoring,Memory usage alerts&#10;&#10;=== DEPLOYMENT CONFIGURATION ===&#10;Environment,Configuration,Resource Limits,Scaling Strategy,Backup Strategy&#10;Development,docker-compose,512MB memory limit,Manual scaling,Local backups&#10;Staging,Kubernetes,1GB memory limit,Horizontal scaling,Daily backups&#10;Production,Kubernetes + Helm,2GB memory limit,Auto-scaling,Real-time replication&#10;&#10;=== API RESPONSE FORMATS ===&#10;Response Type,Structure,Fields,Usage,Examples&#10;ApiResponse&lt;T&gt;,Wrapper object,&quot;success, message, data, timestamp&quot;,Standard API responses,Success/Error responses&#10;PageResponse&lt;T&gt;,Paginated data,&quot;content, totalElements, totalPages, size&quot;,List endpoints,Search results&#10;AuthResponse,Authentication data,&quot;accessToken, refreshToken, user, expiresIn&quot;,Auth endpoints,Login/Register responses&#10;ErrorResponse,Error details,&quot;code, message, details, timestamp&quot;,Error handling,Validation errors&#10;&#10;=== BUSINESS RULES ===&#10;Domain,Rule,Implementation,Validation,Error Handling&#10;Authentication,JWT tokens expire in 24 hours,JWT configuration,Token validation filter,Automatic refresh&#10;Appointments,Cannot book past appointments,Service layer validation,@Valid annotations,BusinessException&#10;Payments,Refunds allowed within 7 days,Payment service logic,Business rule validation,Custom exceptions&#10;Prescriptions,Only doctors can create prescriptions,Security configuration,@PreAuthorize,Access denied exception&#10;Verification,Admins approve doctor verifications,Workflow implementation,State machine pattern,Status validation" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/DocMate-System-Design.excalidraw">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DocMate-System-Design.excalidraw" />
              <option name="updatedContent" value="{&#10;  &quot;type&quot;: &quot;excalidraw&quot;,&#10;  &quot;version&quot;: 2,&#10;  &quot;source&quot;: &quot;https://excalidraw.com&quot;,&#10;  &quot;elements&quot;: [&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;client-apps&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 300,&#10;      &quot;y&quot;: 50,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#e9ecef&quot;,&#10;      &quot;width&quot;: 200,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;client-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;client-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 350,&#10;      &quot;y&quot;: 75,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 100,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 16,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Client Apps\n(Mobile/Web)&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;client-apps&quot;,&#10;      &quot;originalText&quot;: &quot;Client Apps\n(Mobile/Web)&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;arrow&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;client-to-gateway&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 400,&#10;      &quot;y&quot;: 130,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 0,&#10;      &quot;height&quot;: 50,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 2&#10;      },&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;startBinding&quot;: null,&#10;      &quot;endBinding&quot;: null,&#10;      &quot;lastCommittedPoint&quot;: null,&#10;      &quot;startArrowhead&quot;: null,&#10;      &quot;endArrowhead&quot;: &quot;arrow&quot;,&#10;      &quot;points&quot;: [&#10;        [0, 0],&#10;        [0, 50]&#10;      ]&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;https-label&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 410,&#10;      &quot;y&quot;: 150,&#10;      &quot;strokeColor&quot;: &quot;#1971c2&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 80,&#10;      &quot;height&quot;: 20,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 12,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;HTTPS/REST&quot;,&#10;      &quot;textAlign&quot;: &quot;left&quot;,&#10;      &quot;verticalAlign&quot;: &quot;top&quot;,&#10;      &quot;containerId&quot;: null,&#10;      &quot;originalText&quot;: &quot;HTTPS/REST&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 17&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;api-gateway&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 200,&#10;      &quot;y&quot;: 200,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#74c0fc&quot;,&#10;      &quot;width&quot;: 400,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;gateway-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;gateway-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 350,&#10;      &quot;y&quot;: 225,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 100,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 16,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;API Gateway\n:8080&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;api-gateway&quot;,&#10;      &quot;originalText&quot;: &quot;API Gateway\n:8080&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;auth-service&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 50,&#10;      &quot;y&quot;: 350,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ffec99&quot;,&#10;      &quot;width&quot;: 120,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;auth-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;auth-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 85,&#10;      &quot;y&quot;: 375,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 50,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Auth\nService\n:8081&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;auth-service&quot;,&#10;      &quot;originalText&quot;: &quot;Auth\nService\n:8081&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;user-service&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 200,&#10;      &quot;y&quot;: 350,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ffec99&quot;,&#10;      &quot;width&quot;: 120,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;user-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;user-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 235,&#10;      &quot;y&quot;: 375,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 50,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;User\nService\n:8082&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;user-service&quot;,&#10;      &quot;originalText&quot;: &quot;User\nService\n:8082&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;admin-service&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 350,&#10;      &quot;y&quot;: 350,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ffec99&quot;,&#10;      &quot;width&quot;: 120,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;admin-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;admin-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 385,&#10;      &quot;y&quot;: 375,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 50,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Admin\nService\n:8083&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;admin-service&quot;,&#10;      &quot;originalText&quot;: &quot;Admin\nService\n:8083&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;appointment-service&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 500,&#10;      &quot;y&quot;: 350,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ffec99&quot;,&#10;      &quot;width&quot;: 120,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;appointment-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;appointment-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 525,&#10;      &quot;y&quot;: 375,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 70,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Appointment\nService\n:8084&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;appointment-service&quot;,&#10;      &quot;originalText&quot;: &quot;Appointment\nService\n:8084&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;availability-service&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 650,&#10;      &quot;y&quot;: 350,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ffec99&quot;,&#10;      &quot;width&quot;: 120,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;availability-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;availability-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 675,&#10;      &quot;y&quot;: 375,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 70,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Availability\nService\n:8085&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;availability-service&quot;,&#10;      &quot;originalText&quot;: &quot;Availability\nService\n:8085&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;file-service&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 50,&#10;      &quot;y&quot;: 470,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ffec99&quot;,&#10;      &quot;width&quot;: 120,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;file-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;file-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 85,&#10;      &quot;y&quot;: 495,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 50,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;File\nService\n:8086&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;file-service&quot;,&#10;      &quot;originalText&quot;: &quot;File\nService\n:8086&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;notification-service&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 200,&#10;      &quot;y&quot;: 470,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ffec99&quot;,&#10;      &quot;width&quot;: 120,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;notification-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;notification-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 230,&#10;      &quot;y&quot;: 495,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 60,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Notification\nService\n:8087&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;notification-service&quot;,&#10;      &quot;originalText&quot;: &quot;Notification\nService\n:8087&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;payment-service&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 350,&#10;      &quot;y&quot;: 470,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ffec99&quot;,&#10;      &quot;width&quot;: 120,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;payment-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;payment-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 385,&#10;      &quot;y&quot;: 495,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 50,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Payment\nService\n:8088&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;payment-service&quot;,&#10;      &quot;originalText&quot;: &quot;Payment\nService\n:8088&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;prescription-service&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 500,&#10;      &quot;y&quot;: 470,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ffec99&quot;,&#10;      &quot;width&quot;: 120,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;prescription-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;prescription-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 525,&#10;      &quot;y&quot;: 495,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 70,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Prescription\nService\n:8089&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;prescription-service&quot;,&#10;      &quot;originalText&quot;: &quot;Prescription\nService\n:8089&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;taxonomy-service&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 650,&#10;      &quot;y&quot;: 470,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ffec99&quot;,&#10;      &quot;width&quot;: 120,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;taxonomy-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;taxonomy-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 675,&#10;      &quot;y&quot;: 495,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 70,&#10;      &quot;height&quot;: 30,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Taxonomy\nService\n:8090&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;taxonomy-service&quot;,&#10;      &quot;originalText&quot;: &quot;Taxonomy\nService\n:8090&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 25&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;database-layer&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 50,&#10;      &quot;y&quot;: 600,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#d0ebff&quot;,&#10;      &quot;width&quot;: 720,&#10;      &quot;height&quot;: 100,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;postgresql&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 100,&#10;      &quot;y&quot;: 620,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#495057&quot;,&#10;      &quot;width&quot;: 150,&#10;      &quot;height&quot;: 60,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;postgresql-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;postgresql-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 150,&#10;      &quot;y&quot;: 640,&#10;      &quot;strokeColor&quot;: &quot;#ffffff&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 50,&#10;      &quot;height&quot;: 20,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;PostgreSQL\n:5432&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;postgresql&quot;,&#10;      &quot;originalText&quot;: &quot;PostgreSQL\n:5432&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 15&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;redis&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 300,&#10;      &quot;y&quot;: 620,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#495057&quot;,&#10;      &quot;width&quot;: 150,&#10;      &quot;height&quot;: 60,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;redis-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;redis-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 350,&#10;      &quot;y&quot;: 640,&#10;      &quot;strokeColor&quot;: &quot;#ffffff&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 50,&#10;      &quot;height&quot;: 20,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Redis Cache\n:6379&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;redis&quot;,&#10;      &quot;originalText&quot;: &quot;Redis Cache\n:6379&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 15&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;localstack&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 500,&#10;      &quot;y&quot;: 620,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#495057&quot;,&#10;      &quot;width&quot;: 150,&#10;      &quot;height&quot;: 60,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;localstack-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;localstack-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 550,&#10;      &quot;y&quot;: 640,&#10;      &quot;strokeColor&quot;: &quot;#ffffff&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 50,&#10;      &quot;height&quot;: 20,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;LocalStack\nS3 :4566&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;localstack&quot;,&#10;      &quot;originalText&quot;: &quot;LocalStack\nS3 :4566&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 15&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;monitoring&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 2,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 800,&#10;      &quot;y&quot;: 200,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ffd43b&quot;,&#10;      &quot;width&quot;: 180,&#10;      &quot;height&quot;: 200,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;monitoring-title&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 850,&#10;      &quot;y&quot;: 220,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 80,&#10;      &quot;height&quot;: 20,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 16,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Monitoring&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;top&quot;,&#10;      &quot;containerId&quot;: null,&#10;      &quot;originalText&quot;: &quot;Monitoring&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 17&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;prometheus&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 820,&#10;      &quot;y&quot;: 250,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ff8787&quot;,&#10;      &quot;width&quot;: 140,&#10;      &quot;height&quot;: 60,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;prometheus-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;prometheus-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 870,&#10;      &quot;y&quot;: 270,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 40,&#10;      &quot;height&quot;: 20,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Prometheus\n:9090&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;prometheus&quot;,&#10;      &quot;originalText&quot;: &quot;Prometheus\n:9090&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 15&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;rectangle&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;grafana&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 820,&#10;      &quot;y&quot;: 320,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;#ff8787&quot;,&#10;      &quot;width&quot;: 140,&#10;      &quot;height&quot;: 60,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 3&#10;      },&#10;      &quot;boundElements&quot;: [&#10;        {&#10;          &quot;type&quot;: &quot;text&quot;,&#10;          &quot;id&quot;: &quot;grafana-text&quot;&#10;        }&#10;      ],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;grafana-text&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 870,&#10;      &quot;y&quot;: 340,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 40,&#10;      &quot;height&quot;: 20,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 14,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Grafana\n:3000&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;middle&quot;,&#10;      &quot;containerId&quot;: &quot;grafana&quot;,&#10;      &quot;originalText&quot;: &quot;Grafana\n:3000&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 15&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;title&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 300,&#10;      &quot;y&quot;: 20,&#10;      &quot;strokeColor&quot;: &quot;#1e1e1e&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 400,&#10;      &quot;height&quot;: 25,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 20,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;DocMate Platform - System Architecture&quot;,&#10;      &quot;textAlign&quot;: &quot;center&quot;,&#10;      &quot;verticalAlign&quot;: &quot;top&quot;,&#10;      &quot;containerId&quot;: null,&#10;      &quot;originalText&quot;: &quot;DocMate Platform - System Architecture&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 22&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;text&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;legend&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 50,&#10;      &quot;y&quot;: 720,&#10;      &quot;strokeColor&quot;: &quot;#495057&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 500,&#10;      &quot;height&quot;: 80,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: null,&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;fontSize&quot;: 12,&#10;      &quot;fontFamily&quot;: 1,&#10;      &quot;text&quot;: &quot;Legend:\n API Gateway (Entry Point)\n Microservices (Business Logic)\n Data Layer (Storage &amp; Cache)\n Monitoring (Observability)&quot;,&#10;      &quot;textAlign&quot;: &quot;left&quot;,&#10;      &quot;verticalAlign&quot;: &quot;top&quot;,&#10;      &quot;containerId&quot;: null,&#10;      &quot;originalText&quot;: &quot;Legend:\n API Gateway (Entry Point)\n Microservices (Business Logic)\n Data Layer (Storage &amp; Cache)\n Monitoring (Observability)&quot;,&#10;      &quot;lineHeight&quot;: 1.25,&#10;      &quot;baseline&quot;: 76&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;arrow&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;gateway-to-services-1&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 250,&#10;      &quot;y&quot;: 280,&#10;      &quot;strokeColor&quot;: &quot;#495057&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 0,&#10;      &quot;height&quot;: 50,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 2&#10;      },&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;startBinding&quot;: null,&#10;      &quot;endBinding&quot;: null,&#10;      &quot;lastCommittedPoint&quot;: null,&#10;      &quot;startArrowhead&quot;: null,&#10;      &quot;endArrowhead&quot;: &quot;arrow&quot;,&#10;      &quot;points&quot;: [&#10;        [0, 0],&#10;        [0, 50]&#10;      ]&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;arrow&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;gateway-to-services-2&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 400,&#10;      &quot;y&quot;: 280,&#10;      &quot;strokeColor&quot;: &quot;#495057&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 0,&#10;      &quot;height&quot;: 50,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 2&#10;      },&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;startBinding&quot;: null,&#10;      &quot;endBinding&quot;: null,&#10;      &quot;lastCommittedPoint&quot;: null,&#10;      &quot;startArrowhead&quot;: null,&#10;      &quot;endArrowhead&quot;: &quot;arrow&quot;,&#10;      &quot;points&quot;: [&#10;        [0, 0],&#10;        [0, 50]&#10;      ]&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;arrow&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;gateway-to-services-3&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 550,&#10;      &quot;y&quot;: 280,&#10;      &quot;strokeColor&quot;: &quot;#495057&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 0,&#10;      &quot;height&quot;: 50,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 2&#10;      },&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;startBinding&quot;: null,&#10;      &quot;endBinding&quot;: null,&#10;      &quot;lastCommittedPoint&quot;: null,&#10;      &quot;startArrowhead&quot;: null,&#10;      &quot;endArrowhead&quot;: &quot;arrow&quot;,&#10;      &quot;points&quot;: [&#10;        [0, 0],&#10;        [0, 50]&#10;      ]&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;arrow&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;services-to-db-1&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 175,&#10;      &quot;y&quot;: 550,&#10;      &quot;strokeColor&quot;: &quot;#495057&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 0,&#10;      &quot;height&quot;: 50,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 2&#10;      },&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;startBinding&quot;: null,&#10;      &quot;endBinding&quot;: null,&#10;      &quot;lastCommittedPoint&quot;: null,&#10;      &quot;startArrowhead&quot;: null,&#10;      &quot;endArrowhead&quot;: &quot;arrow&quot;,&#10;      &quot;points&quot;: [&#10;        [0, 0],&#10;        [0, 50]&#10;      ]&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;arrow&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;services-to-db-2&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 375,&#10;      &quot;y&quot;: 550,&#10;      &quot;strokeColor&quot;: &quot;#495057&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 0,&#10;      &quot;height&quot;: 50,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 2&#10;      },&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;startBinding&quot;: null,&#10;      &quot;endBinding&quot;: null,&#10;      &quot;lastCommittedPoint&quot;: null,&#10;      &quot;startArrowhead&quot;: null,&#10;      &quot;endArrowhead&quot;: &quot;arrow&quot;,&#10;      &quot;points&quot;: [&#10;        [0, 0],&#10;        [0, 50]&#10;      ]&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;arrow&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;services-to-db-3&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;solid&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 575,&#10;      &quot;y&quot;: 550,&#10;      &quot;strokeColor&quot;: &quot;#495057&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 0,&#10;      &quot;height&quot;: 50,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 2&#10;      },&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;startBinding&quot;: null,&#10;      &quot;endBinding&quot;: null,&#10;      &quot;lastCommittedPoint&quot;: null,&#10;      &quot;startArrowhead&quot;: null,&#10;      &quot;endArrowhead&quot;: &quot;arrow&quot;,&#10;      &quot;points&quot;: [&#10;        [0, 0],&#10;        [0, 50]&#10;      ]&#10;    },&#10;    {&#10;      &quot;type&quot;: &quot;arrow&quot;,&#10;      &quot;version&quot;: 1,&#10;      &quot;versionNonce&quot;: 1,&#10;      &quot;isDeleted&quot;: false,&#10;      &quot;id&quot;: &quot;monitoring-connection&quot;,&#10;      &quot;fillStyle&quot;: &quot;hachure&quot;,&#10;      &quot;strokeWidth&quot;: 1,&#10;      &quot;strokeStyle&quot;: &quot;dashed&quot;,&#10;      &quot;roughness&quot;: 1,&#10;      &quot;opacity&quot;: 100,&#10;      &quot;angle&quot;: 0,&#10;      &quot;x&quot;: 770,&#10;      &quot;y&quot;: 300,&#10;      &quot;strokeColor&quot;: &quot;#fd7e14&quot;,&#10;      &quot;backgroundColor&quot;: &quot;transparent&quot;,&#10;      &quot;width&quot;: 50,&#10;      &quot;height&quot;: 0,&#10;      &quot;seed&quot;: 1,&#10;      &quot;groupIds&quot;: [],&#10;      &quot;frameId&quot;: null,&#10;      &quot;roundness&quot;: {&#10;        &quot;type&quot;: 2&#10;      },&#10;      &quot;boundElements&quot;: [],&#10;      &quot;updated&quot;: 1,&#10;      &quot;link&quot;: null,&#10;      &quot;locked&quot;: false,&#10;      &quot;startBinding&quot;: null,&#10;      &quot;endBinding&quot;: null,&#10;      &quot;lastCommittedPoint&quot;: null,&#10;      &quot;startArrowhead&quot;: null,&#10;      &quot;endArrowhead&quot;: &quot;arrow&quot;,&#10;      &quot;points&quot;: [&#10;        [0, 0],&#10;        [50, 0]&#10;      ]&#10;    }&#10;  ],&#10;  &quot;appState&quot;: {&#10;    &quot;gridSize&quot;: null,&#10;    &quot;viewBackgroundColor&quot;: &quot;#ffffff&quot;&#10;  },&#10;  &quot;files&quot;: {}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Dockerfile.alpine">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile.alpine" />
              <option name="originalContent" value="# Alpine-based Lightweight Dockerfile&#10;# This reduces image size to ~150MB while keeping shell access&#10;&#10;# Build stage - Use Alpine-based Maven&#10;FROM maven:3.9.11-openjdk-17-slim AS build&#10;&#10;WORKDIR /app&#10;&#10;# Copy dependency files first for better caching&#10;COPY pom.xml .&#10;COPY */pom.xml ./&#10;&#10;# Create directory structure and copy pom files&#10;RUN mkdir -p common gateway db-migration admin-service auth-service user-service \&#10;    appointment-service availability-service file-service notification-service \&#10;    payment-service prescription-service taxonomy-service&#10;&#10;COPY common/pom.xml ./common/&#10;COPY gateway/pom.xml ./gateway/&#10;COPY db-migration/pom.xml ./db-migration/&#10;COPY admin-service/pom.xml ./admin-service/&#10;COPY auth-service/pom.xml ./auth-service/&#10;COPY user-service/pom.xml ./user-service/&#10;COPY appointment-service/pom.xml ./appointment-service/&#10;COPY availability-service/pom.xml ./availability-service/&#10;COPY file-service/pom.xml ./file-service/&#10;COPY notification-service/pom.xml ./notification-service/&#10;COPY payment-service/pom.xml ./payment-service/&#10;COPY prescription-service/pom.xml ./prescription-service/&#10;COPY taxonomy-service/pom.xml ./taxonomy-service/&#10;&#10;# Download dependencies only&#10;RUN mvn dependency:go-offline -DexcludeGroupIds=com.docmate&#10;&#10;# Copy source code&#10;COPY . .&#10;&#10;# Build the specific service&#10;ARG SERVICE_NAME&#10;RUN mvn clean package -pl ${SERVICE_NAME} -am -DskipTests &amp;&amp; \&#10;    # Extract JAR layers for better caching&#10;    java -Djarmode=layertools -jar ${SERVICE_NAME}/target/${SERVICE_NAME}-*.jar extract&#10;&#10;# Runtime stage - Use JRE Alpine (smaller than full JDK)&#10;FROM openjdk:17-jre-alpine&#10;&#10;# Install only essential packages&#10;RUN apk add --no-cache \&#10;    curl \&#10;    tzdata &amp;&amp; \&#10;    # Create non-root user&#10;    addgroup -g 1001 -S appuser &amp;&amp; \&#10;    adduser -u 1001 -S appuser -G appuser&#10;&#10;WORKDIR /app&#10;&#10;# Copy JAR layers (Spring Boot layered approach)&#10;COPY --from=build dependencies/ ./&#10;COPY --from=build snapshot-dependencies/ ./&#10;COPY --from=build spring-boot-loader/ ./&#10;COPY --from=build application/ ./&#10;&#10;# Change ownership&#10;RUN chown -R appuser:appuser /app&#10;&#10;USER appuser&#10;&#10;EXPOSE 8080&#10;&#10;# Health check&#10;HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \&#10;    CMD curl -f http://localhost:8080/actuator/health || exit 1&#10;&#10;# Use Spring Boot launcher for better performance&#10;ENTRYPOINT [&quot;java&quot;, \&#10;    &quot;-XX:+UseContainerSupport&quot;, \&#10;    &quot;-XX:MaxRAMPercentage=75.0&quot;, \&#10;    &quot;-XX:+UseG1GC&quot;, \&#10;    &quot;-XX:+UseStringDeduplication&quot;, \&#10;    &quot;org.springframework.boot.loader.launch.JarLauncher&quot;]&#10;" />
              <option name="updatedContent" value="# Alpine-based Lightweight Dockerfile&#10;# This reduces image size to ~150MB while keeping shell access&#10;&#10;# Build stage - Use Alpine-based Maven (corrected image tag)&#10;FROM maven:3.9-openjdk-17-slim AS build&#10;&#10;WORKDIR /app&#10;&#10;# Copy dependency files first for better caching&#10;COPY pom.xml .&#10;COPY */pom.xml ./&#10;&#10;# Create directory structure and copy pom files&#10;RUN mkdir -p common gateway db-migration admin-service auth-service user-service \&#10;    appointment-service availability-service file-service notification-service \&#10;    payment-service prescription-service taxonomy-service&#10;&#10;COPY common/pom.xml ./common/&#10;COPY gateway/pom.xml ./gateway/&#10;COPY db-migration/pom.xml ./db-migration/&#10;COPY admin-service/pom.xml ./admin-service/&#10;COPY auth-service/pom.xml ./auth-service/&#10;COPY user-service/pom.xml ./user-service/&#10;COPY appointment-service/pom.xml ./appointment-service/&#10;COPY availability-service/pom.xml ./availability-service/&#10;COPY file-service/pom.xml ./file-service/&#10;COPY notification-service/pom.xml ./notification-service/&#10;COPY payment-service/pom.xml ./payment-service/&#10;COPY prescription-service/pom.xml ./prescription-service/&#10;COPY taxonomy-service/pom.xml ./taxonomy-service/&#10;&#10;# Download dependencies only&#10;RUN mvn dependency:go-offline -DexcludeGroupIds=com.docmate || true&#10;&#10;# Copy source code&#10;COPY . .&#10;&#10;# Build the specific service&#10;ARG SERVICE_NAME&#10;RUN mvn clean package -pl ${SERVICE_NAME} -am -DskipTests &amp;&amp; \&#10;    # Extract JAR layers for better caching&#10;    java -Djarmode=layertools -jar ${SERVICE_NAME}/target/${SERVICE_NAME}-*.jar extract&#10;&#10;# Runtime stage - Use JRE Alpine (smaller than full JDK)&#10;FROM openjdk:17-jre-alpine&#10;&#10;# Install only essential packages&#10;RUN apk add --no-cache \&#10;    curl \&#10;    tzdata &amp;&amp; \&#10;    # Create non-root user&#10;    addgroup -g 1001 -S appuser &amp;&amp; \&#10;    adduser -u 1001 -S appuser -G appuser&#10;&#10;WORKDIR /app&#10;&#10;# Copy JAR layers (Spring Boot layered approach)&#10;COPY --from=build dependencies/ ./&#10;COPY --from=build snapshot-dependencies/ ./&#10;COPY --from=build spring-boot-loader/ ./&#10;COPY --from=build application/ ./&#10;&#10;# Change ownership&#10;RUN chown -R appuser:appuser /app&#10;&#10;USER appuser&#10;&#10;EXPOSE 8080&#10;&#10;# Health check&#10;HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \&#10;    CMD curl -f http://localhost:8080/actuator/health || exit 1&#10;&#10;# Use Spring Boot launcher for better performance&#10;ENTRYPOINT [&quot;java&quot;, \&#10;    &quot;-XX:+UseContainerSupport&quot;, \&#10;    &quot;-XX:MaxRAMPercentage=75.0&quot;, \&#10;    &quot;-XX:+UseG1GC&quot;, \&#10;    &quot;-XX:+UseStringDeduplication&quot;, \&#10;    &quot;org.springframework.boot.loader.launch.JarLauncher&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Dockerfile.distroless">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile.distroless" />
              <option name="originalContent" value="# Ultra-Lightweight Dockerfile using Distroless Images&#10;# This can reduce image size from ~300MB to ~100MB&#10;&#10;# Build stage - Use Maven with OpenJDK (smaller than Corretto)&#10;FROM maven:3.9.11-openjdk-17-slim AS build&#10;&#10;# Set working directory&#10;WORKDIR /app&#10;&#10;# Copy dependency files first for better caching&#10;COPY pom.xml .&#10;COPY common/pom.xml ./common/&#10;COPY gateway/pom.xml ./gateway/&#10;COPY db-migration/pom.xml ./db-migration/&#10;COPY admin-service/pom.xml ./admin-service/&#10;COPY auth-service/pom.xml ./auth-service/&#10;COPY user-service/pom.xml ./user-service/&#10;COPY appointment-service/pom.xml ./appointment-service/&#10;COPY availability-service/pom.xml ./availability-service/&#10;COPY file-service/pom.xml ./file-service/&#10;COPY notification-service/pom.xml ./notification-service/&#10;COPY payment-service/pom.xml ./payment-service/&#10;COPY prescription-service/pom.xml ./prescription-service/&#10;COPY taxonomy-service/pom.xml ./taxonomy-service/&#10;&#10;# Download dependencies (this layer will be cached)&#10;RUN mvn dependency:go-offline -DexcludeGroupIds=com.docmate&#10;&#10;# Copy source code&#10;COPY common/ ./common/&#10;COPY gateway/ ./gateway/&#10;COPY db-migration/ ./db-migration/&#10;COPY admin-service/ ./admin-service/&#10;COPY auth-service/ ./auth-service/&#10;COPY user-service/ ./user-service/&#10;COPY appointment-service/ ./appointment-service/&#10;COPY availability-service/ ./availability-service/&#10;COPY file-service/ ./file-service/&#10;COPY notification-service/ ./notification-service/&#10;COPY payment-service/ ./payment-service/&#10;COPY prescription-service/ ./prescription-service/&#10;COPY taxonomy-service/ ./taxonomy-service/&#10;&#10;# Build the specific service&#10;ARG SERVICE_NAME&#10;RUN mvn clean package -pl ${SERVICE_NAME} -am -DskipTests&#10;&#10;# Runtime stage - Use Google Distroless (ultra-minimal)&#10;FROM gcr.io/distroless/java17-debian12:nonroot&#10;&#10;# Copy the built JAR file&#10;ARG SERVICE_NAME&#10;COPY --from=build /app/${SERVICE_NAME}/target/${SERVICE_NAME}-*.jar /app.jar&#10;&#10;# Expose port&#10;EXPOSE 8080&#10;&#10;# Run with optimized JVM settings&#10;ENTRYPOINT [&quot;java&quot;, \&#10;    &quot;-XX:+UseContainerSupport&quot;, \&#10;    &quot;-XX:MaxRAMPercentage=75.0&quot;, \&#10;    &quot;-XX:+UseG1GC&quot;, \&#10;    &quot;-XX:+UseStringDeduplication&quot;, \&#10;    &quot;-XX:+UseCompressedOops&quot;, \&#10;    &quot;-XX:+UseCompressedClassPointers&quot;, \&#10;    &quot;-jar&quot;, &quot;/app.jar&quot;]&#10;" />
              <option name="updatedContent" value="# Ultra-Lightweight Dockerfile using Distroless Images&#10;# This can reduce image size from ~300MB to ~100MB&#10;&#10;# Build stage - Use Maven with OpenJDK (corrected image tag)&#10;FROM maven:3.9-openjdk-17-slim AS build&#10;&#10;# Set working directory&#10;WORKDIR /app&#10;&#10;# Copy dependency files first for better caching&#10;COPY pom.xml .&#10;COPY common/pom.xml ./common/&#10;COPY gateway/pom.xml ./gateway/&#10;COPY db-migration/pom.xml ./db-migration/&#10;COPY admin-service/pom.xml ./admin-service/&#10;COPY auth-service/pom.xml ./auth-service/&#10;COPY user-service/pom.xml ./user-service/&#10;COPY appointment-service/pom.xml ./appointment-service/&#10;COPY availability-service/pom.xml ./availability-service/&#10;COPY file-service/pom.xml ./file-service/&#10;COPY notification-service/pom.xml ./notification-service/&#10;COPY payment-service/pom.xml ./payment-service/&#10;COPY prescription-service/pom.xml ./prescription-service/&#10;COPY taxonomy-service/pom.xml ./taxonomy-service/&#10;&#10;# Download dependencies (this layer will be cached)&#10;RUN mvn dependency:go-offline -DexcludeGroupIds=com.docmate || true&#10;&#10;# Copy source code&#10;COPY common/ ./common/&#10;COPY gateway/ ./gateway/&#10;COPY db-migration/ ./db-migration/&#10;COPY admin-service/ ./admin-service/&#10;COPY auth-service/ ./auth-service/&#10;COPY user-service/ ./user-service/&#10;COPY appointment-service/ ./appointment-service/&#10;COPY availability-service/ ./availability-service/&#10;COPY file-service/ ./file-service/&#10;COPY notification-service/ ./notification-service/&#10;COPY payment-service/ ./payment-service/&#10;COPY prescription-service/ ./prescription-service/&#10;COPY taxonomy-service/ ./taxonomy-service/&#10;&#10;# Build the specific service&#10;ARG SERVICE_NAME&#10;RUN mvn clean package -pl ${SERVICE_NAME} -am -DskipTests&#10;&#10;# Runtime stage - Use Google Distroless (ultra-minimal)&#10;FROM gcr.io/distroless/java17-debian12:nonroot&#10;&#10;# Copy the built JAR file&#10;ARG SERVICE_NAME&#10;COPY --from=build /app/${SERVICE_NAME}/target/${SERVICE_NAME}-*.jar /app.jar&#10;&#10;# Expose port&#10;EXPOSE 8080&#10;&#10;# Run with optimized JVM settings&#10;ENTRYPOINT [&quot;java&quot;, \&#10;    &quot;-XX:+UseContainerSupport&quot;, \&#10;    &quot;-XX:MaxRAMPercentage=75.0&quot;, \&#10;    &quot;-XX:+UseG1GC&quot;, \&#10;    &quot;-XX:+UseStringDeduplication&quot;, \&#10;    &quot;-XX:+UseCompressedOops&quot;, \&#10;    &quot;-XX:+UseCompressedClassPointers&quot;, \&#10;    &quot;-jar&quot;, &quot;/app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Dockerfile.minimal">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile.minimal" />
              <option name="originalContent" value="# Ultra-Minimal Production Dockerfile using JLink Custom JRE&#10;# This creates the smallest possible images (~80MB) by building a custom JRE&#10;&#10;# Build stage with JLink custom JRE creation&#10;FROM maven:3.9-openjdk-17 AS jre-build&#10;&#10;# Create a custom JRE with only required modules&#10;RUN jlink \&#10;    --add-modules java.base,java.logging,java.xml,java.desktop,java.management,java.naming,java.net.http,java.security.jgss,java.instrument \&#10;    --strip-debug \&#10;    --no-man-pages \&#10;    --no-header-files \&#10;    --compress=2 \&#10;    --output /customjre&#10;&#10;# Application build stage&#10;FROM maven:3.9-openjdk-17-slim AS build&#10;&#10;WORKDIR /app&#10;&#10;# Copy and cache dependencies&#10;COPY pom.xml .&#10;COPY common/pom.xml ./common/&#10;COPY gateway/pom.xml ./gateway/&#10;COPY db-migration/pom.xml ./db-migration/&#10;COPY admin-service/pom.xml ./admin-service/&#10;COPY auth-service/pom.xml ./auth-service/&#10;COPY user-service/pom.xml ./user-service/&#10;COPY appointment-service/pom.xml ./appointment-service/&#10;COPY availability-service/pom.xml ./availability-service/&#10;COPY file-service/pom.xml ./file-service/&#10;COPY notification-service/pom.xml ./notification-service/&#10;COPY payment-service/pom.xml ./payment-service/&#10;COPY prescription-service/pom.xml ./prescription-service/&#10;COPY taxonomy-service/pom.xml ./taxonomy-service/&#10;&#10;# Download dependencies first (cached layer)&#10;RUN mvn dependency:go-offline -DexcludeGroupIds=com.docmate || true&#10;&#10;# Copy source and build&#10;COPY . .&#10;ARG SERVICE_NAME&#10;RUN mvn clean package -pl ${SERVICE_NAME} -am -DskipTests&#10;&#10;# Final runtime stage - minimal base image&#10;FROM debian:12-slim&#10;&#10;# Copy custom JRE&#10;COPY --from=jre-build /customjre /opt/jre&#10;&#10;# Install minimal runtime dependencies&#10;RUN apt-get update &amp;&amp; \&#10;    apt-get install -y --no-install-recommends \&#10;    ca-certificates \&#10;    curl &amp;&amp; \&#10;    apt-get clean &amp;&amp; \&#10;    rm -rf /var/lib/apt/lists/* &amp;&amp; \&#10;    # Create non-root user&#10;    groupadd -r appuser &amp;&amp; useradd -r -g appuser appuser&#10;&#10;WORKDIR /app&#10;&#10;# Copy application&#10;ARG SERVICE_NAME&#10;COPY --from=build /app/${SERVICE_NAME}/target/${SERVICE_NAME}-*.jar app.jar&#10;&#10;RUN chown -R appuser:appuser /app&#10;&#10;USER appuser&#10;&#10;EXPOSE 8080&#10;&#10;# Health check&#10;HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \&#10;    CMD curl -f http://localhost:8080/actuator/health || exit 1&#10;&#10;# Use custom JRE&#10;ENTRYPOINT [&quot;/opt/jre/bin/java&quot;, \&#10;    &quot;-XX:+UseContainerSupport&quot;, \&#10;    &quot;-XX:MaxRAMPercentage=75.0&quot;, \&#10;    &quot;-XX:+UseG1GC&quot;, \&#10;    &quot;-XX:+UseStringDeduplication&quot;, \&#10;    &quot;-XX:+UseCompressedOops&quot;, \&#10;    &quot;-jar&quot;, &quot;app.jar&quot;]&#10;" />
              <option name="updatedContent" value="# Ultra-Minimal Production Dockerfile using JLink Custom JRE&#10;# This creates the smallest possible images (~80MB) by building a custom JRE&#10;&#10;# Build stage with JLink custom JRE creation&#10;FROM maven:3.8.5-openjdk-17 AS jre-build&#10;&#10;# Create a custom JRE with only required modules&#10;RUN jlink \&#10;    --add-modules java.base,java.logging,java.xml,java.desktop,java.management,java.naming,java.net.http,java.security.jgss,java.instrument \&#10;    --strip-debug \&#10;    --no-man-pages \&#10;    --no-header-files \&#10;    --compress=2 \&#10;    --output /customjre&#10;&#10;# Application build stage&#10;FROM maven:3.8.5-openjdk-17-slim AS build&#10;&#10;WORKDIR /app&#10;&#10;# Copy and cache dependencies&#10;COPY pom.xml .&#10;COPY common/pom.xml ./common/&#10;COPY gateway/pom.xml ./gateway/&#10;COPY db-migration/pom.xml ./db-migration/&#10;COPY admin-service/pom.xml ./admin-service/&#10;COPY auth-service/pom.xml ./auth-service/&#10;COPY user-service/pom.xml ./user-service/&#10;COPY appointment-service/pom.xml ./appointment-service/&#10;COPY availability-service/pom.xml ./availability-service/&#10;COPY file-service/pom.xml ./file-service/&#10;COPY notification-service/pom.xml ./notification-service/&#10;COPY payment-service/pom.xml ./payment-service/&#10;COPY prescription-service/pom.xml ./prescription-service/&#10;COPY taxonomy-service/pom.xml ./taxonomy-service/&#10;&#10;# Download dependencies first (cached layer)&#10;RUN mvn dependency:go-offline -DexcludeGroupIds=com.docmate || true&#10;&#10;# Copy source and build&#10;COPY . .&#10;ARG SERVICE_NAME&#10;RUN mvn clean package -pl ${SERVICE_NAME} -am -DskipTests&#10;&#10;# Final runtime stage - minimal base image&#10;FROM debian:12-slim&#10;&#10;# Copy custom JRE&#10;COPY --from=jre-build /customjre /opt/jre&#10;&#10;# Install minimal runtime dependencies&#10;RUN apt-get update &amp;&amp; \&#10;    apt-get install -y --no-install-recommends \&#10;    ca-certificates \&#10;    curl &amp;&amp; \&#10;    apt-get clean &amp;&amp; \&#10;    rm -rf /var/lib/apt/lists/* &amp;&amp; \&#10;    # Create non-root user&#10;    groupadd -r appuser &amp;&amp; useradd -r -g appuser appuser&#10;&#10;WORKDIR /app&#10;&#10;# Copy application&#10;ARG SERVICE_NAME&#10;COPY --from=build /app/${SERVICE_NAME}/target/${SERVICE_NAME}-*.jar app.jar&#10;&#10;RUN chown -R appuser:appuser /app&#10;&#10;USER appuser&#10;&#10;EXPOSE 8080&#10;&#10;# Health check&#10;HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \&#10;    CMD curl -f http://localhost:8080/actuator/health || exit 1&#10;&#10;# Use custom JRE&#10;ENTRYPOINT [&quot;/opt/jre/bin/java&quot;, \&#10;    &quot;-XX:+UseContainerSupport&quot;, \&#10;    &quot;-XX:MaxRAMPercentage=75.0&quot;, \&#10;    &quot;-XX:+UseG1GC&quot;, \&#10;    &quot;-XX:+UseStringDeduplication&quot;, \&#10;    &quot;-XX:+UseCompressedOops&quot;, \&#10;    &quot;-jar&quot;, &quot;app.jar&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/admin-service/src/main/java/com/docmate/admin/AdminServiceApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/admin-service/src/main/java/com/docmate/admin/AdminServiceApplication.java" />
              <option name="originalContent" value="package com.docmate.admin;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EntityScan(basePackages = {&quot;com.docmate.common.entity&quot;, &quot;com.docmate.admin.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.admin.repository&quot;})&#10;public class AdminServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(AdminServiceApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.admin;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EntityScan(basePackages = {&quot;com.docmate.common.entity&quot;, &quot;com.docmate.admin.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.admin.repository&quot;, &quot;com.docmate.common.repository&quot;})&#10;public class AdminServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(AdminServiceApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/admin-service/src/main/java/com/docmate/admin/controller/AdminController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/admin-service/src/main/java/com/docmate/admin/controller/AdminController.java" />
              <option name="updatedContent" value="package com.docmate.admin.controller;&#10;&#10;import com.docmate.admin.dto.DashboardStatsDto;&#10;import com.docmate.admin.service.AdminDashboardService;&#10;import com.docmate.common.dto.response.ApiResponse;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.security.SecurityRequirement;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.format.annotation.DateTimeFormat;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Map;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/admin&quot;)&#10;@RequiredArgsConstructor&#10;@Tag(name = &quot;Admin Dashboard&quot;, description = &quot;Admin dashboard and system management APIs&quot;)&#10;@SecurityRequirement(name = &quot;bearerAuth&quot;)&#10;@PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;public class AdminController {&#10;    &#10;    private final AdminDashboardService adminDashboardService;&#10;    &#10;    @GetMapping(&quot;/dashboard/stats&quot;)&#10;    @Operation(summary = &quot;Get dashboard statistics&quot;, description = &quot;Get comprehensive dashboard statistics&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;DashboardStatsDto&gt;&gt; getDashboardStats() {&#10;        DashboardStatsDto stats = adminDashboardService.getDashboardStats();&#10;        return ResponseEntity.ok(ApiResponse.success(stats));&#10;    }&#10;    &#10;    @GetMapping(&quot;/dashboard/revenue&quot;)&#10;    @Operation(summary = &quot;Get revenue statistics&quot;, description = &quot;Get revenue statistics for a date range&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Map&lt;String, Object&gt;&gt;&gt; getRevenueStats(&#10;            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,&#10;            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate) {&#10;        Map&lt;String, Object&gt; revenueStats = adminDashboardService.getRevenueStats(startDate, endDate);&#10;        return ResponseEntity.ok(ApiResponse.success(revenueStats));&#10;    }&#10;    &#10;    @GetMapping(&quot;/dashboard/appointments&quot;)&#10;    @Operation(summary = &quot;Get appointment statistics&quot;, description = &quot;Get appointment statistics and trends&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Map&lt;String, Object&gt;&gt;&gt; getAppointmentStats(&#10;            @RequestParam(defaultValue = &quot;30&quot;) int days) {&#10;        Map&lt;String, Object&gt; appointmentStats = adminDashboardService.getAppointmentStats(days);&#10;        return ResponseEntity.ok(ApiResponse.success(appointmentStats));&#10;    }&#10;    &#10;    @GetMapping(&quot;/dashboard/users&quot;)&#10;    @Operation(summary = &quot;Get user statistics&quot;, description = &quot;Get user registration and activity statistics&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Map&lt;String, Object&gt;&gt;&gt; getUserStats() {&#10;        Map&lt;String, Object&gt; userStats = adminDashboardService.getUserStats();&#10;        return ResponseEntity.ok(ApiResponse.success(userStats));&#10;    }&#10;    &#10;    @GetMapping(&quot;/system/health&quot;)&#10;    @Operation(summary = &quot;Get system health&quot;, description = &quot;Get system health and service status&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Map&lt;String, Object&gt;&gt;&gt; getSystemHealth() {&#10;        Map&lt;String, Object&gt; healthStats = adminDashboardService.getSystemHealth();&#10;        return ResponseEntity.ok(ApiResponse.success(healthStats));&#10;    }&#10;    &#10;    @PostMapping(&quot;/system/maintenance&quot;)&#10;    @Operation(summary = &quot;Enable maintenance mode&quot;, description = &quot;Enable or disable system maintenance mode&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; toggleMaintenanceMode(@RequestParam boolean enabled) {&#10;        adminDashboardService.toggleMaintenanceMode(enabled);&#10;        String message = enabled ? &quot;Maintenance mode enabled&quot; : &quot;Maintenance mode disabled&quot;;&#10;        return ResponseEntity.ok(ApiResponse.success(message, &quot;System maintenance mode updated&quot;));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/admin-service/src/main/java/com/docmate/admin/controller/AdminVerificationController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/admin-service/src/main/java/com/docmate/admin/controller/AdminVerificationController.java" />
              <option name="updatedContent" value="package com.docmate.admin.controller;&#10;&#10;import com.docmate.admin.service.AdminVerificationService;&#10;import com.docmate.common.dto.DoctorVerificationDto;&#10;import com.docmate.common.dto.VerificationReviewRequest;&#10;import com.docmate.common.enums.VerificationStatus;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.validation.annotation.Validated;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import jakarta.validation.Valid;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/admin/verifications&quot;)&#10;@RequiredArgsConstructor&#10;@Validated&#10;@Tag(name = &quot;Admin - Doctor Verification&quot;, description = &quot;Admin endpoints for managing doctor verifications&quot;)&#10;@PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;public class AdminVerificationController {&#10;&#10;    private final AdminVerificationService adminVerificationService;&#10;&#10;    @Operation(summary = &quot;Get pending verifications&quot;, description = &quot;Get all pending doctor verifications for review&quot;)&#10;    @GetMapping(&quot;/pending&quot;)&#10;    public ResponseEntity&lt;List&lt;DoctorVerificationDto&gt;&gt; getPendingVerifications() {&#10;        log.info(&quot;Admin fetching pending verifications&quot;);&#10;        List&lt;DoctorVerificationDto&gt; verifications = adminVerificationService.getPendingVerifications();&#10;        return ResponseEntity.ok(verifications);&#10;    }&#10;&#10;    @Operation(summary = &quot;Get verification details&quot;, description = &quot;Get detailed information about a specific verification&quot;)&#10;    @GetMapping(&quot;/{verificationId}&quot;)&#10;    public ResponseEntity&lt;DoctorVerificationDto&gt; getVerificationDetails(@PathVariable UUID verificationId) {&#10;        log.info(&quot;Admin fetching verification details: {}&quot;, verificationId);&#10;        DoctorVerificationDto verification = adminVerificationService.getVerificationById(verificationId);&#10;        return ResponseEntity.ok(verification);&#10;    }&#10;&#10;    @Operation(summary = &quot;Review verification&quot;, description = &quot;Approve or reject a doctor verification&quot;)&#10;    @PostMapping(&quot;/review&quot;)&#10;    public ResponseEntity&lt;DoctorVerificationDto&gt; reviewVerification(&#10;            @Valid @RequestBody VerificationReviewRequest request,&#10;            Authentication authentication) {&#10;        &#10;        UUID adminUserId = UUID.fromString(authentication.getName());&#10;        log.info(&quot;Admin {} reviewing verification: {}&quot;, adminUserId, request.getVerificationId());&#10;        &#10;        DoctorVerificationDto verification = adminVerificationService.reviewVerification(request, adminUserId);&#10;        return ResponseEntity.ok(verification);&#10;    }&#10;&#10;    @Operation(summary = &quot;Get verifications by status&quot;, description = &quot;Get all verifications filtered by status&quot;)&#10;    @GetMapping(&quot;/status/{status}&quot;)&#10;    public ResponseEntity&lt;List&lt;DoctorVerificationDto&gt;&gt; getVerificationsByStatus(@PathVariable VerificationStatus status) {&#10;        log.info(&quot;Admin fetching verifications with status: {}&quot;, status);&#10;        List&lt;DoctorVerificationDto&gt; verifications = adminVerificationService.getVerificationsByStatus(status);&#10;        return ResponseEntity.ok(verifications);&#10;    }&#10;&#10;    @Operation(summary = &quot;Get verification statistics&quot;, description = &quot;Get count of pending verifications&quot;)&#10;    @GetMapping(&quot;/stats/pending-count&quot;)&#10;    public ResponseEntity&lt;Long&gt; getPendingVerificationCount() {&#10;        log.info(&quot;Admin fetching pending verification count&quot;);&#10;        long count = adminVerificationService.getPendingVerificationCount();&#10;        return ResponseEntity.ok(count);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/admin-service/src/main/java/com/docmate/admin/dto/DashboardStatsDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/admin-service/src/main/java/com/docmate/admin/dto/DashboardStatsDto.java" />
              <option name="updatedContent" value="package com.docmate.admin.dto;&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.math.BigDecimal;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class DashboardStatsDto {&#10;    &#10;    // User Statistics&#10;    private long totalUsers;&#10;    private long totalPatients;&#10;    private long totalDoctors;&#10;    private long totalAdmins;&#10;    private long newUsersThisMonth;&#10;    &#10;    // Doctor Statistics&#10;    private long approvedDoctors;&#10;    private long pendingDoctorApprovals;&#10;    private long rejectedDoctors;&#10;    &#10;    // Appointment Statistics&#10;    private long totalAppointments;&#10;    private long todaysAppointments;&#10;    private long pendingAppointments;&#10;    private long completedAppointments;&#10;    private long cancelledAppointments;&#10;    &#10;    // Payment Statistics&#10;    private BigDecimal totalRevenue;&#10;    private BigDecimal monthlyRevenue;&#10;    private BigDecimal todaysRevenue;&#10;    private long completedPayments;&#10;    private long failedPayments;&#10;    private long pendingPayments;&#10;    &#10;    // System Statistics&#10;    private long totalNotifications;&#10;    private long unreadNotifications;&#10;    private boolean maintenanceMode;&#10;    private String systemVersion;&#10;    private long uptime;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/admin-service/src/main/java/com/docmate/admin/service/AdminVerificationService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/admin-service/src/main/java/com/docmate/admin/service/AdminVerificationService.java" />
              <option name="originalContent" value="package com.docmate.admin.service;&#10;&#10;import com.docmate.common.dto.DoctorVerificationDto;&#10;import com.docmate.common.dto.VerificationReviewRequest;&#10;import com.docmate.common.entity.DoctorVerificationDocuments;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.enums.VerificationStatus;&#10;import com.docmate.common.exception.BusinessException;&#10;import com.docmate.common.repository.DoctorRepository;&#10;import com.docmate.common.repository.DoctorVerificationDocumentsRepository;&#10;import com.docmate.common.repository.UserRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.UUID;&#10;import java.util.stream.Collectors;&#10;&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor&#10;@Transactional&#10;public class AdminVerificationService {&#10;&#10;    private final DoctorVerificationDocumentsRepository verificationRepository;&#10;    private final DoctorRepository doctorRepository;&#10;    private final UserRepository userRepository;&#10;&#10;    @Transactional(readOnly = true)&#10;    public List&lt;DoctorVerificationDto&gt; getPendingVerifications() {&#10;        log.info(&quot;Fetching pending doctor verifications&quot;);&#10;&#10;        List&lt;DoctorVerificationDocuments&gt; verifications =&#10;            verificationRepository.findPendingVerificationsOrderByDate(VerificationStatus.PENDING);&#10;&#10;        return verifications.stream()&#10;                .map(this::mapToDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public DoctorVerificationDto getVerificationById(UUID verificationId) {&#10;        log.info(&quot;Fetching verification details for ID: {}&quot;, verificationId);&#10;&#10;        DoctorVerificationDocuments verification = verificationRepository.findById(verificationId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;VERIFICATION_NOT_FOUND&quot;,&#10;                    &quot;Verification not found&quot;, 404));&#10;&#10;        return mapToDto(verification);&#10;    }&#10;&#10;    public DoctorVerificationDto reviewVerification(VerificationReviewRequest request, UUID adminUserId) {&#10;        log.info(&quot;Processing verification review for ID: {} by admin: {}&quot;,&#10;            request.getVerificationId(), adminUserId);&#10;&#10;        // Validate admin user exists&#10;        User adminUser = userRepository.findById(adminUserId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;ADMIN_NOT_FOUND&quot;, &quot;Admin user not found&quot;, 404));&#10;&#10;        // Get verification document&#10;        DoctorVerificationDocuments verification = verificationRepository.findById(request.getVerificationId())&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;VERIFICATION_NOT_FOUND&quot;,&#10;                    &quot;Verification not found&quot;, 404));&#10;&#10;        // Validate current status&#10;        if (verification.getVerificationStatus() != VerificationStatus.PENDING) {&#10;            throw new BusinessException(&quot;VERIFICATION_ALREADY_PROCESSED&quot;,&#10;                &quot;This verification has already been processed&quot;, 400);&#10;        }&#10;&#10;        // Validate rejection reason if rejecting&#10;        if (request.getVerificationStatus() == VerificationStatus.REJECTED &amp;&amp;&#10;            (request.getRejectionReason() == null || request.getRejectionReason().trim().isEmpty())) {&#10;            throw new BusinessException(&quot;REJECTION_REASON_REQUIRED&quot;,&#10;                &quot;Rejection reason is required when rejecting verification&quot;, 400);&#10;        }&#10;&#10;        // Update verification status&#10;        verification.setVerificationStatus(request.getVerificationStatus());&#10;        verification.setVerifiedBy(adminUser);&#10;        verification.setVerifiedDate(LocalDateTime.now());&#10;&#10;        if (request.getVerificationStatus() == VerificationStatus.REJECTED) {&#10;            verification.setRejectionReason(request.getRejectionReason());&#10;        }&#10;&#10;        // If approved, update doctor's approval status&#10;        if (request.getVerificationStatus() == VerificationStatus.APPROVED) {&#10;            verification.getDoctor().setIsApproved(true);&#10;            doctorRepository.save(verification.getDoctor());&#10;            log.info(&quot;Doctor approved: {}&quot;, verification.getDoctor().getId());&#10;        }&#10;&#10;        verification = verificationRepository.save(verification);&#10;&#10;        log.info(&quot;Verification {} {} by admin {}&quot;,&#10;            verification.getId(),&#10;            request.getVerificationStatus().name().toLowerCase(),&#10;            adminUserId);&#10;&#10;        return mapToDto(verification);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public List&lt;DoctorVerificationDto&gt; getVerificationsByStatus(VerificationStatus status) {&#10;        log.info(&quot;Fetching verifications with status: {}&quot;, status);&#10;&#10;        List&lt;DoctorVerificationDocuments&gt; verifications = verificationRepository.findByVerificationStatus(status);&#10;        return verifications.stream()&#10;                .map(this::mapToDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public long getPendingVerificationCount() {&#10;        return verificationRepository.countByVerificationStatus(VerificationStatus.PENDING);&#10;    }&#10;&#10;    private DoctorVerificationDto mapToDto(DoctorVerificationDocuments verification) {&#10;        return DoctorVerificationDto.builder()&#10;                .id(verification.getId())&#10;                .doctorId(verification.getDoctor().getId())&#10;                .doctorName(verification.getDoctor().getUser().getFullName())&#10;                .licenseDocumentUrl(verification.getLicenseDocumentUrl())&#10;                .idDocumentUrl(verification.getIdDocumentUrl())&#10;                .verificationStatus(verification.getVerificationStatus())&#10;                .verifiedById(verification.getVerifiedBy() != null ? verification.getVerifiedBy().getId() : null)&#10;                .verifiedByName(verification.getVerifiedBy() != null ? verification.getVerifiedBy().getFullName() : null)&#10;                .verifiedDate(verification.getVerifiedDate())&#10;                .rejectionReason(verification.getRejectionReason())&#10;                .submittedDate(verification.getCreatedDate())&#10;                .build();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.admin.service;&#10;&#10;import com.docmate.common.dto.DoctorVerificationDto;&#10;import com.docmate.common.dto.VerificationReviewRequest;&#10;import com.docmate.common.entity.DoctorVerificationDocuments;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.enums.VerificationStatus;&#10;import com.docmate.common.exception.BusinessException;&#10;import com.docmate.common.repository.DoctorRepository;&#10;import com.docmate.common.repository.DoctorVerificationDocumentsRepository;&#10;import com.docmate.common.repository.CommonUserRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.UUID;&#10;import java.util.stream.Collectors;&#10;&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor&#10;@Transactional&#10;public class AdminVerificationService {&#10;&#10;    private final DoctorVerificationDocumentsRepository verificationRepository;&#10;    private final DoctorRepository doctorRepository;&#10;    private final CommonUserRepository userRepository;&#10;&#10;    @Transactional(readOnly = true)&#10;    public List&lt;DoctorVerificationDto&gt; getPendingVerifications() {&#10;        log.info(&quot;Fetching pending doctor verifications&quot;);&#10;&#10;        List&lt;DoctorVerificationDocuments&gt; verifications =&#10;            verificationRepository.findPendingVerificationsOrderByDate(VerificationStatus.PENDING);&#10;&#10;        return verifications.stream()&#10;                .map(this::mapToDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public DoctorVerificationDto getVerificationById(UUID verificationId) {&#10;        log.info(&quot;Fetching verification details for ID: {}&quot;, verificationId);&#10;&#10;        DoctorVerificationDocuments verification = verificationRepository.findById(verificationId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;VERIFICATION_NOT_FOUND&quot;,&#10;                    &quot;Verification not found&quot;, 404));&#10;&#10;        return mapToDto(verification);&#10;    }&#10;&#10;    public DoctorVerificationDto reviewVerification(VerificationReviewRequest request, UUID adminUserId) {&#10;        log.info(&quot;Processing verification review for ID: {} by admin: {}&quot;,&#10;            request.getVerificationId(), adminUserId);&#10;&#10;        // Validate admin user exists&#10;        User adminUser = userRepository.findById(adminUserId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;ADMIN_NOT_FOUND&quot;, &quot;Admin user not found&quot;, 404));&#10;&#10;        // Get verification document&#10;        DoctorVerificationDocuments verification = verificationRepository.findById(request.getVerificationId())&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;VERIFICATION_NOT_FOUND&quot;,&#10;                    &quot;Verification not found&quot;, 404));&#10;&#10;        // Validate current status&#10;        if (verification.getVerificationStatus() != VerificationStatus.PENDING) {&#10;            throw new BusinessException(&quot;VERIFICATION_ALREADY_PROCESSED&quot;,&#10;                &quot;This verification has already been processed&quot;, 400);&#10;        }&#10;&#10;        // Validate rejection reason if rejecting&#10;        if (request.getVerificationStatus() == VerificationStatus.REJECTED &amp;&amp;&#10;            (request.getRejectionReason() == null || request.getRejectionReason().trim().isEmpty())) {&#10;            throw new BusinessException(&quot;REJECTION_REASON_REQUIRED&quot;,&#10;                &quot;Rejection reason is required when rejecting verification&quot;, 400);&#10;        }&#10;&#10;        // Update verification status&#10;        verification.setVerificationStatus(request.getVerificationStatus());&#10;        verification.setVerifiedBy(adminUser);&#10;        verification.setVerifiedDate(LocalDateTime.now());&#10;&#10;        if (request.getVerificationStatus() == VerificationStatus.REJECTED) {&#10;            verification.setRejectionReason(request.getRejectionReason());&#10;        }&#10;&#10;        // If approved, update doctor's approval status&#10;        if (request.getVerificationStatus() == VerificationStatus.APPROVED) {&#10;            verification.getDoctor().setIsApproved(true);&#10;            doctorRepository.save(verification.getDoctor());&#10;            log.info(&quot;Doctor approved: {}&quot;, verification.getDoctor().getId());&#10;        }&#10;&#10;        verification = verificationRepository.save(verification);&#10;&#10;        log.info(&quot;Verification {} {} by admin {}&quot;,&#10;            verification.getId(),&#10;            request.getVerificationStatus().name().toLowerCase(),&#10;            adminUserId);&#10;&#10;        return mapToDto(verification);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public List&lt;DoctorVerificationDto&gt; getVerificationsByStatus(VerificationStatus status) {&#10;        log.info(&quot;Fetching verifications with status: {}&quot;, status);&#10;&#10;        List&lt;DoctorVerificationDocuments&gt; verifications = verificationRepository.findByVerificationStatus(status);&#10;        return verifications.stream()&#10;                .map(this::mapToDto)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public long getPendingVerificationCount() {&#10;        return verificationRepository.countByVerificationStatus(VerificationStatus.PENDING);&#10;    }&#10;&#10;    private DoctorVerificationDto mapToDto(DoctorVerificationDocuments verification) {&#10;        return DoctorVerificationDto.builder()&#10;                .id(verification.getId())&#10;                .doctorId(verification.getDoctor().getId())&#10;                .doctorName(verification.getDoctor().getUser().getFullName())&#10;                .licenseDocumentUrl(verification.getLicenseDocumentUrl())&#10;                .idDocumentUrl(verification.getIdDocumentUrl())&#10;                .verificationStatus(verification.getVerificationStatus())&#10;                .verifiedById(verification.getVerifiedBy() != null ? verification.getVerifiedBy().getId() : null)&#10;                .verifiedByName(verification.getVerifiedBy() != null ? verification.getVerifiedBy().getFullName() : null)&#10;                .verifiedDate(verification.getVerifiedDate())&#10;                .rejectionReason(verification.getRejectionReason())&#10;                .submittedDate(verification.getCreatedDate())&#10;                .build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/admin-service/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/admin-service/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: admin-service&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;&#10;  liquibase:&#10;    change-log: classpath:db/changelog/db.changelog-master.xml&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;&#10;server:&#10;  port: ${PORT:8090}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc&#10;" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: admin-service&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;&#10;  liquibase:&#10;    enabled: false  # Disabled - using centralized db-migration service&#10;&#10;server:&#10;  port: ${PORT:8090}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/admin-service/src/main/resources/db/changelog/001-initial-schema.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/admin-service/src/main/resources/db/changelog/001-initial-schema.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-admin-users-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;admin_users&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;username&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;email&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;password_hash&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;full_name&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;role&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;ADMIN&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;last_login&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-admin-audit-logs-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;admin_audit_logs&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;admin_user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;action&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;resource_type&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;resource_id&quot; type=&quot;VARCHAR(100)&quot;/&gt;&#10;            &lt;column name=&quot;details&quot; type=&quot;JSONB&quot;/&gt;&#10;            &lt;column name=&quot;ip_address&quot; type=&quot;VARCHAR(45)&quot;/&gt;&#10;            &lt;column name=&quot;user_agent&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;timestamp&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;003-create-system-settings-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;system_settings&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;setting_key&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;setting_value&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;description&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;data_type&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;STRING&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;is_encrypted&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;004-add-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;admin_audit_logs&quot;&#10;                baseColumnNames=&quot;admin_user_id&quot;&#10;                referencedTableName=&quot;admin_users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_audit_logs_admin_user&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;005-create-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;admin_audit_logs&quot; indexName=&quot;idx_audit_logs_admin_user_id&quot;&gt;&#10;            &lt;column name=&quot;admin_user_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;admin_audit_logs&quot; indexName=&quot;idx_audit_logs_timestamp&quot;&gt;&#10;            &lt;column name=&quot;timestamp&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;admin_audit_logs&quot; indexName=&quot;idx_audit_logs_action&quot;&gt;&#10;            &lt;column name=&quot;action&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/admin-service/src/main/resources/db/changelog/db.changelog-master.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/admin-service/src/main/resources/db/changelog/db.changelog-master.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;!-- Admin Service Database Changes --&gt;&#10;    &lt;!-- &#10;        This is the master changelog file for admin-service.&#10;        Add individual changelog files below as your database schema evolves.&#10;        &#10;        Example structure:&#10;        &lt;include file=&quot;db/changelog/001-create-admin-tables.xml&quot;/&gt;&#10;        &lt;include file=&quot;db/changelog/002-add-audit-columns.xml&quot;/&gt;&#10;        &lt;include file=&quot;db/changelog/003-create-indexes.xml&quot;/&gt;&#10;    --&gt;&#10;    &#10;    &lt;!-- Uncomment and add actual changelog files as needed --&gt;&#10;    &lt;!-- &lt;include file=&quot;db/changelog/001-initial-schema.xml&quot;/&gt; --&gt;&#10;    &#10;&lt;/databaseChangeLog&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;!-- Admin Service Database Changes --&gt;&#10;    &lt;!-- &#10;        This is the master changelog file for admin-service.&#10;        Add individual changelog files below as your database schema evolves.&#10;        &#10;        Example structure:&#10;        &lt;include file=&quot;db/changelog/001-create-admin-tables.xml&quot;/&gt;&#10;        &lt;include file=&quot;db/changelog/002-add-audit-columns.xml&quot;/&gt;&#10;        &lt;include file=&quot;db/changelog/003-create-indexes.xml&quot;/&gt;&#10;    --&gt;&#10;    &#10;    &lt;!-- Uncomment and add actual changelog files as needed --&gt;&#10;    &lt;include file=&quot;db/changelog/001-initial-schema.xml&quot;/&gt;&#10;    &#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appointment-service/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appointment-service/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;appointment-service&lt;/artifactId&gt;&#10;    &lt;name&gt;appointment-service&lt;/name&gt;&#10;    &lt;description&gt;Appointment management microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;        &lt;dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;appointment-service&lt;/artifactId&gt;&#10;    &lt;name&gt;appointment-service&lt;/name&gt;&#10;    &lt;description&gt;Appointment management microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/AppointmentServiceApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/AppointmentServiceApplication.java" />
              <option name="originalContent" value="package com.docmate.appointment;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;import org.springframework.scheduling.annotation.EnableScheduling;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EnableScheduling&#10;@EntityScan(basePackages = {&quot;com.docmate.appointment.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.appointment.repository&quot;})&#10;public class AppointmentServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(AppointmentServiceApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.appointment;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;import org.springframework.scheduling.annotation.EnableScheduling;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EnableScheduling&#10;@EntityScan(basePackages = {&quot;com.docmate.common.entity&quot;, &quot;com.docmate.appointment.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.appointment.repository&quot;})&#10;public class AppointmentServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(AppointmentServiceApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/config/JpaConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/config/JpaConfig.java" />
              <option name="updatedContent" value="package com.docmate.appointment.config;&#10;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;&#10;@Configuration&#10;@EntityScan(basePackages = {&#10;    &quot;com.docmate.appointment.entity&quot;,&#10;    &quot;com.docmate.common.entity&quot;&#10;}, excludeFilters = @EntityScan.Filter(&#10;    pattern = &quot;com.docmate.common.entity.Appointment&quot;&#10;))&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.appointment.repository&quot;})&#10;public class JpaConfig {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/controller/AppointmentController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/controller/AppointmentController.java" />
              <option name="originalContent" value="package com.docmate.appointment.controller;&#10;&#10;import com.docmate.appointment.dto.AppointmentDto;&#10;import com.docmate.appointment.dto.CreateAppointmentRequest;&#10;import com.docmate.appointment.service.AppointmentService;&#10;import com.docmate.common.dto.response.ApiResponse;&#10;import com.docmate.common.dto.response.PageResponse;&#10;import com.docmate.common.entity.User;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.security.SecurityRequirement;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/appointments&quot;)&#10;@RequiredArgsConstructor&#10;@Tag(name = &quot;Appointment Management&quot;, description = &quot;Appointment booking and management APIs&quot;)&#10;@SecurityRequirement(name = &quot;bearerAuth&quot;)&#10;public class AppointmentController {&#10;&#10;    private final AppointmentService appointmentService;&#10;&#10;    @PostMapping&#10;    @Operation(summary = &quot;Book appointment&quot;, description = &quot;Book a new appointment with a doctor&quot;)&#10;    @PreAuthorize(&quot;hasRole('PATIENT')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AppointmentDto&gt;&gt; bookAppointment(&#10;            @Valid @RequestBody CreateAppointmentRequest request,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        AppointmentDto appointment = appointmentService.createAppointment(request, currentUser.getId());&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PageResponse&lt;AppointmentDto&gt;&gt;&gt; getMyDoctorAppointments(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;AppointmentDto&gt; appointments = appointmentService.getDoctorAppointments(currentUser.getId(), pageable);&#10;        PageResponse&lt;AppointmentDto&gt; pageResponse = PageResponse.of(&#10;                appointments.getContent(),&#10;                appointments.getNumber(),&#10;                appointments.getSize(),&#10;                appointments.getTotalElements()&#10;        );&#10;        return ResponseEntity.ok(ApiResponse.success(pageResponse));&#10;    }&#10;&#10;    @GetMapping(&quot;/upcoming&quot;)&#10;    @Operation(summary = &quot;Get upcoming appointments&quot;, description = &quot;Get upcoming appointments for current user&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;List&lt;AppointmentDto&gt;&gt;&gt; getUpcomingAppointments(&#10;            @AuthenticationPrincipal User currentUser) {&#10;        boolean isDoctor = currentUser.getRole().name().equals(&quot;DOCTOR&quot;);&#10;        List&lt;AppointmentDto&gt; appointments = appointmentService.getUpcomingAppointments(currentUser.getId(), isDoctor);&#10;        return ResponseEntity.ok(ApiResponse.success(appointments));&#10;    }&#10;&#10;    @PutMapping(&quot;/{appointmentId}/confirm&quot;)&#10;    @Operation(summary = &quot;Confirm appointment&quot;, description = &quot;Confirm appointment (Doctor only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AppointmentDto&gt;&gt; confirmAppointment(@PathVariable UUID appointmentId) {&#10;        AppointmentDto appointment = appointmentService.confirmAppointment(appointmentId);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Appointment confirmed successfully&quot;, appointment));&#10;    }&#10;&#10;    @PutMapping(&quot;/{appointmentId}/cancel&quot;)&#10;    @Operation(summary = &quot;Cancel appointment&quot;, description = &quot;Cancel appointment&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AppointmentDto&gt;&gt; cancelAppointment(&#10;            @PathVariable UUID appointmentId,&#10;            @RequestParam String reason,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        AppointmentDto appointment = appointmentService.cancelAppointment(appointmentId, reason, currentUser.getId());&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Appointment cancelled successfully&quot;, appointment));&#10;    }&#10;&#10;    @PutMapping(&quot;/{appointmentId}/complete&quot;)&#10;    @Operation(summary = &quot;Complete appointment&quot;, description = &quot;Mark appointment as completed (Doctor only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AppointmentDto&gt;&gt; completeAppointment(&#10;            @PathVariable UUID appointmentId,&#10;            @RequestParam(required = false) String notes) {&#10;        AppointmentDto appointment = appointmentService.completeAppointment(appointmentId, notes);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Appointment completed successfully&quot;, appointment));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.appointment.controller;&#10;&#10;import com.docmate.appointment.dto.AppointmentDto;&#10;import com.docmate.appointment.dto.CreateAppointmentRequest;&#10;import com.docmate.appointment.service.AppointmentService;&#10;import com.docmate.common.dto.response.ApiResponse;&#10;import com.docmate.common.dto.response.PageResponse;&#10;import com.docmate.common.entity.User;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.security.SecurityRequirement;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/appointments&quot;)&#10;@RequiredArgsConstructor&#10;@Tag(name = &quot;Appointment Management&quot;, description = &quot;Appointment booking and management APIs&quot;)&#10;@SecurityRequirement(name = &quot;bearerAuth&quot;)&#10;public class AppointmentController {&#10;&#10;    private final AppointmentService appointmentService;&#10;&#10;    @PostMapping&#10;    @Operation(summary = &quot;Book appointment&quot;, description = &quot;Book a new appointment with a doctor&quot;)&#10;    @PreAuthorize(&quot;hasRole('PATIENT')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AppointmentDto&gt;&gt; bookAppointment(&#10;            @Valid @RequestBody CreateAppointmentRequest request,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        // Set the patient ID from the authenticated user&#10;        request.setPatientId(currentUser.getId());&#10;        AppointmentDto appointment = appointmentService.createAppointment(request);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Appointment booked successfully&quot;, appointment));&#10;    }&#10;&#10;    @GetMapping(&quot;/{appointmentId}&quot;)&#10;    @Operation(summary = &quot;Get appointment details&quot;, description = &quot;Get appointment details by ID&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AppointmentDto&gt;&gt; getAppointment(@PathVariable UUID appointmentId) {&#10;        AppointmentDto appointment = appointmentService.getAppointment(appointmentId);&#10;        return ResponseEntity.ok(ApiResponse.success(appointment));&#10;    }&#10;&#10;    @GetMapping(&quot;/patient/my&quot;)&#10;    @Operation(summary = &quot;Get patient appointments&quot;, description = &quot;Get current patient's appointments&quot;)&#10;    @PreAuthorize(&quot;hasRole('PATIENT')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PageResponse&lt;AppointmentDto&gt;&gt;&gt; getMyAppointments(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;AppointmentDto&gt; appointments = appointmentService.getPatientAppointments(currentUser.getId(), pageable);&#10;        PageResponse&lt;AppointmentDto&gt; pageResponse = PageResponse.of(&#10;                appointments.getContent(),&#10;                appointments.getNumber(),&#10;                appointments.getSize(),&#10;                appointments.getTotalElements()&#10;        );&#10;        return ResponseEntity.ok(ApiResponse.success(pageResponse));&#10;    }&#10;&#10;    @GetMapping(&quot;/doctor/my&quot;)&#10;    @Operation(summary = &quot;Get doctor appointments&quot;, description = &quot;Get current doctor's appointments&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PageResponse&lt;AppointmentDto&gt;&gt;&gt; getMyDoctorAppointments(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;AppointmentDto&gt; appointments = appointmentService.getDoctorAppointments(currentUser.getId(), pageable);&#10;        PageResponse&lt;AppointmentDto&gt; pageResponse = PageResponse.of(&#10;                appointments.getContent(),&#10;                appointments.getNumber(),&#10;                appointments.getSize(),&#10;                appointments.getTotalElements()&#10;        );&#10;        return ResponseEntity.ok(ApiResponse.success(pageResponse));&#10;    }&#10;&#10;    @GetMapping(&quot;/upcoming&quot;)&#10;    @Operation(summary = &quot;Get upcoming appointments&quot;, description = &quot;Get upcoming appointments for current user&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;List&lt;AppointmentDto&gt;&gt;&gt; getUpcomingAppointments(&#10;            @AuthenticationPrincipal User currentUser) {&#10;        boolean isDoctor = currentUser.getRole().name().equals(&quot;DOCTOR&quot;);&#10;        List&lt;AppointmentDto&gt; appointments = appointmentService.getUpcomingAppointments(currentUser.getId(), isDoctor);&#10;        return ResponseEntity.ok(ApiResponse.success(appointments));&#10;    }&#10;&#10;    @PutMapping(&quot;/{appointmentId}/confirm&quot;)&#10;    @Operation(summary = &quot;Confirm appointment&quot;, description = &quot;Confirm appointment (Doctor only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AppointmentDto&gt;&gt; confirmAppointment(@PathVariable UUID appointmentId) {&#10;        AppointmentDto appointment = appointmentService.confirmAppointment(appointmentId);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Appointment confirmed successfully&quot;, appointment));&#10;    }&#10;&#10;    @PutMapping(&quot;/{appointmentId}/cancel&quot;)&#10;    @Operation(summary = &quot;Cancel appointment&quot;, description = &quot;Cancel appointment&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AppointmentDto&gt;&gt; cancelAppointment(&#10;            @PathVariable UUID appointmentId,&#10;            @RequestParam String reason,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        AppointmentDto appointment = appointmentService.cancelAppointment(appointmentId, reason, currentUser.getId());&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Appointment cancelled successfully&quot;, appointment));&#10;    }&#10;&#10;    @PutMapping(&quot;/{appointmentId}/complete&quot;)&#10;    @Operation(summary = &quot;Complete appointment&quot;, description = &quot;Mark appointment as completed (Doctor only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AppointmentDto&gt;&gt; completeAppointment(&#10;            @PathVariable UUID appointmentId,&#10;            @RequestParam(required = false) String notes) {&#10;        AppointmentDto appointment = appointmentService.completeAppointment(appointmentId, notes);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Appointment completed successfully&quot;, appointment));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/dto/CreateAppointmentRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/dto/CreateAppointmentRequest.java" />
              <option name="originalContent" value="package com.docmate.appointment.dto;&#10;&#10;import com.docmate.common.enums.ConsultationMode;&#10;import jakarta.validation.constraints.Future;&#10;import jakarta.validation.constraints.NotNull;&#10;" />
              <option name="updatedContent" value="package com.docmate.appointment.dto;&#10;&#10;import com.docmate.common.enums.ConsultationMode;&#10;import jakarta.validation.constraints.Future;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Positive;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class CreateAppointmentRequest {&#10;    &#10;    @NotNull(message = &quot;Doctor ID is required&quot;)&#10;    private UUID doctorId;&#10;    &#10;    @NotNull(message = &quot;Patient ID is required&quot;)&#10;    private UUID patientId;&#10;    &#10;    @NotNull(message = &quot;Appointment date and time is required&quot;)&#10;    @Future(message = &quot;Appointment must be scheduled for a future date and time&quot;)&#10;    private LocalDateTime appointmentDateTime;&#10;    &#10;    @NotNull(message = &quot;Consultation mode is required&quot;)&#10;    private ConsultationMode consultationMode;&#10;    &#10;    @Positive(message = &quot;Duration must be positive&quot;)&#10;    @Builder.Default&#10;    private Integer durationMinutes = 30;&#10;    &#10;    @Positive(message = &quot;Consultation fee must be positive&quot;)&#10;    private BigDecimal consultationFee;&#10;    &#10;    private String reasonForVisit;&#10;    &#10;    private String symptoms;&#10;    &#10;    private String notes;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/mapper/AppointmentMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/mapper/AppointmentMapper.java" />
              <option name="originalContent" value="package com.docmate.appointment.mapper;&#10;&#10;import com.docmate.appointment.dto.AppointmentDto;&#10;import com.docmate.appointment.entity.Appointment;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.MappingConstants;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;public interface AppointmentMapper {&#10;&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;doctor.id&quot;)&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;patient.id&quot;)&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;doctor.id&quot;)&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;patient.id&quot;)&#10;    @Mapping(target = &quot;doctor&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;patient&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;doctor&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;patient&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;doctor.id&quot;)&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;patient.id&quot;)&#10;    @Mapping(target = &quot;doctor&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;patient&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;doctor.id&quot;)&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;patient.id&quot;)&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;doctor.id&quot;)&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;patient.id&quot;)&#10;    @Mapping(target = &quot;doctor&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;patient&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;doctor.id&quot;)&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;patient.id&quot;)&#10;    @Mapping(target = &quot;doctor&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;patient&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;doctor.id&quot;)&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;patient.id&quot;)&#10;    @Mapping(target = &quot;doctor&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;patient&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;doctor.id&quot;)&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;patient.id&quot;)&#10;    @Mapping(target = &quot;doctor&quot;, ignore = true) // Will be populated by service layer&#10;    @Mapping(target = &quot;patient&quot;, ignore = true) // Will be populated by service layer&#10;    @Mapping(target = &quot;doctor&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;patient&quot;, ignore = true) // Will be set by service layer&#10;    AppointmentDto toDto(Appointment appointment);&#10;&#10;    @Mapping(target = &quot;doctor&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;patient&quot;, ignore = true) // Will be set by service layer&#10;    Appointment toEntity(AppointmentDto appointmentDto);&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.appointment.mapper;&#10;&#10;import com.docmate.appointment.dto.AppointmentDto;&#10;import com.docmate.appointment.entity.Appointment;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.MappingConstants;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;public interface AppointmentMapper {&#10;&#10;    @Mapping(target = &quot;doctor&quot;, ignore = true) // Will be populated by service layer&#10;    @Mapping(target = &quot;patient&quot;, ignore = true) // Will be populated by service layer&#10;    AppointmentDto toDto(Appointment appointment);&#10;&#10;    Appointment toEntity(AppointmentDto appointmentDto);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/repository/AppointmentRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/repository/AppointmentRepository.java" />
              <option name="updatedContent" value="package com.docmate.appointment.repository;&#10;&#10;import com.docmate.appointment.entity.Appointment;&#10;import com.docmate.common.enums.AppointmentStatus;&#10;import com.docmate.common.enums.ConsultationMode;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface AppointmentRepository extends JpaRepository&lt;Appointment, UUID&gt; {&#10;&#10;    // Find appointments by patient with ordering&#10;    Page&lt;Appointment&gt; findByPatientIdOrderByAppointmentDateTimeDesc(UUID patientId, Pageable pageable);&#10;&#10;    // Find appointments by doctor with ordering&#10;    Page&lt;Appointment&gt; findByDoctorIdOrderByAppointmentDateTimeDesc(UUID doctorId, Pageable pageable);&#10;&#10;    // Find appointments by status with ordering&#10;    List&lt;Appointment&gt; findByStatusOrderByAppointmentDateTime(AppointmentStatus status);&#10;    Page&lt;Appointment&gt; findByStatusOrderByAppointmentDateTime(AppointmentStatus status, Pageable pageable);&#10;&#10;    // Find upcoming appointments for doctor&#10;    List&lt;Appointment&gt; findByDoctorIdAndAppointmentDateTimeAfterOrderByAppointmentDateTime(UUID doctorId, LocalDateTime dateTime);&#10;&#10;    // Find upcoming appointments for patient&#10;    List&lt;Appointment&gt; findByPatientIdAndAppointmentDateTimeAfterOrderByAppointmentDateTime(UUID patientId, LocalDateTime dateTime);&#10;&#10;    // Find appointments by date range for doctor&#10;    List&lt;Appointment&gt; findByDoctorIdAndAppointmentDateTimeBetweenOrderByAppointmentDateTime(&#10;        UUID doctorId, LocalDateTime startTime, LocalDateTime endTime);&#10;&#10;    // Find appointments by date range for patient&#10;    List&lt;Appointment&gt; findByPatientIdAndAppointmentDateTimeBetweenOrderByAppointmentDateTime(&#10;        UUID patientId, LocalDateTime startTime, LocalDateTime endTime);&#10;&#10;    // Find conflicting appointments for scheduling validation&#10;    @Query(&quot;SELECT a FROM Appointment a WHERE a.doctorId = :doctorId &quot; +&#10;           &quot;AND a.status NOT IN ('CANCELLED', 'COMPLETED') &quot; +&#10;           &quot;AND ((a.appointmentDateTime &lt;= :startTime AND :startTime &lt; DATE_ADD(a.appointmentDateTime, INTERVAL a.durationMinutes MINUTE)) &quot; +&#10;           &quot;OR (:startTime &lt;= a.appointmentDateTime AND a.appointmentDateTime &lt; :endTime))&quot;)&#10;    List&lt;Appointment&gt; findConflictingAppointments(@Param(&quot;doctorId&quot;) UUID doctorId,&#10;                                                 @Param(&quot;startTime&quot;) LocalDateTime startTime,&#10;                                                 @Param(&quot;endTime&quot;) LocalDateTime endTime);&#10;&#10;    // Find appointments by consultation mode&#10;    Page&lt;Appointment&gt; findByConsultationModeOrderByAppointmentDateTime(ConsultationMode consultationMode, Pageable pageable);&#10;&#10;    // Find appointments for today for a doctor&#10;    @Query(&quot;SELECT a FROM Appointment a WHERE a.doctorId = :doctorId &quot; +&#10;           &quot;AND DATE(a.appointmentDateTime) = CURRENT_DATE &quot; +&#10;           &quot;ORDER BY a.appointmentDateTime&quot;)&#10;    List&lt;Appointment&gt; findTodaysAppointmentsByDoctor(@Param(&quot;doctorId&quot;) UUID doctorId);&#10;&#10;    // Count appointments by status&#10;    long countByStatus(AppointmentStatus status);&#10;&#10;    // Count appointments by doctor&#10;    long countByDoctorId(UUID doctorId);&#10;&#10;    // Count appointments by patient&#10;    long countByPatientId(UUID patientId);&#10;&#10;    // Find appointments by multiple statuses&#10;    @Query(&quot;SELECT a FROM Appointment a WHERE a.status IN :statuses ORDER BY a.appointmentDateTime&quot;)&#10;    List&lt;Appointment&gt; findByStatusIn(@Param(&quot;statuses&quot;) List&lt;AppointmentStatus&gt; statuses);&#10;&#10;    // Find appointments that need follow-up&#10;    @Query(&quot;SELECT a FROM Appointment a WHERE a.followUpRequired = true AND a.followUpDate IS NOT NULL &quot; +&#10;           &quot;AND a.followUpDate &lt;= :date ORDER BY a.followUpDate&quot;)&#10;    List&lt;Appointment&gt; findAppointmentsNeedingFollowUp(@Param(&quot;date&quot;) LocalDateTime date);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/service/AvailabilityService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appointment-service/src/main/java/com/docmate/appointment/service/AvailabilityService.java" />
              <option name="updatedContent" value="package com.docmate.appointment.service;&#10;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;@Slf4j&#10;public class AvailabilityService {&#10;&#10;    // This would typically call the availability-service microservice&#10;    // For now, implementing a simple availability check&#10;    public boolean isDoctorAvailable(UUID doctorId, LocalDateTime appointmentDateTime, Integer durationMinutes) {&#10;        if (doctorId == null || appointmentDateTime == null || durationMinutes == null) {&#10;            return false;&#10;        }&#10;        &#10;        // TODO: Implement actual availability check by calling availability-service&#10;        // For now, assume doctors are available during business hours (9 AM - 5 PM)&#10;        int hour = appointmentDateTime.getHour();&#10;        boolean isBusinessHours = hour &gt;= 9 &amp;&amp; hour &lt; 17;&#10;        &#10;        log.debug(&quot;Checking availability for doctor {} at {}: {}&quot;, doctorId, appointmentDateTime, isBusinessHours);&#10;        return isBusinessHours;&#10;    }&#10;    &#10;    public boolean isTimeSlotAvailable(UUID doctorId, LocalDateTime startTime, LocalDateTime endTime) {&#10;        // TODO: Implement actual time slot availability check&#10;        return isDoctorAvailable(doctorId, startTime, 30);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appointment-service/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appointment-service/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: appointment-service&#10;  &#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;  &#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;  &#10;  liquibase:&#10;    change-log: classpath:db/changelog/db.changelog-master.xml&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;&#10;server:&#10;  port: ${PORT:8083}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc&#10;" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: appointment-service&#10;  &#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;  &#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;  &#10;  liquibase:&#10;    enabled: false  # Disabled - using centralized db-migration service&#10;&#10;server:&#10;  port: ${PORT:8083}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appointment-service/src/main/resources/db/changelog/001-initial-schema.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appointment-service/src/main/resources/db/changelog/001-initial-schema.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-appointments-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;appointments&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;patient_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_date_time&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;SCHEDULED&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;consultation_mode&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;duration_minutes&quot; type=&quot;INTEGER&quot; defaultValueNumeric=&quot;30&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;consultation_fee&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;reason_for_visit&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;symptoms&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;notes&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;meeting_link&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-appointment-slots-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;appointment_slots&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;start_time&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;end_time&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;is_available&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;slot_type&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;REGULAR&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;003-create-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_patient_id&quot;&gt;&#10;            &lt;column name=&quot;patient_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_date_time&quot;&gt;&#10;            &lt;column name=&quot;appointment_date_time&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_status&quot;&gt;&#10;            &lt;column name=&quot;status&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;appointment_slots&quot; indexName=&quot;idx_slots_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;appointment_slots&quot; indexName=&quot;idx_slots_start_time&quot;&gt;&#10;            &lt;column name=&quot;start_time&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/appointment-service/src/main/resources/db/changelog/db.changelog-master.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/appointment-service/src/main/resources/db/changelog/db.changelog-master.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;!-- Appointment Service Database Changes --&gt;&#10;    &lt;!-- Include changelog files as needed --&gt;&#10;    &lt;!-- Example: &lt;include file=&quot;db/changelog/001-create-appointments-table.xml&quot;/&gt; --&gt;&#10;&#10;&lt;/databaseChangeLog&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;!-- Appointment Service Database Changes --&gt;&#10;    &lt;!-- Include changelog files as needed --&gt;&#10;    &lt;include file=&quot;db/changelog/001-initial-schema.xml&quot;/&gt;&#10;    &#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth-service/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth-service/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;auth-service&lt;/artifactId&gt;&#10;    &lt;name&gt;auth-service&lt;/name&gt;&#10;    &lt;description&gt;Authentication microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- JWT --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;                &lt;artifactId&gt;flyway-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;auth-service&lt;/artifactId&gt;&#10;    &lt;name&gt;auth-service&lt;/name&gt;&#10;    &lt;description&gt;Authentication microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- JWT --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;                &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/AuthServiceApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/AuthServiceApplication.java" />
              <option name="originalContent" value="package com.docmate.auth;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EntityScan(basePackages = {&quot;com.docmate.common.entity&quot;, &quot;com.docmate.auth.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.auth.repository&quot;})&#10;public class AuthServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(AuthServiceApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.auth;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.context.annotation.ComponentScan;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EntityScan(basePackages = {&quot;com.docmate.common.entity&quot;, &quot;com.docmate.auth.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.auth.repository&quot;})&#10;@ComponentScan(basePackages = {&quot;com.docmate.auth&quot;, &quot;com.docmate.common&quot;})&#10;public class AuthServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(AuthServiceApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/config/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/config/SecurityConfig.java" />
              <option name="updatedContent" value="package com.docmate.auth.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.web.cors.CorsConfiguration;&#10;import org.springframework.web.cors.CorsConfigurationSource;&#10;import org.springframework.web.cors.UrlBasedCorsConfigurationSource;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class SecurityConfig {&#10;    &#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;    &#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http.cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))&#10;            .csrf(csrf -&gt; csrf.disable())&#10;            .sessionManagement(session -&gt; session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))&#10;            .authorizeHttpRequests(auth -&gt; auth&#10;                .requestMatchers(&quot;/api/auth/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/actuator/**&quot;).permitAll()&#10;                .requestMatchers(&quot;/swagger-ui/**&quot;, &quot;/v3/api-docs/**&quot;).permitAll()&#10;                .anyRequest().authenticated()&#10;            );&#10;        &#10;        return http.build();&#10;    }&#10;    &#10;    @Bean&#10;    public CorsConfigurationSource corsConfigurationSource() {&#10;        CorsConfiguration configuration = new CorsConfiguration();&#10;        configuration.setAllowedOriginPatterns(List.of(&quot;*&quot;));&#10;        configuration.setAllowedMethods(Arrays.asList(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;));&#10;        configuration.setAllowedHeaders(List.of(&quot;*&quot;));&#10;        configuration.setAllowCredentials(true);&#10;        &#10;        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();&#10;        source.registerCorsConfiguration(&quot;/**&quot;, configuration);&#10;        return source;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/controller/AuthController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/controller/AuthController.java" />
              <option name="updatedContent" value="package com.docmate.auth.controller;&#10;&#10;import com.docmate.auth.service.AuthService;&#10;import com.docmate.common.dto.auth.AuthResponse;&#10;import com.docmate.common.dto.auth.LoginRequest;&#10;import com.docmate.common.dto.auth.RegisterRequest;&#10;import com.docmate.common.dto.auth.ForgotPasswordRequest;&#10;import com.docmate.common.dto.auth.ResetPasswordRequest;&#10;import com.docmate.common.dto.auth.RefreshTokenRequest;&#10;import com.docmate.common.dto.RegisterPatientRequest;&#10;import com.docmate.common.dto.RegisterDoctorRequest;&#10;import com.docmate.common.dto.UserProfileResponse;&#10;import com.docmate.common.dto.response.ApiResponse;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/auth&quot;)&#10;@RequiredArgsConstructor&#10;@Tag(name = &quot;Authentication&quot;, description = &quot;Authentication management APIs&quot;)&#10;public class AuthController {&#10;    &#10;    private final AuthService authService;&#10;    &#10;    @PostMapping(&quot;/login&quot;)&#10;    @Operation(summary = &quot;User login&quot;, description = &quot;Authenticate user and return JWT tokens&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AuthResponse&gt;&gt; login(@Valid @RequestBody LoginRequest request) {&#10;        AuthResponse response = authService.login(request);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Login successful&quot;, response));&#10;    }&#10;    &#10;    @PostMapping(&quot;/register/patient&quot;)&#10;    @Operation(summary = &quot;Patient registration&quot;, description = &quot;Register new patient and return JWT tokens&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AuthResponse&gt;&gt; registerPatient(@Valid @RequestBody RegisterPatientRequest request) {&#10;        AuthResponse response = authService.registerPatient(request);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Patient registration successful&quot;, response));&#10;    }&#10;    &#10;    @PostMapping(&quot;/register/doctor&quot;)&#10;    @Operation(summary = &quot;Doctor registration&quot;, description = &quot;Register new doctor and return JWT tokens&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AuthResponse&gt;&gt; registerDoctor(@Valid @RequestBody RegisterDoctorRequest request) {&#10;        AuthResponse response = authService.registerDoctor(request);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Doctor registration successful&quot;, response));&#10;    }&#10;    &#10;    @PostMapping(&quot;/register&quot;)&#10;    @Operation(summary = &quot;General user registration&quot;, description = &quot;Register new user and return JWT tokens&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AuthResponse&gt;&gt; register(@Valid @RequestBody RegisterRequest request) {&#10;        AuthResponse response = authService.register(request);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Registration successful&quot;, response));&#10;    }&#10;    &#10;    @GetMapping(&quot;/me&quot;)&#10;    @Operation(summary = &quot;Get current user&quot;, description = &quot;Get current authenticated user profile&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;UserProfileResponse&gt;&gt; getCurrentUser(Authentication authentication) {&#10;        UserProfileResponse response = authService.getCurrentUser(authentication.getName());&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;User profile retrieved&quot;, response));&#10;    }&#10;    &#10;    @PostMapping(&quot;/refresh&quot;)&#10;    @Operation(summary = &quot;Refresh token&quot;, description = &quot;Refresh access token using refresh token&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;AuthResponse&gt;&gt; refreshToken(@Valid @RequestBody RefreshTokenRequest request) {&#10;        AuthResponse response = authService.refreshToken(request.getRefreshToken());&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Token refreshed successfully&quot;, response));&#10;    }&#10;    &#10;    @PostMapping(&quot;/forgot-password&quot;)&#10;    @Operation(summary = &quot;Forgot password&quot;, description = &quot;Send password reset email to user&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Void&gt;&gt; forgotPassword(@Valid @RequestBody ForgotPasswordRequest request) {&#10;        authService.forgotPassword(request);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Password reset email sent&quot;, null));&#10;    }&#10;    &#10;    @PostMapping(&quot;/reset-password&quot;)&#10;    @Operation(summary = &quot;Reset password&quot;, description = &quot;Reset user password using reset token&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Void&gt;&gt; resetPassword(@Valid @RequestBody ResetPasswordRequest request) {&#10;        authService.resetPassword(request);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Password reset successful&quot;, null));&#10;    }&#10;    &#10;    @PostMapping(&quot;/logout&quot;)&#10;    @Operation(summary = &quot;User logout&quot;, description = &quot;Logout user and invalidate tokens&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; logout(@RequestHeader(&quot;Authorization&quot;) String authorization) {&#10;        String token = authorization.replace(&quot;Bearer &quot;, &quot;&quot;);&#10;        authService.logout(token);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Logout successful&quot;, &quot;User logged out successfully&quot;));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/repository/UserRepository.java" />
              <option name="updatedContent" value="package com.docmate.auth.repository;&#10;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.enums.UserRole;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, UUID&gt; {&#10;    &#10;    Optional&lt;User&gt; findByEmail(String email);&#10;    &#10;    Optional&lt;User&gt; findByEmailAndIsActiveTrue(String email);&#10;    &#10;    boolean existsByEmail(String email);&#10;    &#10;    boolean existsByPhone(String phone);&#10;    &#10;    @Query(&quot;SELECT u FROM User u WHERE u.email = :email AND u.role = :role AND u.isActive = true&quot;)&#10;    Optional&lt;User&gt; findByEmailAndRole(@Param(&quot;email&quot;) String email, @Param(&quot;role&quot;) UserRole role);&#10;    &#10;    @Query(&quot;SELECT COUNT(u) FROM User u WHERE u.role = :role AND u.isActive = true&quot;)&#10;    long countByRole(@Param(&quot;role&quot;) UserRole role);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/service/AuthService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/service/AuthService.java" />
              <option name="originalContent" value="package com.docmate.auth.service;&#10;&#10;import com.docmate.auth.repository.UserRepository;&#10;import com.docmate.common.dto.auth.AuthResponse;&#10;import com.docmate.common.dto.auth.LoginRequest;&#10;import com.docmate.common.dto.auth.RegisterRequest;&#10;" />
              <option name="updatedContent" value="package com.docmate.auth.service;&#10;&#10;import com.docmate.auth.repository.UserRepository;&#10;import com.docmate.common.dto.auth.AuthResponse;&#10;import com.docmate.common.dto.auth.LoginRequest;&#10;import com.docmate.common.dto.auth.RegisterRequest;&#10;import com.docmate.common.dto.auth.ForgotPasswordRequest;&#10;import com.docmate.common.dto.auth.ResetPasswordRequest;&#10;import com.docmate.common.dto.RegisterPatientRequest;&#10;import com.docmate.common.dto.RegisterDoctorRequest;&#10;import com.docmate.common.dto.UserProfileResponse;&#10;import com.docmate.common.dto.user.UserDto;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.entity.Patient;&#10;import com.docmate.common.entity.Doctor;&#10;import com.docmate.common.enums.UserRole;&#10;import com.docmate.common.enums.Gender;&#10;import com.docmate.common.exception.BusinessException;&#10;import com.docmate.common.util.JwtUtil;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDate;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor&#10;@Transactional&#10;public class AuthService {&#10;    &#10;    private final UserRepository userRepository;&#10;    private final PasswordEncoder passwordEncoder;&#10;    private final JwtUtil jwtUtil;&#10;    private final UserMappingService userMappingService;&#10;    &#10;    public AuthResponse login(LoginRequest request) {&#10;        log.info(&quot;Attempting login for email: {}&quot;, request.getEmail());&#10;        &#10;        User user = userRepository.findByEmailAndIsActiveTrue(request.getEmail())&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;INVALID_CREDENTIALS&quot;, &quot;Invalid email or password&quot;, 401));&#10;        &#10;        if (!passwordEncoder.matches(request.getPassword(), user.getPasswordHash())) {&#10;            throw new BusinessException(&quot;INVALID_CREDENTIALS&quot;, &quot;Invalid email or password&quot;, 401);&#10;        }&#10;        &#10;        String accessToken = jwtUtil.generateToken(user.getEmail(), user.getId(), user.getRole().name());&#10;        String refreshToken = jwtUtil.generateRefreshToken(user.getEmail(), user.getId());&#10;        &#10;        UserDto userDto = userMappingService.toDto(user);&#10;        &#10;        log.info(&quot;Login successful for user: {}&quot;, user.getEmail());&#10;        &#10;        return AuthResponse.builder()&#10;                .accessToken(accessToken)&#10;                .refreshToken(refreshToken)&#10;                .tokenType(&quot;Bearer&quot;)&#10;                .expiresIn(86400L) // 24 hours&#10;                .user(userDto)&#10;                .build();&#10;    }&#10;    &#10;    public AuthResponse register(RegisterRequest request) {&#10;        log.info(&quot;Attempting registration for email: {}&quot;, request.getEmail());&#10;        &#10;        if (userRepository.existsByEmail(request.getEmail())) {&#10;            throw new BusinessException(&quot;EMAIL_ALREADY_EXISTS&quot;, &quot;Email is already registered&quot;, 409);&#10;        }&#10;        &#10;        if (request.getPhone() != null &amp;&amp; userRepository.existsByPhone(request.getPhone())) {&#10;            throw new BusinessException(&quot;PHONE_ALREADY_EXISTS&quot;, &quot;Phone number is already registered&quot;, 409);&#10;        }&#10;        &#10;        User user = User.builder()&#10;                .fullName(request.getFullName())&#10;                .email(request.getEmail())&#10;                .phone(request.getPhone())&#10;                .passwordHash(passwordEncoder.encode(request.getPassword()))&#10;                .role(request.getRole())&#10;                .isActive(true)&#10;                .emailVerified(false)&#10;                .phoneVerified(false)&#10;                .build();&#10;        &#10;        user = userRepository.save(user);&#10;        &#10;        String accessToken = jwtUtil.generateToken(user.getEmail(), user.getId(), user.getRole().name());&#10;        String refreshToken = jwtUtil.generateRefreshToken(user.getEmail(), user.getId());&#10;        &#10;        UserDto userDto = userMappingService.toDto(user);&#10;        &#10;        log.info(&quot;Registration successful for user: {}&quot;, user.getEmail());&#10;        &#10;        return AuthResponse.builder()&#10;                .accessToken(accessToken)&#10;                .refreshToken(refreshToken)&#10;                .tokenType(&quot;Bearer&quot;)&#10;                .expiresIn(86400L)&#10;                .user(userDto)&#10;                .build();&#10;    }&#10;    &#10;    public AuthResponse refreshToken(String refreshToken) {&#10;        try {&#10;            String email = jwtUtil.getEmailFromToken(refreshToken);&#10;            UUID userId = jwtUtil.getUserIdFromToken(refreshToken);&#10;            &#10;            User user = userRepository.findByEmailAndIsActiveTrue(email)&#10;                    .orElseThrow(() -&gt; new BusinessException(&quot;USER_NOT_FOUND&quot;, &quot;User not found&quot;, 404));&#10;            &#10;            if (!jwtUtil.validateToken(refreshToken, email)) {&#10;                throw new BusinessException(&quot;INVALID_TOKEN&quot;, &quot;Invalid refresh token&quot;, 401);&#10;            }&#10;            &#10;            String newAccessToken = jwtUtil.generateToken(user.getEmail(), user.getId(), user.getRole().name());&#10;            String newRefreshToken = jwtUtil.generateRefreshToken(user.getEmail(), user.getId());&#10;            &#10;            UserDto userDto = userMappingService.toDto(user);&#10;            &#10;            return AuthResponse.builder()&#10;                    .accessToken(newAccessToken)&#10;                    .refreshToken(newRefreshToken)&#10;                    .tokenType(&quot;Bearer&quot;)&#10;                    .expiresIn(86400L)&#10;                    .user(userDto)&#10;                    .build();&#10;                    &#10;        } catch (Exception e) {&#10;            log.error(&quot;Error refreshing token: {}&quot;, e.getMessage());&#10;            throw new BusinessException(&quot;INVALID_TOKEN&quot;, &quot;Invalid refresh token&quot;, 401);&#10;        }&#10;    }&#10;    &#10;    public void logout(String accessToken) {&#10;        // In a production environment, you would add the token to a blacklist&#10;        // For now, we'll just log the logout&#10;        try {&#10;            String email = jwtUtil.getEmailFromToken(accessToken);&#10;            log.info(&quot;User logged out: {}&quot;, email);&#10;        } catch (Exception e) {&#10;            log.warn(&quot;Invalid token during logout: {}&quot;, e.getMessage());&#10;        }&#10;    }&#10;    &#10;    public AuthResponse registerPatient(RegisterPatientRequest request) {&#10;        log.info(&quot;Attempting patient registration for email: {}&quot;, request.getEmail());&#10;        &#10;        if (userRepository.existsByEmail(request.getEmail())) {&#10;            throw new BusinessException(&quot;EMAIL_ALREADY_EXISTS&quot;, &quot;Email is already registered&quot;, 409);&#10;        }&#10;        &#10;        if (request.getPhone() != null &amp;&amp; userRepository.existsByPhone(request.getPhone())) {&#10;            throw new BusinessException(&quot;PHONE_ALREADY_EXISTS&quot;, &quot;Phone number is already registered&quot;, 409);&#10;        }&#10;        &#10;        User user = User.builder()&#10;                .fullName(request.getFullName())&#10;                .email(request.getEmail())&#10;                .phone(request.getPhone())&#10;                .passwordHash(passwordEncoder.encode(request.getPassword()))&#10;                .role(UserRole.PATIENT)&#10;                .isActive(true)&#10;                .emailVerified(false)&#10;                .phoneVerified(false)&#10;                .build();&#10;        &#10;        user = userRepository.save(user);&#10;        &#10;        // Create patient profile&#10;        Patient patient = Patient.builder()&#10;                .id(user.getId())&#10;                .user(user)&#10;                .dateOfBirth(request.getDateOfBirth() != null ? LocalDate.parse(request.getDateOfBirth()) : null)&#10;                .gender(request.getGender() != null ? Gender.valueOf(request.getGender().toUpperCase()) : null)&#10;                .bloodType(request.getBloodType())&#10;                .height(request.getHeight())&#10;                .weight(request.getWeight())&#10;                .build();&#10;        &#10;        // Note: Patient would be saved via PatientRepository in a real implementation&#10;        &#10;        String accessToken = jwtUtil.generateToken(user.getEmail(), user.getId(), user.getRole().name());&#10;        String refreshToken = jwtUtil.generateRefreshToken(user.getEmail(), user.getId());&#10;        &#10;        UserDto userDto = userMappingService.toDto(user);&#10;        &#10;        log.info(&quot;Patient registration successful for user: {}&quot;, user.getEmail());&#10;        &#10;        return AuthResponse.builder()&#10;                .accessToken(accessToken)&#10;                .refreshToken(refreshToken)&#10;                .tokenType(&quot;Bearer&quot;)&#10;                .expiresIn(86400L)&#10;                .user(userDto)&#10;                .build();&#10;    }&#10;    &#10;    public AuthResponse registerDoctor(RegisterDoctorRequest request) {&#10;        log.info(&quot;Attempting doctor registration for email: {}&quot;, request.getEmail());&#10;        &#10;        if (userRepository.existsByEmail(request.getEmail())) {&#10;            throw new BusinessException(&quot;EMAIL_ALREADY_EXISTS&quot;, &quot;Email is already registered&quot;, 409);&#10;        }&#10;        &#10;        if (request.getPhone() != null &amp;&amp; userRepository.existsByPhone(request.getPhone())) {&#10;            throw new BusinessException(&quot;PHONE_ALREADY_EXISTS&quot;, &quot;Phone number is already registered&quot;, 409);&#10;        }&#10;        &#10;        User user = User.builder()&#10;                .fullName(request.getFullName())&#10;                .email(request.getEmail())&#10;                .phone(request.getPhone())&#10;                .passwordHash(passwordEncoder.encode(request.getPassword()))&#10;                .role(UserRole.DOCTOR)&#10;                .isActive(true)&#10;                .emailVerified(false)&#10;                .phoneVerified(false)&#10;                .build();&#10;        &#10;        user = userRepository.save(user);&#10;        &#10;        // Create doctor profile (requires approval)&#10;        Doctor doctor = Doctor.builder()&#10;                .id(user.getId())&#10;                .user(user)&#10;                .licenseNumber(request.getLicenseNumber())&#10;                .experienceYears(request.getExperienceYears() != null ? request.getExperienceYears() : 0)&#10;                .feePerConsultation(request.getFeePerConsultation())&#10;                .bio(request.getBio())&#10;                .clinicName(request.getClinicName())&#10;                .videoConsultationEnabled(request.getVideoConsultationEnabled() != null ? request.getVideoConsultationEnabled() : false)&#10;                .teleConsultationEnabled(request.getTeleConsultationEnabled() != null ? request.getTeleConsultationEnabled() : false)&#10;                .isApproved(false) // Requires admin approval&#10;                .isActive(true)&#10;                .build();&#10;        &#10;        // Note: Doctor would be saved via DoctorRepository in a real implementation&#10;        &#10;        String accessToken = jwtUtil.generateToken(user.getEmail(), user.getId(), user.getRole().name());&#10;        String refreshToken = jwtUtil.generateRefreshToken(user.getEmail(), user.getId());&#10;        &#10;        UserDto userDto = userMappingService.toDto(user);&#10;        &#10;        log.info(&quot;Doctor registration successful for user: {} (pending approval)&quot;, user.getEmail());&#10;        &#10;        return AuthResponse.builder()&#10;                .accessToken(accessToken)&#10;                .refreshToken(refreshToken)&#10;                .tokenType(&quot;Bearer&quot;)&#10;                .expiresIn(86400L)&#10;                .user(userDto)&#10;                .build();&#10;    }&#10;    &#10;    public UserProfileResponse getCurrentUser(String email) {&#10;        log.info(&quot;Getting current user profile for: {}&quot;, email);&#10;        &#10;        User user = userRepository.findByEmailAndIsActiveTrue(email)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;USER_NOT_FOUND&quot;, &quot;User not found&quot;, 404));&#10;        &#10;        return UserProfileResponse.builder()&#10;                .id(user.getId())&#10;                .fullName(user.getFullName())&#10;                .email(user.getEmail())&#10;                .phone(user.getPhone())&#10;                .role(user.getRole())&#10;                .isActive(user.getIsActive())&#10;                .profilePicture(user.getProfilePicture())&#10;                .emailVerified(user.getEmailVerified())&#10;                .phoneVerified(user.getPhoneVerified())&#10;                .build();&#10;    }&#10;    &#10;    public void forgotPassword(ForgotPasswordRequest request) {&#10;        log.info(&quot;Password reset requested for email: {}&quot;, request.getEmail());&#10;        &#10;        User user = userRepository.findByEmailAndIsActiveTrue(request.getEmail())&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;USER_NOT_FOUND&quot;, &quot;User not found&quot;, 404));&#10;        &#10;        // Generate password reset token&#10;        String resetToken = UUID.randomUUID().toString();&#10;        &#10;        // In a real implementation, you would:&#10;        // 1. Store the reset token in database with expiration&#10;        // 2. Send email with reset link containing the token&#10;        &#10;        log.info(&quot;Password reset email would be sent to: {}&quot;, request.getEmail());&#10;        // TODO: Implement email service integration&#10;    }&#10;    &#10;    public void resetPassword(ResetPasswordRequest request) {&#10;        log.info(&quot;Password reset attempt with token: {}&quot;, request.getResetToken());&#10;        &#10;        if (!request.getNewPassword().equals(request.getConfirmPassword())) {&#10;            throw new BusinessException(&quot;PASSWORD_MISMATCH&quot;, &quot;Password confirmation does not match&quot;, 400);&#10;        }&#10;        &#10;        // In a real implementation, you would:&#10;        // 1. Validate the reset token from database&#10;        // 2. Check if token is not expired&#10;        // 3. Find user by token and update password&#10;        &#10;        // For now, we'll throw an exception to indicate the feature needs full implementation&#10;        throw new BusinessException(&quot;NOT_IMPLEMENTED&quot;, &quot;Password reset feature requires email service integration&quot;, 501);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/service/UserMappingService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth-service/src/main/java/com/docmate/auth/service/UserMappingService.java" />
              <option name="originalContent" value="package com.docmate.auth.service;&#10;&#10;import com.docmate.common.dto.user.UserDto;&#10;import com.docmate.common.entity.User;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mapping;&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mapping;&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;import org.mapstruct.Mapping;&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;import org.mapstruct.MappingConstants;&#10;import org.springframework.stereotype.Service;&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;&#10;@Service&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;public interface UserMappingService {&#10;&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;    // Map from User entity to UserDto, automatically excluding passwordHash since it's not in UserDto&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;    UserDto toDto(User user);&#10;&#10;    // Map from UserDto to User entity, passwordHash will need to be set separately&#10;    @Mapping(target = &quot;passwordHash&quot;, ignore = true)&#10;    User toEntity(UserDto userDto);&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.auth.service;&#10;&#10;import com.docmate.common.dto.user.UserDto;&#10;import com.docmate.common.entity.User;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingConstants;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;public interface UserMappingService {&#10;&#10;    // Map from User entity to UserDto, automatically excluding passwordHash since it's not in UserDto&#10;    UserDto toDto(User user);&#10;&#10;    // Map from UserDto to User entity, passwordHash will need to be set separately&#10;    User toEntity(UserDto userDto);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth-service/src/main/resources/db/changelog/001-initial-schema.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth-service/src/main/resources/db/changelog/001-initial-schema.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-users-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;users&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;full_name&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;email&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;phone&quot; type=&quot;VARCHAR(15)&quot;/&gt;&#10;            &lt;column name=&quot;password_hash&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;role&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;profile_picture&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;email_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;phone_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-refresh-tokens-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;refresh_tokens&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;expires_at&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;revoked&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;003-create-verification-tokens-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;verification_tokens&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token_type&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;expires_at&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;used&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;004-add-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;refresh_tokens&quot;&#10;                baseColumnNames=&quot;user_id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_refresh_tokens_user&quot;/&gt;&#10;        &#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;verification_tokens&quot;&#10;                baseColumnNames=&quot;user_id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_verification_tokens_user&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;005-create-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;users&quot; indexName=&quot;idx_users_email&quot;&gt;&#10;            &lt;column name=&quot;email&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;users&quot; indexName=&quot;idx_users_role&quot;&gt;&#10;            &lt;column name=&quot;role&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;refresh_tokens&quot; indexName=&quot;idx_refresh_tokens_user_id&quot;&gt;&#10;            &lt;column name=&quot;user_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;verification_tokens&quot; indexName=&quot;idx_verification_tokens_user_id&quot;&gt;&#10;            &lt;column name=&quot;user_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/auth-service/src/main/resources/db/changelog/db.changelog-master.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/auth-service/src/main/resources/db/changelog/db.changelog-master.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;!-- Include changelog files for auth-service --&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;!-- Include changelog files for auth-service --&gt;&#10;    &lt;include file=&quot;db/changelog/001-initial-schema.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/001-create-users-table.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/002-create-user-roles-table.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/003-create-refresh-tokens-table.xml&quot;/&gt;&#10;&#10;    &lt;!-- Add more changelog files as needed --&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/availability-service/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/availability-service/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;availability-service&lt;/artifactId&gt;&#10;    &lt;name&gt;availability-service&lt;/name&gt;&#10;    &lt;description&gt;Doctor availability management microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;availability-service&lt;/artifactId&gt;&#10;    &lt;name&gt;availability-service&lt;/name&gt;&#10;    &lt;description&gt;Doctor availability management microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/availability-service/src/main/java/com/docmate/availability/dto/CreateAvailabilityRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/availability-service/src/main/java/com/docmate/availability/dto/CreateAvailabilityRequest.java" />
              <option name="originalContent" value="package com.docmate.availability.dto;&#10;&#10;import com.docmate.common.enums.DayOfWeek;&#10;import jakarta.validation.constraints.NotNull;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalTime;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class CreateAvailabilityRequest {&#10;    &#10;    // For recurring availability&#10;    private DayOfWeek dayOfWeek;&#10;    &#10;    // For adhoc availability&#10;    private LocalDate date;&#10;    &#10;    @NotNull(message = &quot;Start time is required&quot;)&#10;    private LocalTime startTime;&#10;    &#10;    @NotNull(message = &quot;End time is required&quot;)&#10;    private LocalTime endTime;&#10;    &#10;&#10;" />
              <option name="updatedContent" value="package com.docmate.availability.dto;&#10;&#10;import com.docmate.common.enums.DayOfWeek;&#10;import jakarta.validation.constraints.NotNull;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalTime;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class CreateAvailabilityRequest {&#10;    &#10;    // For recurring availability&#10;    private DayOfWeek dayOfWeek;&#10;    &#10;    // For adhoc availability&#10;    private LocalDate date;&#10;    &#10;    @NotNull(message = &quot;Start time is required&quot;)&#10;    private LocalTime startTime;&#10;    &#10;    @NotNull(message = &quot;End time is required&quot;)&#10;    private LocalTime endTime;&#10;    &#10;    @Builder.Default&#10;    private Integer capacity = 1;&#10;    &#10;    @Builder.Default&#10;    private Boolean isRecurring = false;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/availability-service/src/main/java/com/docmate/availability/entity/DoctorAvailability.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/availability-service/src/main/java/com/docmate/availability/entity/DoctorAvailability.java" />
              <option name="originalContent" value="package com.docmate.availability.entity;&#10;&#10;import com.docmate.common.entity.BaseEntity;&#10;import com.docmate.common.enums.AvailabilityStatus;&#10;import com.docmate.common.enums.DayOfWeek;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalTime;&#10;import java.util.UUID;&#10;&#10;@Entity&#10;@Table(name = &quot;doctor_availability&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class DoctorAvailability extends BaseEntity {&#10;&#10;    @Column(name = &quot;doctor_id&quot;, nullable = false)&#10;    private UUID doctorId;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;day_of_week&quot;, nullable = false)&#10;    private DayOfWeek dayOfWeek;&#10;&#10;    @Column(name = &quot;start_time&quot;, nullable = false)&#10;    private LocalTime startTime;&#10;&#10;    @Column(name = &quot;end_time&quot;, nullable = false)&#10;    private LocalTime endTime;&#10;&#10;" />
              <option name="updatedContent" value="package com.docmate.availability.entity;&#10;&#10;import com.docmate.common.entity.BaseEntity;&#10;import com.docmate.common.enums.AvailabilityStatus;&#10;import com.docmate.common.enums.DayOfWeek;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalTime;&#10;import java.util.UUID;&#10;&#10;@Entity&#10;@Table(name = &quot;doctor_availability&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class DoctorAvailability extends BaseEntity {&#10;&#10;    @Column(name = &quot;doctor_id&quot;, nullable = false)&#10;    private UUID doctorId;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;day_of_week&quot;, nullable = false)&#10;    private DayOfWeek dayOfWeek;&#10;&#10;    @Column(name = &quot;start_time&quot;, nullable = false)&#10;    private LocalTime startTime;&#10;&#10;    @Column(name = &quot;end_time&quot;, nullable = false)&#10;    private LocalTime endTime;&#10;&#10;    @Column(name = &quot;capacity&quot;, nullable = false)&#10;    @Builder.Default&#10;    private Integer capacity = 1;&#10;&#10;    @Column(name = &quot;slot_duration_minutes&quot;, nullable = false)&#10;    @Builder.Default&#10;    private Integer slotDurationMinutes = 30;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;status&quot;, nullable = false)&#10;    @Builder.Default&#10;    private AvailabilityStatus status = AvailabilityStatus.AVAILABLE;&#10;&#10;    @Column(name = &quot;is_recurring&quot;, nullable = false)&#10;    @Builder.Default&#10;    private Boolean isRecurring = true;&#10;&#10;    @Column(name = &quot;effective_from&quot;)&#10;    private LocalDate effectiveFrom;&#10;&#10;    @Column(name = &quot;effective_until&quot;)&#10;    private LocalDate effectiveUntil;&#10;&#10;    @Column(name = &quot;notes&quot;)&#10;    private String notes;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/availability-service/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/availability-service/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: availability-service&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;&#10;  liquibase:&#10;    change-log: classpath:db/changelog/db.changelog-master.xml&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;&#10;server:&#10;  port: ${PORT:8088}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc&#10;" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: availability-service&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;&#10;  liquibase:&#10;    enabled: false  # Disabled - using centralized db-migration service&#10;&#10;server:&#10;  port: ${PORT:8088}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/AvailabilityDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/AvailabilityDto.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import com.docmate.common.enums.DayOfWeek;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.time.LocalTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class AvailabilityDto {&#10;    &#10;    private UUID id;&#10;    private UUID doctorId;&#10;    private DayOfWeek dayOfWeek; // For recurring availability&#10;    private LocalDate date; // For adhoc availability&#10;    private LocalTime startTime;&#10;    private LocalTime endTime;&#10;    private Integer capacity;&#10;    private Boolean isActive;&#10;    private Boolean isRecurring;&#10;    private LocalDateTime createdDate;&#10;    private LocalDateTime updatedDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/ConditionDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/ConditionDto.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class ConditionDto {&#10;&#10;    private UUID id;&#10;    private String name;&#10;    private String description;&#10;    private Boolean isActive;&#10;    private LocalDateTime createdDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/CreateAvailabilityRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/CreateAvailabilityRequest.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import com.docmate.common.enums.DayOfWeek;&#10;import jakarta.validation.constraints.NotNull;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalTime;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class CreateAvailabilityRequest {&#10;    &#10;    // For recurring availability&#10;    private DayOfWeek dayOfWeek;&#10;    &#10;    // For adhoc availability&#10;    private LocalDate date;&#10;    &#10;    @NotNull(message = &quot;Start time is required&quot;)&#10;    private LocalTime startTime;&#10;    &#10;    @NotNull(message = &quot;End time is required&quot;)&#10;    private LocalTime endTime;&#10;    &#10;    @Builder.Default&#10;    private Boolean isRecurring = false;&#10;    &#10;    private Integer slotDurationMinutes;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/DoctorDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/DoctorDto.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.Set;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class DoctorDto {&#10;&#10;    private UUID id;&#10;    private UserDto user;&#10;    private SpecializationDto specialization;&#10;    private String licenseNumber;&#10;    private Integer experienceYears;&#10;    private BigDecimal feePerConsultation;&#10;    private String bio;&#10;    private Boolean videoConsultationEnabled;&#10;    private Boolean teleConsultationEnabled;&#10;    private Boolean emergencyAvailable;&#10;    private Boolean isApproved;&#10;    private Boolean isActive;&#10;    private String clinicName;&#10;    private AddressDto primaryAddress;&#10;    private BigDecimal averageRating;&#10;    private Integer reviewCount;&#10;    private Set&lt;SpecializationDto&gt; specializations;&#10;    private Set&lt;ConditionDto&gt; conditions;&#10;    private LocalDateTime createdDate;&#10;    private LocalDateTime updatedDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/DoctorSearchResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/DoctorSearchResponse.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class DoctorSearchResponse {&#10;    &#10;    private UUID id;&#10;    private String fullName;&#10;    private String profilePicture;&#10;    private String specialization;&#10;    private String bio;&#10;    private Integer experienceYears;&#10;    private BigDecimal feePerConsultation;&#10;    private BigDecimal averageRating;&#10;    private Integer reviewCount;&#10;    private String clinicName;&#10;    private Boolean videoConsultationEnabled;&#10;    private Boolean teleConsultationEnabled;&#10;    private Boolean emergencyAvailable;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/DoctorStatsResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/DoctorStatsResponse.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class DoctorStatsResponse {&#10;    &#10;    private Long totalAppointments;&#10;    private Long completedAppointments;&#10;    private Long pendingAppointments;&#10;    private Long cancelledAppointments;&#10;    private Long totalPatients;&#10;    private Double averageRating;&#10;    private Long totalReviews;&#10;    private Long totalEarnings;&#10;    private Long thisMonthAppointments;&#10;    private Long thisMonthEarnings;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/DoctorVerificationDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/DoctorVerificationDto.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import com.docmate.common.enums.VerificationStatus;&#10;import lombok.*;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class DoctorVerificationDto {&#10;    &#10;    private UUID id;&#10;    private UUID doctorId;&#10;    private String doctorName;&#10;    private String licenseDocumentUrl;&#10;    private String idDocumentUrl;&#10;    private VerificationStatus verificationStatus;&#10;    private UUID verifiedById;&#10;    private String verifiedByName;&#10;    private LocalDateTime verifiedDate;&#10;    private String rejectionReason;&#10;    private LocalDateTime submittedDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/PatientDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/PatientDto.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import com.docmate.common.enums.Gender;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class PatientDto {&#10;&#10;    private UUID id;&#10;    private UserDto user;&#10;    private LocalDate dateOfBirth;&#10;    private Gender gender;&#10;    private String bloodType;&#10;    private String height;&#10;    private String weight;&#10;    private AddressDto address;&#10;    private LocalDateTime createdDate;&#10;    private LocalDateTime updatedDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/PatientMedicalHistoryResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/PatientMedicalHistoryResponse.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class PatientMedicalHistoryResponse {&#10;    &#10;    private UUID id;&#10;    private UUID patientId;&#10;    private String allergies;&#10;    private String chronicConditions;&#10;    private String currentMedications;&#10;    private String previousSurgeries;&#10;    private String familyHistory;&#10;    private String emergencyContactName;&#10;    private String emergencyContactPhone;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/PatientReportResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/PatientReportResponse.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class PatientReportResponse {&#10;&#10;    private UUID id;&#10;    private UUID patientId;&#10;    private String title;&#10;    private String description;&#10;    private LocalDate testDate;&#10;    private String fileUrl;&#10;    private String fileName;&#10;    private String fileType;&#10;    private Long fileSize;&#10;    private LocalDateTime createdDate;&#10;    private LocalDateTime updatedDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/RegisterDoctorRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/RegisterDoctorRequest.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class RegisterDoctorRequest {&#10;    &#10;    @NotBlank(message = &quot;Full name is required&quot;)&#10;    @Size(max = 100, message = &quot;Full name must not exceed 100 characters&quot;)&#10;    private String fullName;&#10;    &#10;    @Email(message = &quot;Email should be valid&quot;)&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    private String email;&#10;    &#10;    @Size(max = 15, message = &quot;Phone must not exceed 15 characters&quot;)&#10;    private String phone;&#10;    &#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 8, message = &quot;Password must be at least 8 characters long&quot;)&#10;    private String password;&#10;    &#10;    @NotBlank(message = &quot;License number is required&quot;)&#10;    private String licenseNumber;&#10;    &#10;    private UUID specializationId;&#10;    private Integer experienceYears;&#10;    private BigDecimal feePerConsultation;&#10;    private String bio;&#10;    private String clinicName;&#10;    private Boolean videoConsultationEnabled;&#10;    private Boolean teleConsultationEnabled;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/RegisterPatientRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/RegisterPatientRequest.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class RegisterPatientRequest {&#10;    &#10;    @NotBlank(message = &quot;Full name is required&quot;)&#10;    @Size(max = 100, message = &quot;Full name must not exceed 100 characters&quot;)&#10;    private String fullName;&#10;    &#10;    @Email(message = &quot;Email should be valid&quot;)&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    private String email;&#10;    &#10;    @Size(max = 15, message = &quot;Phone must not exceed 15 characters&quot;)&#10;    private String phone;&#10;    &#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 8, message = &quot;Password must be at least 8 characters long&quot;)&#10;    private String password;&#10;    &#10;    private String dateOfBirth;&#10;    private String gender;&#10;    private String bloodType;&#10;    private String height;&#10;    private String weight;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/SpecializationDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/SpecializationDto.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class SpecializationDto {&#10;&#10;    private UUID id;&#10;    private String name;&#10;    private String description;&#10;    private Boolean isActive;&#10;    private LocalDateTime createdDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/SubmitVerificationRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/SubmitVerificationRequest.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import lombok.*;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;import java.util.UUID;&#10;&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class SubmitVerificationRequest {&#10;    &#10;    @NotNull(message = &quot;Doctor ID is required&quot;)&#10;    private UUID doctorId;&#10;    &#10;    @NotBlank(message = &quot;License document URL is required&quot;)&#10;    private String licenseDocumentUrl;&#10;    &#10;    @NotBlank(message = &quot;ID document URL is required&quot;)&#10;    private String idDocumentUrl;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/UpdateDoctorProfileRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/UpdateDoctorProfileRequest.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class UpdateDoctorProfileRequest {&#10;&#10;    @Size(max = 50, message = &quot;License number must not exceed 50 characters&quot;)&#10;    private String licenseNumber;&#10;&#10;    private UUID specializationId;&#10;    private Integer experienceYears;&#10;    private BigDecimal feePerConsultation;&#10;&#10;    @Size(max = 2000, message = &quot;Bio must not exceed 2000 characters&quot;)&#10;    private String bio;&#10;&#10;    @Size(max = 200, message = &quot;Clinic name must not exceed 200 characters&quot;)&#10;    private String clinicName;&#10;&#10;    private Boolean videoConsultationEnabled;&#10;    private Boolean teleConsultationEnabled;&#10;    private Boolean emergencyAvailable;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/UpdatePatientMedicalHistoryRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/UpdatePatientMedicalHistoryRequest.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class UpdatePatientMedicalHistoryRequest {&#10;&#10;    @Size(max = 2000, message = &quot;Allergies must not exceed 2000 characters&quot;)&#10;    private String allergies;&#10;&#10;    @Size(max = 2000, message = &quot;Chronic conditions must not exceed 2000 characters&quot;)&#10;    private String chronicConditions;&#10;&#10;    @Size(max = 2000, message = &quot;Current medications must not exceed 2000 characters&quot;)&#10;    private String currentMedications;&#10;&#10;    @Size(max = 2000, message = &quot;Previous surgeries must not exceed 2000 characters&quot;)&#10;    private String previousSurgeries;&#10;&#10;    @Size(max = 2000, message = &quot;Family history must not exceed 2000 characters&quot;)&#10;    private String familyHistory;&#10;&#10;    @Size(max = 100, message = &quot;Emergency contact name must not exceed 100 characters&quot;)&#10;    private String emergencyContactName;&#10;&#10;    @Size(max = 20, message = &quot;Emergency contact phone must not exceed 20 characters&quot;)&#10;    private String emergencyContactPhone;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/UserDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/UserDto.java" />
              <option name="originalContent" value="package com.docmate.common.dto;&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Pattern;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public record UserDto(&#10;    UUID id,&#10;&#10;&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    String firstName,&#10;&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    String firstName,&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String lastName,&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;                lastName,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;&#10;                &quot;en&quot;, // default language&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;                &quot;ACTIVE&quot;, // default status&#10;&#10;                null, // updatedAt will be set by system&#10;&#10;                &quot;en&quot;, // default language&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;                firstName,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;    LocalDateTime createdAt,&#10;    LocalDateTime updatedAt,&#10;&#10;    // Profile picture URL&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;    String timezone,&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;    LocalDateTime createdAt,&#10;    LocalDateTime updatedAt,&#10;&#10;    // Profile picture URL&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;    String timezone,&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;    LocalDateTime createdAt,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;                firstName,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;    LocalDateTime createdAt,&#10;    LocalDateTime updatedAt,&#10;&#10;    // Profile picture URL&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;    String timezone,&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;    LocalDateTime createdAt,&#10;    LocalDateTime updatedAt,&#10;&#10;    // Profile picture URL&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;    String timezone,&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;                lastName,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;                &quot;ACTIVE&quot;, // default status&#10;&#10;                null, // updatedAt will be set by system&#10;&#10;                &quot;en&quot;, // default language&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;                firstName,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;    LocalDateTime createdAt,&#10;    LocalDateTime updatedAt,&#10;&#10;    // Profile picture URL&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;    String timezone,&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;    LocalDateTime createdAt,&#10;    LocalDateTime updatedAt,&#10;&#10;    // Profile picture URL&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;    String timezone,&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;    LocalDateTime createdAt,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;                firstName,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;    LocalDateTime createdAt,&#10;    LocalDateTime updatedAt,&#10;&#10;    // Profile picture URL&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;    String timezone,&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    }&#10;&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    String status,&#10;    LocalDateTime createdAt,&#10;    LocalDateTime updatedAt,&#10;&#10;    // Profile picture URL&#10;    String profilePictureUrl,&#10;&#10;    // Additional user information&#10;    String timezone,&#10;    @Pattern(regexp = &quot;^\\+?[1-9]\\d{1,14}$&quot;, message = &quot;Invalid phone number format&quot;)&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;    LocalDateTime lastLoginAt&#10;    String role,&#10;    String status,&#10;    LocalDateTime createdAt,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;    String timezone,&#10;    String language,&#10;    Boolean emailVerified,&#10;    Boolean phoneVerified,&#10;    LocalDateTime lastLoginAt&#10;) {&#10;&#10;    // Factory method for creating a new user (without system-generated fields)&#10;    public static UserDto createNew(&#10;            String email,&#10;            String firstName,&#10;            String lastName,&#10;            String phoneNumber,&#10;            String role) {&#10;        return new UserDto(&#10;                null, // id will be generated&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                &quot;ACTIVE&quot;, // default status&#10;                null, // createdAt will be set by system&#10;                null, // updatedAt will be set by system&#10;                null, // profilePictureUrl&#10;                &quot;UTC&quot;, // default timezone&#10;                &quot;en&quot;, // default language&#10;                false, // emailVerified&#10;                false, // phoneVerified&#10;                null // lastLoginAt&#10;        );&#10;    }&#10;&#10;    // Factory method for response (without sensitive data)&#10;    public UserDto toResponse() {&#10;        return new UserDto(&#10;                id,&#10;                email,&#10;                firstName,&#10;                lastName,&#10;                phoneNumber,&#10;                role,&#10;                status,&#10;                createdAt,&#10;                updatedAt,&#10;                profilePictureUrl,&#10;                timezone,&#10;                language,&#10;                emailVerified,&#10;                phoneVerified,&#10;                lastLoginAt&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Pattern;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public record UserDto(&#10;    UUID id,&#10;    &#10;    @NotBlank(message = &quot;Full name is required&quot;)&#10;    String fullName,&#10;    &#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    String email,&#10;    &#10;    @Pattern(regexp = &quot;^\\+?[1-9]\\d{1,14}$&quot;, message = &quot;Invalid phone number format&quot;)&#10;    String phone,&#10;    &#10;    String role,&#10;    String profilePicture,&#10;    Boolean isActive,&#10;    Boolean emailVerified,&#10;    LocalDateTime createdAt,&#10;    LocalDateTime updatedAt&#10;) {&#10;    &#10;    // Factory method for creating a new user (without system-generated fields)&#10;    public static UserDto createNew(&#10;            String fullName,&#10;            String email,&#10;            String phone,&#10;            String role) {&#10;        return new UserDto(&#10;                null, // id will be generated&#10;                fullName,&#10;                email,&#10;                phone,&#10;                role,&#10;                null, // profilePicture&#10;                true, // isActive&#10;                false, // emailVerified&#10;                null, // createdAt will be set by system&#10;                null  // updatedAt will be set by system&#10;        );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/UserProfileResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/UserProfileResponse.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import com.docmate.common.enums.UserRole;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class UserProfileResponse {&#10;    &#10;    private UUID id;&#10;    private String fullName;&#10;    private String email;&#10;    private String phone;&#10;    private UserRole role;&#10;    private Boolean isActive;&#10;    private String profilePicture;&#10;    private Boolean emailVerified;&#10;    private Boolean phoneVerified;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/VerificationReviewRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/VerificationReviewRequest.java" />
              <option name="updatedContent" value="package com.docmate.common.dto;&#10;&#10;import com.docmate.common.enums.VerificationStatus;&#10;import lombok.*;&#10;&#10;import jakarta.validation.constraints.NotNull;&#10;import java.util.UUID;&#10;&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class VerificationReviewRequest {&#10;    &#10;    @NotNull(message = &quot;Verification ID is required&quot;)&#10;    private UUID verificationId;&#10;    &#10;    @NotNull(message = &quot;Verification status is required&quot;)&#10;    private VerificationStatus verificationStatus;&#10;    &#10;    private String rejectionReason; // Required if status is REJECTED&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/auth/ForgotPasswordRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/auth/ForgotPasswordRequest.java" />
              <option name="updatedContent" value="package com.docmate.common.dto.auth;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ForgotPasswordRequest {&#10;    &#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Email should be valid&quot;)&#10;    private String email;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/auth/LoginRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/auth/LoginRequest.java" />
              <option name="updatedContent" value="package com.docmate.common.dto.auth;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class LoginRequest {&#10;    &#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    @Email(message = &quot;Email should be valid&quot;)&#10;    private String email;&#10;    &#10;    @NotBlank(message = &quot;Password is required&quot;)&#10;    @Size(min = 6, message = &quot;Password must be at least 6 characters&quot;)&#10;    private String password;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/auth/RefreshTokenRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/auth/RefreshTokenRequest.java" />
              <option name="updatedContent" value="package com.docmate.common.dto.auth;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class RefreshTokenRequest {&#10;    &#10;    @NotBlank(message = &quot;Refresh token is required&quot;)&#10;    private String refreshToken;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/auth/ResetPasswordRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/auth/ResetPasswordRequest.java" />
              <option name="updatedContent" value="package com.docmate.common.dto.auth;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ResetPasswordRequest {&#10;    &#10;    @NotBlank(message = &quot;Reset token is required&quot;)&#10;    private String resetToken;&#10;    &#10;    @NotBlank(message = &quot;New password is required&quot;)&#10;    @Size(min = 8, message = &quot;Password must be at least 8 characters long&quot;)&#10;    private String newPassword;&#10;    &#10;    @NotBlank(message = &quot;Password confirmation is required&quot;)&#10;    private String confirmPassword;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/response/ApiResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/response/ApiResponse.java" />
              <option name="originalContent" value="package com.docmate.common.dto.response;&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class ApiResponse&lt;T&gt; {&#10;&#10;    private boolean success;&#10;    private String message;&#10;    private T data;&#10;    private String error;&#10;    private String path;&#10;    private int status;&#10;&#10;    @Builder.Default&#10;    private LocalDateTime timestamp = LocalDateTime.now();&#10;&#10;    public static &lt;T&gt; ApiResponse&lt;T&gt; success(T data) {&#10;        return ApiResponse.&lt;T&gt;builder()&#10;                .success(true)&#10;                .data(data)&#10;                .status(200)&#10;                .build();&#10;    }&#10;&#10;    public static &lt;T&gt; ApiResponse&lt;T&gt; success(String message, T data) {&#10;        return ApiResponse.&lt;T&gt;builder()&#10;                .success(true)&#10;                .message(message)&#10;                .data(data)&#10;                .status(200)&#10;                .build();&#10;    }&#10;&#10;    public static &lt;T&gt; ApiResponse&lt;T&gt; error(String message) {&#10;        return ApiResponse.&lt;T&gt;builder()&#10;                .success(false)&#10;                .error(message)&#10;                .status(500)&#10;                .build();&#10;    }&#10;&#10;    public static &lt;T&gt; ApiResponse&lt;T&gt; error(String message, int status) {&#10;        return ApiResponse.&lt;T&gt;builder()&#10;                .success(false)&#10;                .error(message)&#10;                .status(status)&#10;                .build();&#10;    }&#10;}&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.docmate.common.dto.response;&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class ApiResponse&lt;T&gt; {&#10;&#10;    private boolean success;&#10;    private String message;&#10;    private T data;&#10;    private String error;&#10;    private String path;&#10;    private int status;&#10;&#10;    @Builder.Default&#10;    private LocalDateTime timestamp = LocalDateTime.now();&#10;&#10;    public static &lt;T&gt; ApiResponse&lt;T&gt; success(T data) {&#10;        return ApiResponse.&lt;T&gt;builder()&#10;                .success(true)&#10;                .data(data)&#10;                .status(200)&#10;                .build();&#10;    }&#10;&#10;    public static &lt;T&gt; ApiResponse&lt;T&gt; success(String message, T data) {&#10;        return ApiResponse.&lt;T&gt;builder()&#10;                .success(true)&#10;                .message(message)&#10;                .data(data)&#10;                .status(200)&#10;                .build();&#10;    }&#10;&#10;    public static &lt;T&gt; ApiResponse&lt;T&gt; error(String message) {&#10;        return ApiResponse.&lt;T&gt;builder()&#10;                .success(false)&#10;                .error(message)&#10;                .status(500)&#10;                .build();&#10;    }&#10;&#10;    public static &lt;T&gt; ApiResponse&lt;T&gt; error(String message, int status) {&#10;        return ApiResponse.&lt;T&gt;builder()&#10;                .success(false)&#10;                .error(message)&#10;                .status(status)&#10;                .build();&#10;    }&#10;&#10;    // Additional setter methods for runtime modification&#10;    public void setPath(String path) {&#10;        this.path = path;&#10;    }&#10;    &#10;    public void setData(T data) {&#10;        this.data = data;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/response/PageResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/response/PageResponse.java" />
              <option name="originalContent" value="package com.docmate.common.dto.response;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;    private boolean last;&#10;    private boolean empty;&#10;    &#10;    public static &lt;T&gt; PageResponse&lt;T&gt; of(List&lt;T&gt; content, int pageNumber, int pageSize, long totalElements) {&#10;        int totalPages = (int) Math.ceil((double) totalElements / pageSize);&#10;        &#10;        return PageResponse.&lt;T&gt;builder()&#10;                .content(content)&#10;                .pageNumber(pageNumber)&#10;                .pageSize(pageSize)&#10;                .totalElements(totalElements)&#10;                .totalPages(totalPages)&#10;                .first(pageNumber == 0)&#10;                .last(pageNumber &gt;= totalPages - 1)&#10;                .empty(content.isEmpty())&#10;                .build();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.common.dto.response;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import org.springframework.data.domain.Page;&#10;&#10;import java.util.List;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class PageResponse&lt;T&gt; {&#10;    &#10;    private List&lt;T&gt; content;&#10;    private int pageNumber;&#10;    private int pageSize;&#10;    private long totalElements;&#10;    private int totalPages;&#10;    private boolean first;&#10;    private boolean last;&#10;    private boolean empty;&#10;    &#10;    public static &lt;T&gt; PageResponse&lt;T&gt; of(List&lt;T&gt; content, int pageNumber, int pageSize, long totalElements) {&#10;        int totalPages = (int) Math.ceil((double) totalElements / pageSize);&#10;        &#10;        return PageResponse.&lt;T&gt;builder()&#10;                .content(content)&#10;                .pageNumber(pageNumber)&#10;                .pageSize(pageSize)&#10;                .totalElements(totalElements)&#10;                .totalPages(totalPages)&#10;                .first(pageNumber == 0)&#10;                .last(pageNumber &gt;= totalPages - 1)&#10;                .empty(content.isEmpty())&#10;                .build();&#10;    }&#10;    &#10;    public static &lt;T&gt; PageResponse&lt;T&gt; of(Page&lt;T&gt; page) {&#10;        return PageResponse.&lt;T&gt;builder()&#10;                .content(page.getContent())&#10;                .pageNumber(page.getNumber())&#10;                .pageSize(page.getSize())&#10;                .totalElements(page.getTotalElements())&#10;                .totalPages(page.getTotalPages())&#10;                .first(page.isFirst())&#10;                .last(page.isLast())&#10;                .empty(page.isEmpty())&#10;                .build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/user/UserDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/dto/user/UserDto.java" />
              <option name="updatedContent" value="package com.docmate.common.dto.user;&#10;&#10;import com.docmate.common.enums.UserRole;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class UserDto {&#10;    &#10;    private UUID id;&#10;    private String fullName;&#10;    private String email;&#10;    private String phone;&#10;    private UserRole role;&#10;    private Boolean isActive;&#10;    private String profilePicture;&#10;    private Boolean emailVerified;&#10;    private Boolean phoneVerified;&#10;    private LocalDateTime createdDate;&#10;    private LocalDateTime updatedDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Address.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Address.java" />
              <option name="originalContent" value="package com.docmate.common.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.*;&#10;&#10;import java.math.BigDecimal;&#10;&#10;@Entity&#10;@Table(name = &quot;addresses&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Address extends BaseEntity {&#10;    &#10;    @NotBlank(message = &quot;Address line 1 is required&quot;)&#10;    @Size(max = 200, message = &quot;Address line 1 must not exceed 200 characters&quot;)&#10;    @Column(name = &quot;address_line1&quot;, nullable = false, length = 200)&#10;    private String addressLine1;&#10;    &#10;    @Size(max = 200, message = &quot;Address line 2 must not exceed 200 characters&quot;)&#10;    @Column(name = &quot;address_line2&quot;, length = 200)&#10;    private String addressLine2;&#10;    &#10;    @NotBlank(message = &quot;City is required&quot;)&#10;    @Size(max = 100, message = &quot;City must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;city&quot;, nullable = false, length = 100)&#10;    private String city;&#10;    &#10;    @NotBlank(message = &quot;State is required&quot;)&#10;    @Size(max = 100, message = &quot;State must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;state&quot;, nullable = false, length = 100)&#10;    private String state;&#10;    &#10;    @NotBlank(message = &quot;Zip code is required&quot;)&#10;    @Size(max = 20, message = &quot;Zip code must not exceed 20 characters&quot;)&#10;    @Column(name = &quot;zip_code&quot;, nullable = false, length = 20)&#10;    private String zipCode;&#10;    &#10;    @Builder.Default&#10;    @Size(max = 100, message = &quot;Country must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;country&quot;, length = 100)&#10;    private String country = &quot;United States&quot;;&#10;    &#10;    @Column(name = &quot;latitude&quot;, precision = 10, scale = 8)&#10;    private BigDecimal latitude;&#10;    &#10;    @Column(name = &quot;longitude&quot;, precision = 11, scale = 8)&#10;    private BigDecimal longitude;&#10;    &#10;    @Builder.Default&#10;    @Column(name = &quot;is_primary&quot;)&#10;    private Boolean isPrimary = false;&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.common.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.*;&#10;&#10;import java.math.BigDecimal;&#10;&#10;@Entity&#10;@Table(name = &quot;addresses&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Address extends BaseEntity {&#10;    &#10;    @NotBlank(message = &quot;Address line 1 is required&quot;)&#10;    @Size(max = 200, message = &quot;Address line 1 must not exceed 200 characters&quot;)&#10;    @Column(name = &quot;address_line1&quot;, nullable = false, length = 200)&#10;    private String addressLine1;&#10;    &#10;    @Size(max = 200, message = &quot;Address line 2 must not exceed 200 characters&quot;)&#10;    @Column(name = &quot;address_line2&quot;, length = 200)&#10;    private String addressLine2;&#10;    &#10;    @NotBlank(message = &quot;City is required&quot;)&#10;    @Size(max = 100, message = &quot;City must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;city&quot;, nullable = false, length = 100)&#10;    private String city;&#10;    &#10;    @NotBlank(message = &quot;State is required&quot;)&#10;    @Size(max = 100, message = &quot;State must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;state&quot;, nullable = false, length = 100)&#10;    private String state;&#10;    &#10;    @NotBlank(message = &quot;Postal code is required&quot;)&#10;    @Size(max = 20, message = &quot;Postal code must not exceed 20 characters&quot;)&#10;    @Column(name = &quot;postal_code&quot;, nullable = false, length = 20)&#10;    private String postalCode;&#10;    &#10;    @NotBlank(message = &quot;Zip code is required&quot;)&#10;    @Size(max = 20, message = &quot;Zip code must not exceed 20 characters&quot;)&#10;    @Column(name = &quot;zip_code&quot;, nullable = false, length = 20)&#10;    private String zipCode;&#10;    &#10;    @Builder.Default&#10;    @Size(max = 100, message = &quot;Country must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;country&quot;, length = 100)&#10;    private String country = &quot;United States&quot;;&#10;    &#10;    @Column(name = &quot;latitude&quot;, precision = 10, scale = 8)&#10;    private BigDecimal latitude;&#10;    &#10;    @Column(name = &quot;longitude&quot;, precision = 11, scale = 8)&#10;    private BigDecimal longitude;&#10;    &#10;    @Builder.Default&#10;    @Column(name = &quot;is_primary&quot;)&#10;    private Boolean isPrimary = false;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Admin.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Admin.java" />
              <option name="updatedContent" value="package com.docmate.common.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Entity&#10;@Table(name = &quot;admins&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Admin {&#10;    &#10;    @Id&#10;    @Column(name = &quot;id&quot;, updatable = false, nullable = false)&#10;    private UUID id;&#10;    &#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @MapsId&#10;    @JoinColumn(name = &quot;id&quot;)&#10;    private User user;&#10;    &#10;    @Column(name = &quot;permissions&quot;, columnDefinition = &quot;JSONB&quot;)&#10;    private String permissions;&#10;    &#10;    @Column(name = &quot;created_at&quot;, nullable = false)&#10;    private LocalDateTime createdAt;&#10;    &#10;    @Column(name = &quot;updated_at&quot;, nullable = false)&#10;    private LocalDateTime updatedAt;&#10;    &#10;    @Column(name = &quot;created_by&quot;)&#10;    private String createdBy;&#10;    &#10;    @Column(name = &quot;updated_by&quot;)&#10;    private String updatedBy;&#10;    &#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;    &#10;    @PreUpdate&#10;    protected void onUpdate() {&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Appointment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Appointment.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.docmate.common.entity;&#10;&#10;import com.docmate.common.enums.AppointmentStatus;&#10;import com.docmate.common.enums.ConsultationMode;&#10;import com.docmate.common.enums.PaymentStatus;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@Table(name = &quot;appointments&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class CommonAppointment extends BaseEntity {&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;doctor_id&quot;, nullable = false)&#10;    private Doctor doctor;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;patient_id&quot;, nullable = false)&#10;    private Patient patient;&#10;    &#10;    @Column(name = &quot;appointment_date_time&quot;, nullable = false)&#10;    private LocalDateTime appointmentDateTime;&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;mode&quot;, nullable = false, length = 20)&#10;    private ConsultationMode mode;&#10;    &#10;    @Builder.Default&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;status&quot;, length = 20)&#10;    private AppointmentStatus status = AppointmentStatus.PENDING;&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;payment_status&quot;, length = 20)&#10;    private PaymentStatus paymentStatus;&#10;    &#10;    @Column(name = &quot;notes&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String notes;&#10;    &#10;    @Column(name = &quot;cancellation_reason&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String cancellationReason;&#10;    &#10;    @Column(name = &quot;meeting_link&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String meetingLink;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/AuditLog.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/AuditLog.java" />
              <option name="updatedContent" value="package com.docmate.common.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Entity&#10;@Table(name = &quot;audit_log&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class AuditLog {&#10;    &#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.AUTO)&#10;    @Column(name = &quot;id&quot;, updatable = false, nullable = false)&#10;    private UUID id;&#10;    &#10;    @Column(name = &quot;user_id&quot;)&#10;    private UUID userId;&#10;    &#10;    @Column(name = &quot;action&quot;, nullable = false, length = 100)&#10;    private String action;&#10;    &#10;    @Column(name = &quot;entity_type&quot;, nullable = false, length = 50)&#10;    private String entityType;&#10;    &#10;    @Column(name = &quot;entity_id&quot;, length = 100)&#10;    private String entityId;&#10;    &#10;    @Column(name = &quot;old_values&quot;, columnDefinition = &quot;JSONB&quot;)&#10;    private String oldValues;&#10;    &#10;    @Column(name = &quot;new_values&quot;, columnDefinition = &quot;JSONB&quot;)&#10;    private String newValues;&#10;    &#10;    @Column(name = &quot;ip_address&quot;, length = 45)&#10;    private String ipAddress;&#10;    &#10;    @Column(name = &quot;user_agent&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String userAgent;&#10;    &#10;    @Column(name = &quot;created_at&quot;, nullable = false)&#10;    private LocalDateTime createdAt;&#10;    &#10;    @Column(name = &quot;updated_at&quot;, nullable = false)&#10;    private LocalDateTime updatedAt;&#10;    &#10;    @Column(name = &quot;created_by&quot;)&#10;    private String createdBy;&#10;    &#10;    @Column(name = &quot;updated_by&quot;)&#10;    private String updatedBy;&#10;    &#10;    @PrePersist&#10;    protected void onCreate() {&#10;        createdAt = LocalDateTime.now();&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;    &#10;    @PreUpdate&#10;    protected void onUpdate() {&#10;        updatedAt = LocalDateTime.now();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/BaseEntity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/BaseEntity.java" />
              <option name="originalContent" value="package com.docmate.common.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.annotation.LastModifiedDate;&#10;import org.springframework.data.jpa.domain.support.AuditingEntityListener;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@MappedSuperclass&#10;@Getter&#10;@Setter&#10;@EntityListeners(AuditingEntityListener.class)&#10;public abstract class BaseEntity {&#10;    &#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.AUTO)&#10;    @Column(name = &quot;id&quot;, updatable = false, nullable = false)&#10;    private UUID id;&#10;    &#10;    @CreatedDate&#10;    @Column(name = &quot;created_date&quot;, nullable = false, updatable = false)&#10;    private LocalDateTime createdDate;&#10;    &#10;    @LastModifiedDate&#10;    @Column(name = &quot;updated_date&quot;)&#10;    private LocalDateTime updatedDate;&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.common.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.Getter;&#10;import lombok.Setter;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.annotation.LastModifiedDate;&#10;import org.springframework.data.jpa.domain.support.AuditingEntityListener;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@MappedSuperclass&#10;@Getter&#10;@Setter&#10;@EntityListeners(AuditingEntityListener.class)&#10;public abstract class BaseEntity {&#10;    &#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.AUTO)&#10;    @Column(name = &quot;id&quot;, updatable = false, nullable = false)&#10;    private UUID id;&#10;    &#10;    @CreatedDate&#10;    @Column(name = &quot;created_at&quot;, nullable = false, updatable = false)&#10;    private LocalDateTime createdDate;&#10;    &#10;    @LastModifiedDate&#10;    @Column(name = &quot;updated_at&quot;)&#10;    private LocalDateTime updatedDate;&#10;    &#10;    @Column(name = &quot;created_by&quot;)&#10;    private String createdBy;&#10;    &#10;    @Column(name = &quot;updated_by&quot;)&#10;    private String updatedBy;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Payment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Payment.java" />
              <option name="originalContent" value="package com.docmate.common.entity;&#10;&#10;import com.docmate.common.enums.PaymentStatus;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.*;&#10;&#10;import java.math.BigDecimal;&#10;&#10;@Entity&#10;@Table(name = &quot;payments&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Payment extends BaseEntity {&#10;    &#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;appointment_id&quot;)&#10;    private Appointment appointment;&#10;    &#10;    @NotNull(message = &quot;Amount is required&quot;)&#10;    @Column(name = &quot;amount&quot;, nullable = false, precision = 10, scale = 2)&#10;    private BigDecimal amount;&#10;    &#10;    @Builder.Default&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;status&quot;, length = 20)&#10;    private PaymentStatus status = PaymentStatus.PENDING;&#10;    &#10;    @Size(max = 50, message = &quot;Payment method must not exceed 50 characters&quot;)&#10;    @Column(name = &quot;payment_method&quot;, length = 50)&#10;    private String paymentMethod;&#10;    &#10;    @Size(max = 200, message = &quot;Transaction ID must not exceed 200 characters&quot;)&#10;    @Column(name = &quot;transaction_id&quot;, length = 200)&#10;    private String transactionId;&#10;    &#10;    @Size(max = 200, message = &quot;Stripe payment intent ID must not exceed 200 characters&quot;)&#10;    @Column(name = &quot;stripe_payment_intent_id&quot;, length = 200)&#10;    private String stripePaymentIntentId;&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.common.entity;&#10;&#10;import com.docmate.common.enums.PaymentStatus;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.NotNull;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.*;&#10;&#10;import java.math.BigDecimal;&#10;&#10;@Entity&#10;@Table(name = &quot;payments&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Payment extends BaseEntity {&#10;    &#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;appointment_id&quot;)&#10;    private CommonAppointment appointment;&#10;    &#10;    @NotNull(message = &quot;Amount is required&quot;)&#10;    @Column(name = &quot;amount&quot;, nullable = false, precision = 10, scale = 2)&#10;    private BigDecimal amount;&#10;    &#10;    @Builder.Default&#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;status&quot;, length = 20)&#10;    private PaymentStatus status = PaymentStatus.PENDING;&#10;    &#10;    @Size(max = 50, message = &quot;Payment method must not exceed 50 characters&quot;)&#10;    @Column(name = &quot;payment_method&quot;, length = 50)&#10;    private String paymentMethod;&#10;    &#10;    @Size(max = 200, message = &quot;Transaction ID must not exceed 200 characters&quot;)&#10;    @Column(name = &quot;transaction_id&quot;, length = 200)&#10;    private String transactionId;&#10;    &#10;    @Size(max = 200, message = &quot;Stripe payment intent ID must not exceed 200 characters&quot;)&#10;    @Column(name = &quot;stripe_payment_intent_id&quot;, length = 200)&#10;    private String stripePaymentIntentId;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Prescription.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Prescription.java" />
              <option name="originalContent" value="package com.docmate.common.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Table(name = &quot;prescriptions&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Prescription extends BaseEntity {&#10;    &#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;appointment_id&quot;, nullable = false)&#10;    private Appointment appointment;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;doctor_id&quot;, nullable = false)&#10;    private Doctor doctor;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;patient_id&quot;, nullable = false)&#10;    private Patient patient;&#10;    &#10;    @NotBlank(message = &quot;Diagnosis is required&quot;)&#10;    @Column(name = &quot;diagnosis&quot;, nullable = false, columnDefinition = &quot;TEXT&quot;)&#10;    private String diagnosis;&#10;    &#10;    @Column(name = &quot;symptoms&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String symptoms;&#10;    &#10;    @Column(name = &quot;advice&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String advice;&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.common.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.NotBlank;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Table(name = &quot;prescriptions&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Prescription extends BaseEntity {&#10;    &#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;appointment_id&quot;, nullable = false)&#10;    private CommonAppointment appointment;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;doctor_id&quot;, nullable = false)&#10;    private Doctor doctor;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;patient_id&quot;, nullable = false)&#10;    private Patient patient;&#10;    &#10;    @NotBlank(message = &quot;Diagnosis is required&quot;)&#10;    @Column(name = &quot;diagnosis&quot;, nullable = false, columnDefinition = &quot;TEXT&quot;)&#10;    private String diagnosis;&#10;    &#10;    @Column(name = &quot;symptoms&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String symptoms;&#10;    &#10;    @Column(name = &quot;advice&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String advice;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/PrescriptionMedicine.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/PrescriptionMedicine.java" />
              <option name="originalContent" value="package com.docmate.common.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Table(name = &quot;prescription_medicines&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class PrescriptionMedicine extends BaseEntity {&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;prescription_id&quot;, nullable = false)&#10;    private Prescription prescription;&#10;    &#10;    @NotBlank(message = &quot;Medicine name is required&quot;)&#10;    @Size(max = 200, message = &quot;Medicine name must not exceed 200 characters&quot;)&#10;    @Column(name = &quot;name&quot;, nullable = false, length = 200)&#10;    private String name;&#10;    &#10;    @NotBlank(message = &quot;Dosage is required&quot;)&#10;    @Size(max = 100, message = &quot;Dosage must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;dosage&quot;, nullable = false, length = 100)&#10;    private String dosage;&#10;    &#10;    @NotBlank(message = &quot;Frequency is required&quot;)&#10;    @Size(max = 100, message = &quot;Frequency must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;frequency&quot;, nullable = false, length = 100)&#10;    private String frequency;&#10;    &#10;    @NotBlank(message = &quot;Duration is required&quot;)&#10;    @Size(max = 100, message = &quot;Duration must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;duration&quot;, nullable = false, length = 100)&#10;    private String duration;&#10;    &#10;    @Column(name = &quot;instructions&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String instructions;&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.common.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Table(name = &quot;prescription_items&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class PrescriptionMedicine extends BaseEntity {&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;prescription_id&quot;, nullable = false)&#10;    private Prescription prescription;&#10;    &#10;    @NotBlank(message = &quot;Medicine name is required&quot;)&#10;    @Size(max = 200, message = &quot;Medicine name must not exceed 200 characters&quot;)&#10;    @Column(name = &quot;name&quot;, nullable = false, length = 200)&#10;    private String name;&#10;    &#10;    @NotBlank(message = &quot;Dosage is required&quot;)&#10;    @Size(max = 100, message = &quot;Dosage must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;dosage&quot;, nullable = false, length = 100)&#10;    private String dosage;&#10;    &#10;    @NotBlank(message = &quot;Frequency is required&quot;)&#10;    @Size(max = 100, message = &quot;Frequency must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;frequency&quot;, nullable = false, length = 100)&#10;    private String frequency;&#10;    &#10;    @NotBlank(message = &quot;Duration is required&quot;)&#10;    @Size(max = 100, message = &quot;Duration must not exceed 100 characters&quot;)&#10;    @Column(name = &quot;duration&quot;, nullable = false, length = 100)&#10;    private String duration;&#10;    &#10;    @Column(name = &quot;instructions&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String instructions;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Review.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/entity/Review.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.docmate.common.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Max;&#10;import jakarta.validation.constraints.Min;&#10;import jakarta.validation.constraints.NotNull;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Table(name = &quot;reviews&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Review extends BaseEntity {&#10;    &#10;    @OneToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;appointment_id&quot;)&#10;    private CommonAppointment appointment;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;doctor_id&quot;, nullable = false)&#10;    private Doctor doctor;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;patient_id&quot;, nullable = false)&#10;    private Patient patient;&#10;    &#10;    @NotNull(message = &quot;Rating is required&quot;)&#10;    @Min(value = 1, message = &quot;Rating must be at least 1&quot;)&#10;    @Max(value = 5, message = &quot;Rating must not exceed 5&quot;)&#10;    @Column(name = &quot;rating&quot;, nullable = false)&#10;    private Integer rating;&#10;    &#10;    @Column(name = &quot;comment&quot;, columnDefinition = &quot;TEXT&quot;)&#10;    private String comment;&#10;    &#10;    @Builder.Default&#10;    @Column(name = &quot;is_flagged&quot;)&#10;    private Boolean isFlagged = false;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/enums/AppointmentStatus.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/enums/AppointmentStatus.java" />
              <option name="originalContent" value="package com.docmate.common.enums;&#10;&#10;public enum AppointmentStatus {&#10;    PENDING,&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.docmate.common.enums;&#10;&#10;public enum AppointmentStatus {&#10;    PENDING,&#10;    SCHEDULED,&#10;    CONFIRMED,&#10;    IN_PROGRESS,&#10;    COMPLETED,&#10;    CANCELLED,&#10;    NO_SHOW&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/enums/NotificationType.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/enums/NotificationType.java" />
              <option name="originalContent" value="package com.docmate.common.enums;&#10;&#10;public enum NotificationType {&#10;    EMAIL,&#10;    SMS,&#10;    PUSH_NOTIFICATION,&#10;    IN_APP_NOTIFICATION,&#10;    APPOINTMENT_REMINDER,&#10;    APPOINTMENT_CONFIRMATION,&#10;    APPOINTMENT_CANCELLATION,&#10;&#10;" />
              <option name="updatedContent" value="package com.docmate.common.enums;&#10;&#10;public enum NotificationType {&#10;    EMAIL,&#10;    SMS,&#10;    PUSH_NOTIFICATION,&#10;    IN_APP_NOTIFICATION,&#10;    APPOINTMENT_REMINDER,&#10;    APPOINTMENT_CONFIRMATION,&#10;    APPOINTMENT_CANCELLATION,&#10;    APPOINTMENT_SCHEDULED,&#10;    PRESCRIPTION_READY,&#10;    PAYMENT_CONFIRMATION,&#10;    PAYMENT_FAILED,&#10;    PAYMENT_RECEIVED,&#10;    WELCOME_MESSAGE,&#10;    PASSWORD_RESET,&#10;    EMAIL_VERIFICATION,&#10;    SYSTEM_ALERT,&#10;    DOCTOR_APPROVED,&#10;    DOCTOR_REJECTED&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/exception/BusinessException.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/exception/BusinessException.java" />
              <option name="updatedContent" value="package com.docmate.common.exception;&#10;&#10;import lombok.Getter;&#10;&#10;@Getter&#10;public class BusinessException extends RuntimeException {&#10;    &#10;    private final String code;&#10;    private final int status;&#10;    &#10;    public BusinessException(String message) {&#10;        super(message);&#10;        this.code = &quot;BUSINESS_ERROR&quot;;&#10;        this.status = 400;&#10;    }&#10;    &#10;    public BusinessException(String code, String message) {&#10;        super(message);&#10;        this.code = code;&#10;        this.status = 400;&#10;    }&#10;    &#10;    public BusinessException(String code, String message, int status) {&#10;        super(message);&#10;        this.code = code;&#10;        this.status = status;&#10;    }&#10;    &#10;    public BusinessException(String message, Throwable cause) {&#10;        super(message, cause);&#10;        this.code = &quot;BUSINESS_ERROR&quot;;&#10;        this.status = 400;&#10;    }&#10;    &#10;    public BusinessException(String code, String message, Throwable cause) {&#10;        super(message, cause);&#10;        this.code = code;&#10;        this.status = 400;&#10;    }&#10;    &#10;    public BusinessException(String code, String message, int status, Throwable cause) {&#10;        super(message, cause);&#10;        this.code = code;&#10;        this.status = status;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/common/src/main/java/com/docmate/common/exception/GlobalExceptionHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common/src/main/java/com/docmate/common/exception/GlobalExceptionHandler.java" />
              <option name="updatedContent" value="package com.docmate.common.exception;&#10;&#10;import com.docmate.common.dto.response.ApiResponse;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.validation.FieldError;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.RestControllerAdvice;&#10;import org.springframework.web.context.request.WebRequest;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;@Slf4j&#10;@RestControllerAdvice&#10;public class GlobalExceptionHandler {&#10;    &#10;    @ExceptionHandler(BusinessException.class)&#10;    public ResponseEntity&lt;ApiResponse&lt;Object&gt;&gt; handleBusinessException(BusinessException ex, WebRequest request) {&#10;        log.warn(&quot;Business exception: {} - {}&quot;, ex.getCode(), ex.getMessage());&#10;        &#10;        ApiResponse&lt;Object&gt; response = ApiResponse.error(ex.getMessage(), ex.getStatus());&#10;        response.setPath(request.getDescription(false));&#10;        &#10;        return ResponseEntity.status(ex.getStatus()).body(response);&#10;    }&#10;    &#10;    @ExceptionHandler(MethodArgumentNotValidException.class)&#10;    public ResponseEntity&lt;ApiResponse&lt;Object&gt;&gt; handleValidationExceptions(MethodArgumentNotValidException ex, WebRequest request) {&#10;        Map&lt;String, String&gt; errors = new HashMap&lt;&gt;();&#10;        ex.getBindingResult().getAllErrors().forEach((error) -&gt; {&#10;            String fieldName = ((FieldError) error).getField();&#10;            String errorMessage = error.getDefaultMessage();&#10;            errors.put(fieldName, errorMessage);&#10;        });&#10;        &#10;        ApiResponse&lt;Object&gt; response = ApiResponse.error(&quot;Validation failed&quot;, HttpStatus.BAD_REQUEST.value());&#10;        response.setData(errors);&#10;        response.setPath(request.getDescription(false));&#10;        &#10;        return ResponseEntity.badRequest().body(response);&#10;    }&#10;    &#10;    @ExceptionHandler(Exception.class)&#10;    public ResponseEntity&lt;ApiResponse&lt;Object&gt;&gt; handleGlobalException(Exception ex, WebRequest request) {&#10;        log.error(&quot;Unexpected error: &quot;, ex);&#10;        &#10;        ApiResponse&lt;Object&gt; response = ApiResponse.error(&quot;An unexpected error occurred&quot;, HttpStatus.INTERNAL_SERVER_ERROR.value());&#10;        response.setPath(request.getDescription(false));&#10;        &#10;        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: db-migration&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  liquibase:&#10;    change-log: classpath:db/changelog/db.changelog-master.xml&#10;    default-schema: public&#10;    drop-first: false&#10;    enabled: true  # Enable at runtime to actually run migrations&#10;&#10;logging:&#10;  level:&#10;    liquibase: INFO&#10;    com.docmate.migration: INFO&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: db-migration&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  liquibase:&#10;    change-log: classpath:db/changelog/db.changelog-master.xml&#10;    default-schema: public&#10;    drop-first: true  # This will drop all tables and start fresh&#10;    enabled: true&#10;&#10;logging:&#10;  level:&#10;    liquibase: INFO&#10;    com.docmate.migration: INFO&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/001-auth-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/001-auth-tables.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-users-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create core users table for authentication&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;users&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;full_name&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;email&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;phone&quot; type=&quot;VARCHAR(15)&quot;/&gt;&#10;            &lt;column name=&quot;password_hash&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;role&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;            &lt;column name=&quot;password_hash&quot; type=&quot;TEXT&quot;&gt;&#10;            &lt;column name=&quot;profile_picture&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;email_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;&gt;&#10;            &lt;column name=&quot;role&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;            &lt;column name=&quot;phone_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;            &lt;column name=&quot;used&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-refresh-tokens-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create refresh tokens table for JWT management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;refresh_tokens&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;expires_at&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;revoked&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-verification-tokens-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create verification tokens table for email/phone verification&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;verification_tokens&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token_type&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;expires_at&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;used&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-refresh-tokens-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create refresh tokens table for JWT management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;refresh_tokens&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;expires_at&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;revoked&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-verification-tokens-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create verification tokens table for email/phone verification&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;verification_tokens&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token_type&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;            &lt;column name=&quot;password_hash&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;expires_at&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;            &lt;column name=&quot;role&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;used&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;            &lt;column name=&quot;profile_picture&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;email_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-refresh-tokens-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create refresh tokens table for JWT management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;refresh_tokens&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;expires_at&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;revoked&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-verification-tokens-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create verification tokens table for email/phone verification&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;verification_tokens&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;email&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;phone&quot; type=&quot;VARCHAR(15)&quot;/&gt;&#10;            &lt;column name=&quot;password_hash&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;role&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;profile_picture&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;email_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;phone_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-refresh-tokens-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create refresh tokens table for JWT management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;refresh_tokens&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;expires_at&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;revoked&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-verification-tokens-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create verification tokens table for email/phone verification&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;verification_tokens&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;token_type&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;expires_at&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;used&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-docmate-users-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create docmate_users table for authentication&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;docmate_users&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;BIGINT&quot; autoIncrement=&quot;true&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;full_name&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;email&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;phone&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;password_hash&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;role&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;license_number&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;experience&quot; type=&quot;INTEGER&quot;/&gt;&#10;            &lt;column name=&quot;bio&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;fee&quot; type=&quot;INTEGER&quot;/&gt;&#10;            &lt;column name=&quot;video_consultation_enabled&quot; type=&quot;BOOLEAN&quot;/&gt;&#10;            &lt;column name=&quot;tele_consultation_enabled&quot; type=&quot;BOOLEAN&quot;/&gt;&#10;            &lt;column name=&quot;emergency_available&quot; type=&quot;BOOLEAN&quot;/&gt;&#10;            &lt;column name=&quot;approved&quot; type=&quot;BOOLEAN&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/002-user-management-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/002-user-management-tables.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-users-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create core users table for unified user management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;users&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;full_name&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;email&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;phone&quot; type=&quot;VARCHAR(15)&quot;/&gt;&#10;            &lt;column name=&quot;password_hash&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;role&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;/&gt;&#10;            &lt;column name=&quot;profile_picture&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;email_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;phone_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-addresses-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create addresses table for location data&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;addresses&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;address_line1&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;address_line2&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;city&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;state&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;postal_code&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-specializations-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create specializations table for medical specialties&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;specializations&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;name&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;description&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-patients-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create patients table linked to users&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;patients&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;date_of_birth&quot; type=&quot;DATE&quot;/&gt;&#10;            &lt;column name=&quot;gender&quot; type=&quot;VARCHAR(10)&quot;/&gt;&#10;            &lt;column name=&quot;blood_type&quot; type=&quot;VARCHAR(5)&quot;/&gt;&#10;            &lt;column name=&quot;height&quot; type=&quot;VARCHAR(10)&quot;/&gt;&#10;            &lt;column name=&quot;weight&quot; type=&quot;VARCHAR(10)&quot;/&gt;&#10;            &lt;column name=&quot;address_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-doctors-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create doctors table linked to users&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;doctors&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;specialization_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;license_number&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;experience_years&quot; type=&quot;INTEGER&quot; defaultValueNumeric=&quot;0&quot;/&gt;&#10;            &lt;column name=&quot;fee_per_consultation&quot; type=&quot;DECIMAL(10,2)&quot; defaultValueNumeric=&quot;0&quot;/&gt;&#10;            &lt;column name=&quot;bio&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;video_consultation_enabled&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;tele_consultation_enabled&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;emergency_available&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;is_approved&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;/&gt;&#10;            &lt;column name=&quot;clinic_name&quot; type=&quot;VARCHAR(200)&quot;/&gt;&#10;            &lt;column name=&quot;primary_address_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;average_rating&quot; type=&quot;DECIMAL(3,2)&quot; defaultValueNumeric=&quot;0&quot;/&gt;&#10;            &lt;column name=&quot;review_count&quot; type=&quot;INTEGER&quot; defaultValueNumeric=&quot;0&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-users-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create core users table for unified user management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;users&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;full_name&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;email&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;phone&quot; type=&quot;VARCHAR(15)&quot;/&gt;&#10;            &lt;column name=&quot;password_hash&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;role&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;/&gt;&#10;            &lt;column name=&quot;profile_picture&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;email_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;phone_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-addresses-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create addresses table for location data&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;addresses&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;address_line1&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;address_line2&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;city&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;state&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;postal_code&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;zip_code&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;country&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;latitude&quot; type=&quot;DECIMAL(10,8)&quot;/&gt;&#10;            &lt;column name=&quot;longitude&quot; type=&quot;DECIMAL(11,8)&quot;/&gt;&#10;            &lt;column name=&quot;is_primary&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-specializations-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create specializations table for medical specialties&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;specializations&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;name&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;description&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-patients-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create patients table linked to users&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;patients&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;date_of_birth&quot; type=&quot;DATE&quot;/&gt;&#10;            &lt;column name=&quot;gender&quot; type=&quot;VARCHAR(10)&quot;/&gt;&#10;            &lt;column name=&quot;blood_type&quot; type=&quot;VARCHAR(5)&quot;/&gt;&#10;            &lt;column name=&quot;height&quot; type=&quot;VARCHAR(10)&quot;/&gt;&#10;            &lt;column name=&quot;weight&quot; type=&quot;VARCHAR(10)&quot;/&gt;&#10;            &lt;column name=&quot;address_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-doctors-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create doctors table linked to users&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;doctors&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;specialization_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;license_number&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;experience_years&quot; type=&quot;INTEGER&quot; defaultValueNumeric=&quot;0&quot;/&gt;&#10;            &lt;column name=&quot;fee_per_consultation&quot; type=&quot;DECIMAL(10,2)&quot; defaultValueNumeric=&quot;0&quot;/&gt;&#10;            &lt;column name=&quot;bio&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;video_consultation_enabled&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;tele_consultation_enabled&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;emergency_available&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;is_approved&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;/&gt;&#10;            &lt;column name=&quot;clinic_name&quot; type=&quot;VARCHAR(200)&quot;/&gt;&#10;            &lt;column name=&quot;primary_address_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;average_rating&quot; type=&quot;DECIMAL(3,2)&quot; defaultValueNumeric=&quot;0&quot;/&gt;&#10;            &lt;column name=&quot;review_count&quot; type=&quot;INTEGER&quot; defaultValueNumeric=&quot;0&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/003-appointment-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/003-appointment-tables.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;003-create-appointments-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create appointments table for booking management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;appointments&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;patient_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_date_time&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;SCHEDULED&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;consultation_mode&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;amount&quot; type=&quot;DECIMAL(10,2)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;currency&quot; type=&quot;VARCHAR(3)&quot; defaultValue=&quot;USD&quot;&gt;&#10;            &lt;column name=&quot;consultation_fee&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;            &lt;column name=&quot;symptoms&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;reason_for_visit&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;003-create-payments-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create payments table for transaction management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;payments&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;amount&quot; type=&quot;DECIMAL(10,2)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;currency&quot; type=&quot;VARCHAR(3)&quot; defaultValue=&quot;USD&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_method&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;PENDING&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;stripe_payment_intent_id&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;stripe_charge_id&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;payment_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;failure_reason&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;refund_amount&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;refund_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;receipt_url&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_method&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;PENDING&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;stripe_payment_intent_id&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;stripe_charge_id&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;payment_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;failure_reason&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;refund_amount&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;refund_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;receipt_url&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;&#10;    &lt;changeSet id=&quot;003-create-payments-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create payments table for transaction management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;payments&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;consultation_fee&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;reason_for_visit&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;symptoms&quot; type=&quot;TEXT&quot;/&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_method&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;PENDING&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;stripe_payment_intent_id&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;stripe_charge_id&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;payment_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;failure_reason&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;refund_amount&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;refund_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;receipt_url&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;&#10;    &lt;changeSet id=&quot;003-create-payments-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create payments table for transaction management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;payments&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;amount&quot; type=&quot;DECIMAL(10,2)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;currency&quot; type=&quot;VARCHAR(3)&quot; defaultValue=&quot;USD&quot;&gt;&#10;            &lt;column name=&quot;consultation_fee&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;reason_for_visit&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;symptoms&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;notes&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;meeting_link&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;003-create-payments-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create payments table for transaction management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;payments&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;amount&quot; type=&quot;DECIMAL(10,2)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;currency&quot; type=&quot;VARCHAR(3)&quot; defaultValue=&quot;USD&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_method&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;PENDING&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;stripe_payment_intent_id&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;stripe_charge_id&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;payment_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;failure_reason&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;refund_amount&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;refund_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;receipt_url&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;003-create-appointments-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create appointments table for booking management&lt;/comment&gt;&#10;        &lt;createTable tableName=&quot;appointments&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;patient_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_date_time&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;mode&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;PENDING&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_status&quot; type=&quot;VARCHAR(20)&quot;/&gt;&#10;            &lt;column name=&quot;notes&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;cancellation_reason&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;meeting_link&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/004-prescription-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/004-prescription-tables.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot; &#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog &#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;004-create-prescriptions-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;prescriptions&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;patient_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;prescription_number&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;ACTIVE&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;issue_date&quot; type=&quot;DATE&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;expiry_date&quot; type=&quot;DATE&quot;/&gt;&#10;            &lt;column name=&quot;diagnosis&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;symptoms&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;notes&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;follow_up_instructions&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;is_digital_signature&quot; type=&quot;BOOLEAN&quot; defaultValue=&quot;true&quot;/&gt;&#10;            &lt;column name=&quot;pharmacy_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;dispensed_at&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;dispensed_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;004-create-prescription-items-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;prescription_items&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;prescription_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;medication_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;medication_name&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;generic_name&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;strength&quot; type=&quot;VARCHAR(100)&quot;/&gt;&#10;            &lt;column name=&quot;dosage_form&quot; type=&quot;VARCHAR(50)&quot;/&gt;&#10;            &lt;column name=&quot;quantity&quot; type=&quot;INTEGER&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;frequency&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;duration_days&quot; type=&quot;INTEGER&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;dosage_instructions&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;special_instructions&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;unit_price&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;total_price&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;is_substitute_allowed&quot; type=&quot;BOOLEAN&quot; defaultValue=&quot;true&quot;/&gt;&#10;            &lt;column name=&quot;refill_count&quot; type=&quot;INTEGER&quot; defaultValue=&quot;0&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;004-add-prescription-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_prescription_items_prescription&quot;&#10;                                 baseTableName=&quot;prescription_items&quot;&#10;                                 baseColumnNames=&quot;prescription_id&quot;&#10;                                 referencedTableName=&quot;prescriptions&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;004-add-prescription-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;prescriptions&quot; indexName=&quot;idx_prescriptions_appointment_id&quot;&gt;&#10;            &lt;column name=&quot;appointment_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;prescriptions&quot; indexName=&quot;idx_prescriptions_patient_id&quot;&gt;&#10;            &lt;column name=&quot;patient_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;prescriptions&quot; indexName=&quot;idx_prescriptions_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;prescriptions&quot; indexName=&quot;idx_prescriptions_prescription_number&quot;&gt;&#10;            &lt;column name=&quot;prescription_number&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;prescription_items&quot; indexName=&quot;idx_prescription_items_prescription_id&quot;&gt;&#10;            &lt;column name=&quot;prescription_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;prescription_items&quot; indexName=&quot;idx_prescription_items_medication_id&quot;&gt;&#10;            &lt;column name=&quot;medication_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/005-payment-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/005-payment-tables.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot; &#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog &#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;005-create-payments-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;payments&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;amount&quot; type=&quot;DECIMAL(10,2)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;PENDING&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_method&quot; type=&quot;VARCHAR(50)&quot;/&gt;&#10;            &lt;column name=&quot;transaction_id&quot; type=&quot;VARCHAR(200)&quot;/&gt;&#10;            &lt;column name=&quot;stripe_payment_intent_id&quot; type=&quot;VARCHAR(200)&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;005-add-payment-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_payments_appointment&quot;&#10;                                 baseTableName=&quot;payments&quot;&#10;                                 baseColumnNames=&quot;appointment_id&quot;&#10;                                 referencedTableName=&quot;appointments&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;005-add-payment-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;payments&quot; indexName=&quot;idx_payments_appointment_id&quot;&gt;&#10;            &lt;column name=&quot;appointment_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;payments&quot; indexName=&quot;idx_payments_status&quot;&gt;&#10;            &lt;column name=&quot;status&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;payments&quot; indexName=&quot;idx_payments_transaction_id&quot;&gt;&#10;            &lt;column name=&quot;transaction_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/006-review-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/006-review-tables.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;006-create-reviews-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;reviews&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;patient_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;rating&quot; type=&quot;INTEGER&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;comment&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;is_flagged&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;006-add-review-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_reviews_appointment&quot;&#10;                                 baseTableName=&quot;reviews&quot;&#10;                                 baseColumnNames=&quot;appointment_id&quot;&#10;                                 referencedTableName=&quot;appointments&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_reviews_doctor&quot;&#10;                                 baseTableName=&quot;reviews&quot;&#10;                                 baseColumnNames=&quot;doctor_id&quot;&#10;                                 referencedTableName=&quot;doctors&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_reviews_patient&quot;&#10;                                 baseTableName=&quot;reviews&quot;&#10;                                 baseColumnNames=&quot;patient_id&quot;&#10;                                 referencedTableName=&quot;patients&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;006-add-review-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;reviews&quot; indexName=&quot;idx_reviews_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;reviews&quot; indexName=&quot;idx_reviews_patient_id&quot;&gt;&#10;            &lt;column name=&quot;patient_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;reviews&quot; indexName=&quot;idx_reviews_rating&quot;&gt;&#10;            &lt;column name=&quot;rating&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;006-add-review-constraints&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;sql&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;006-create-reviews-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;reviews&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;patient_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;rating&quot; type=&quot;INTEGER&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;comment&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;is_flagged&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;006-add-review-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_reviews_appointment&quot;&#10;                                 baseTableName=&quot;reviews&quot;&#10;                                 baseColumnNames=&quot;appointment_id&quot;&#10;                                 referencedTableName=&quot;appointments&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_reviews_doctor&quot;&#10;                                 baseTableName=&quot;reviews&quot;&#10;                                 baseColumnNames=&quot;doctor_id&quot;&#10;                                 referencedTableName=&quot;doctors&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_reviews_patient&quot;&#10;                                 baseTableName=&quot;reviews&quot;&#10;                                 baseColumnNames=&quot;patient_id&quot;&#10;                                 referencedTableName=&quot;patients&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;006-add-review-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;reviews&quot; indexName=&quot;idx_reviews_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;reviews&quot; indexName=&quot;idx_reviews_patient_id&quot;&gt;&#10;            &lt;column name=&quot;patient_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;reviews&quot; indexName=&quot;idx_reviews_rating&quot;&gt;&#10;            &lt;column name=&quot;rating&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;006-add-review-constraints&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;sql&gt;&#10;            &lt;![CDATA[&#10;            ALTER TABLE reviews ADD CONSTRAINT chk_reviews_rating_range CHECK (rating &gt;= 1 AND rating &lt;= 5);&#10;            ]]&gt;&#10;        &lt;/sql&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/007-notification-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/007-notification-tables.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;007-create-notifications-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;notifications&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;title&quot; type=&quot;VARCHAR(200)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;message&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;type&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;is_read&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;data&quot; type=&quot;JSONB&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;007-add-notification-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_notifications_user&quot;&#10;                                 baseTableName=&quot;notifications&quot;&#10;                                 baseColumnNames=&quot;user_id&quot;&#10;                                 referencedTableName=&quot;users&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;007-add-notification-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;notifications&quot; indexName=&quot;idx_notifications_user_id&quot;&gt;&#10;            &lt;column name=&quot;user_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;notifications&quot; indexName=&quot;idx_notifications_type&quot;&gt;&#10;            &lt;column name=&quot;type&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;notifications&quot; indexName=&quot;idx_notifications_is_read&quot;&gt;&#10;            &lt;column name=&quot;is_read&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;notifications&quot; indexName=&quot;idx_notifications_created_date&quot;&gt;&#10;            &lt;column name=&quot;created_date&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/008-audit-log-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/008-audit-log-tables.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot; &#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog &#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;008-create-audit-log-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;audit_log&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;action&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;entity_type&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;entity_id&quot; type=&quot;VARCHAR(100)&quot;/&gt;&#10;            &lt;column name=&quot;old_values&quot; type=&quot;JSONB&quot;/&gt;&#10;            &lt;column name=&quot;new_values&quot; type=&quot;JSONB&quot;/&gt;&#10;            &lt;column name=&quot;ip_address&quot; type=&quot;VARCHAR(45)&quot;/&gt;&#10;            &lt;column name=&quot;user_agent&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;008-add-audit-log-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_audit_log_user&quot;&#10;                                 baseTableName=&quot;audit_log&quot;&#10;                                 baseColumnNames=&quot;user_id&quot;&#10;                                 referencedTableName=&quot;users&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;SET NULL&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;008-add-audit-log-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;audit_log&quot; indexName=&quot;idx_audit_log_user_id&quot;&gt;&#10;            &lt;column name=&quot;user_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;audit_log&quot; indexName=&quot;idx_audit_log_action&quot;&gt;&#10;            &lt;column name=&quot;action&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;audit_log&quot; indexName=&quot;idx_audit_log_entity_type&quot;&gt;&#10;            &lt;column name=&quot;entity_type&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;audit_log&quot; indexName=&quot;idx_audit_log_entity_id&quot;&gt;&#10;            &lt;column name=&quot;entity_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;audit_log&quot; indexName=&quot;idx_audit_log_created_at&quot;&gt;&#10;            &lt;column name=&quot;created_at&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/009-admin-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/009-admin-tables.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot; &#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog &#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;009-create-admins-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;admins&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;permissions&quot; type=&quot;JSONB&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;009-add-admin-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_admins_user&quot;&#10;                                 baseTableName=&quot;admins&quot;&#10;                                 baseColumnNames=&quot;id&quot;&#10;                                 referencedTableName=&quot;users&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/010-patient-medical-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/010-patient-medical-tables.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot; &#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog &#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;010-create-patient-medical-history-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;patient_medical_history&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;patient_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;allergies&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;chronic_conditions&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;current_medications&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;previous_surgeries&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;family_history&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;emergency_contact_name&quot; type=&quot;VARCHAR(100)&quot;/&gt;&#10;            &lt;column name=&quot;emergency_contact_phone&quot; type=&quot;VARCHAR(15)&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;010-create-patient-reports-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;patient_reports&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;patient_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;title&quot; type=&quot;VARCHAR(200)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;description&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;test_date&quot; type=&quot;DATE&quot;/&gt;&#10;            &lt;column name=&quot;file_url&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;file_name&quot; type=&quot;VARCHAR(500)&quot;/&gt;&#10;            &lt;column name=&quot;file_type&quot; type=&quot;VARCHAR(100)&quot;/&gt;&#10;            &lt;column name=&quot;file_size&quot; type=&quot;BIGINT&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;010-add-patient-medical-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_patient_medical_history_patient&quot;&#10;                                 baseTableName=&quot;patient_medical_history&quot;&#10;                                 baseColumnNames=&quot;patient_id&quot;&#10;                                 referencedTableName=&quot;patients&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;        &#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_patient_reports_patient&quot;&#10;                                 baseTableName=&quot;patient_reports&quot;&#10;                                 baseColumnNames=&quot;patient_id&quot;&#10;                                 referencedTableName=&quot;patients&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;010-add-patient-medical-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;patient_medical_history&quot; indexName=&quot;idx_patient_medical_history_patient_id&quot;&gt;&#10;            &lt;column name=&quot;patient_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;patient_reports&quot; indexName=&quot;idx_patient_reports_patient_id&quot;&gt;&#10;            &lt;column name=&quot;patient_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;patient_reports&quot; indexName=&quot;idx_patient_reports_test_date&quot;&gt;&#10;            &lt;column name=&quot;test_date&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/011-doctor-junction-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/011-doctor-junction-tables.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot; &#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog &#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;011-create-conditions-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;conditions&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;name&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;description&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;011-create-doctor-specializations-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;doctor_specializations&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;specialization_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;        &lt;addPrimaryKey tableName=&quot;doctor_specializations&quot; columnNames=&quot;doctor_id,specialization_id&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;011-create-doctor-conditions-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;doctor_conditions&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;condition_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;        &lt;addPrimaryKey tableName=&quot;doctor_conditions&quot; columnNames=&quot;doctor_id,condition_id&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;011-add-junction-table-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_doctor_specializations_doctor&quot;&#10;                                 baseTableName=&quot;doctor_specializations&quot;&#10;                                 baseColumnNames=&quot;doctor_id&quot;&#10;                                 referencedTableName=&quot;doctors&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;        &#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_doctor_specializations_specialization&quot;&#10;                                 baseTableName=&quot;doctor_specializations&quot;&#10;                                 baseColumnNames=&quot;specialization_id&quot;&#10;                                 referencedTableName=&quot;specializations&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;        &#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_doctor_conditions_doctor&quot;&#10;                                 baseTableName=&quot;doctor_conditions&quot;&#10;                                 baseColumnNames=&quot;doctor_id&quot;&#10;                                 referencedTableName=&quot;doctors&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;        &#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_doctor_conditions_condition&quot;&#10;                                 baseTableName=&quot;doctor_conditions&quot;&#10;                                 baseColumnNames=&quot;condition_id&quot;&#10;                                 referencedTableName=&quot;conditions&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/012-doctor-verification-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/012-doctor-verification-tables.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot; &#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog &#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;012-create-doctor-verification-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;doctor_verification_documents&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;license_document_url&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;id_document_url&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;verification_status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;PENDING&quot;/&gt;&#10;            &lt;column name=&quot;verified_by&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;verified_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;rejection_reason&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;012-add-verification-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_doctor_verification_doctor&quot;&#10;                                 baseTableName=&quot;doctor_verification_documents&quot;&#10;                                 baseColumnNames=&quot;doctor_id&quot;&#10;                                 referencedTableName=&quot;doctors&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;        &#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_doctor_verification_verified_by&quot;&#10;                                 baseTableName=&quot;doctor_verification_documents&quot;&#10;                                 baseColumnNames=&quot;verified_by&quot;&#10;                                 referencedTableName=&quot;users&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;SET NULL&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;012-add-verification-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;doctor_verification_documents&quot; indexName=&quot;idx_doctor_verification_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctor_verification_documents&quot; indexName=&quot;idx_doctor_verification_status&quot;&gt;&#10;            &lt;column name=&quot;verification_status&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/013-doctor-availability-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/013-doctor-availability-tables.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot; &#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog &#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;013-create-doctor-adhoc-availability-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;doctor_adhoc_availability&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;date&quot; type=&quot;DATE&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;start_time&quot; type=&quot;TIME&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;end_time&quot; type=&quot;TIME&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;capacity&quot; type=&quot;INTEGER&quot; defaultValueNumeric=&quot;1&quot;/&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;013-create-doctor-recurring-availability-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;doctor_recurring_availability&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;day_of_week&quot; type=&quot;VARCHAR(10)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;start_time&quot; type=&quot;TIME&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;end_time&quot; type=&quot;TIME&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;capacity&quot; type=&quot;INTEGER&quot; defaultValueNumeric=&quot;1&quot;/&gt;&#10;            &lt;column name=&quot;is_active&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;013-add-availability-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_doctor_adhoc_availability_doctor&quot;&#10;                                 baseTableName=&quot;doctor_adhoc_availability&quot;&#10;                                 baseColumnNames=&quot;doctor_id&quot;&#10;                                 referencedTableName=&quot;doctors&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;        &#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_doctor_recurring_availability_doctor&quot;&#10;                                 baseTableName=&quot;doctor_recurring_availability&quot;&#10;                                 baseColumnNames=&quot;doctor_id&quot;&#10;                                 referencedTableName=&quot;doctors&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;013-add-availability-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;doctor_adhoc_availability&quot; indexName=&quot;idx_doctor_adhoc_availability_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctor_adhoc_availability&quot; indexName=&quot;idx_doctor_adhoc_availability_date&quot;&gt;&#10;            &lt;column name=&quot;date&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctor_recurring_availability&quot; indexName=&quot;idx_doctor_recurring_availability_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctor_recurring_availability&quot; indexName=&quot;idx_doctor_recurring_availability_day&quot;&gt;&#10;            &lt;column name=&quot;day_of_week&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/014-file-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/014-file-tables.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;014-create-files-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;files&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;original_name&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;stored_name&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;file_path&quot; type=&quot;VARCHAR(500)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;file_size&quot; type=&quot;BIGINT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;content_type&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;file_type&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;ACTIVE&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;uploaded_by&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;owner_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;owner_type&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;category&quot; type=&quot;VARCHAR(100)&quot;/&gt;&#10;            &lt;column name=&quot;description&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;is_public&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;download_count&quot; type=&quot;BIGINT&quot; defaultValueNumeric=&quot;0&quot;/&gt;&#10;            &lt;column name=&quot;last_accessed&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;checksum&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;storage_provider&quot; type=&quot;VARCHAR(50)&quot; defaultValue=&quot;LOCAL&quot;/&gt;&#10;            &lt;column name=&quot;external_url&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;expiry_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;014-add-files-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_files_uploaded_by&quot;&#10;                                 baseTableName=&quot;files&quot;&#10;                                 baseColumnNames=&quot;uploaded_by&quot;&#10;                                 referencedTableName=&quot;users&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;SET NULL&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;014-add-files-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;files&quot; indexName=&quot;idx_files_uploaded_by&quot;&gt;&#10;            &lt;column name=&quot;uploaded_by&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;files&quot; indexName=&quot;idx_files_owner&quot;&gt;&#10;            &lt;column name=&quot;owner_id&quot;/&gt;&#10;            &lt;column name=&quot;owner_type&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;files&quot; indexName=&quot;idx_files_file_type&quot;&gt;&#10;            &lt;column name=&quot;file_type&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;files&quot; indexName=&quot;idx_files_status&quot;&gt;&#10;            &lt;column name=&quot;status&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/015-availability-tables.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/015-availability-tables.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot; &#10;                   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#10;                   xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog &#10;                   http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;015-create-doctor-availability-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;doctor_availability&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;day_of_week&quot; type=&quot;VARCHAR(10)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;start_time&quot; type=&quot;TIME&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;end_time&quot; type=&quot;TIME&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;capacity&quot; type=&quot;INTEGER&quot; defaultValueNumeric=&quot;1&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;slot_duration_minutes&quot; type=&quot;INTEGER&quot; defaultValueNumeric=&quot;30&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;AVAILABLE&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;is_recurring&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;effective_from&quot; type=&quot;DATE&quot;/&gt;&#10;            &lt;column name=&quot;effective_until&quot; type=&quot;DATE&quot;/&gt;&#10;            &lt;column name=&quot;notes&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;015-create-time-slots-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;time_slots&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;doctor_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;start_time&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;end_time&quot; type=&quot;TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;AVAILABLE&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;is_emergency_slot&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;/&gt;&#10;            &lt;column name=&quot;notes&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;blocked_reason&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;created_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_at&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;updated_by&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;015-add-availability-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_doctor_availability_doctor&quot;&#10;                                 baseTableName=&quot;doctor_availability&quot;&#10;                                 baseColumnNames=&quot;doctor_id&quot;&#10;                                 referencedTableName=&quot;doctors&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;        &#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_time_slots_doctor&quot;&#10;                                 baseTableName=&quot;time_slots&quot;&#10;                                 baseColumnNames=&quot;doctor_id&quot;&#10;                                 referencedTableName=&quot;doctors&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;CASCADE&quot;/&gt;&#10;        &#10;        &lt;addForeignKeyConstraint constraintName=&quot;fk_time_slots_appointment&quot;&#10;                                 baseTableName=&quot;time_slots&quot;&#10;                                 baseColumnNames=&quot;appointment_id&quot;&#10;                                 referencedTableName=&quot;appointments&quot;&#10;                                 referencedColumnNames=&quot;id&quot;&#10;                                 onDelete=&quot;SET NULL&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;015-add-availability-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;doctor_availability&quot; indexName=&quot;idx_doctor_availability_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctor_availability&quot; indexName=&quot;idx_doctor_availability_day&quot;&gt;&#10;            &lt;column name=&quot;day_of_week&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;time_slots&quot; indexName=&quot;idx_time_slots_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;time_slots&quot; indexName=&quot;idx_time_slots_status&quot;&gt;&#10;            &lt;column name=&quot;status&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;time_slots&quot; indexName=&quot;idx_time_slots_appointment_id&quot;&gt;&#10;            &lt;column name=&quot;appointment_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/020-create-indexes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/020-create-indexes.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;020-create-performance-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create indexes for optimal query performance&lt;/comment&gt;&#10;&#10;        &lt;!-- User authentication indexes --&gt;&#10;        &lt;createIndex tableName=&quot;users&quot; indexName=&quot;idx_users_email&quot;&gt;&#10;            &lt;column name=&quot;email&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;users&quot; indexName=&quot;idx_users_role&quot;&gt;&#10;            &lt;column name=&quot;role&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;users&quot; indexName=&quot;idx_users_active&quot;&gt;&#10;            &lt;column name=&quot;is_active&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;&#10;        &lt;!-- Patient/Doctor indexes - these tables use id that references users.id --&gt;&#10;        &lt;createIndex tableName=&quot;patients&quot; indexName=&quot;idx_patients_address_id&quot;&gt;&#10;            &lt;column name=&quot;address_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctors&quot; indexName=&quot;idx_doctors_specialization_id&quot;&gt;&#10;            &lt;column name=&quot;specialization_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctors&quot; indexName=&quot;idx_doctors_approved&quot;&gt;&#10;            &lt;column name=&quot;is_approved&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctors&quot; indexName=&quot;idx_doctors_active&quot;&gt;&#10;            &lt;column name=&quot;is_active&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;&#10;        &lt;!-- Appointment indexes --&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_patient_id&quot;&gt;&#10;            &lt;column name=&quot;patient_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_date_time&quot;&gt;&#10;            &lt;column name=&quot;appointment_date_time&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_status&quot;&gt;&#10;            &lt;column name=&quot;status&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;&#10;        &lt;!-- Payment indexes --&gt;&#10;        &lt;createIndex tableName=&quot;payments&quot; indexName=&quot;idx_payments_appointment_id&quot;&gt;&#10;            &lt;column name=&quot;appointment_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;payments&quot; indexName=&quot;idx_payments_status&quot;&gt;&#10;            &lt;column name=&quot;status&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;&#10;        &lt;!-- Note: refresh_tokens and verification_tokens tables are not created in our current schema --&gt;&#10;        &lt;!-- They would be part of the auth service if needed --&gt;&#10;            &lt;column name=&quot;appointment_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;payments&quot; indexName=&quot;idx_payments_status&quot;&gt;&#10;            &lt;column name=&quot;status&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;&#10;        &lt;!-- Note: refresh_tokens and verification_tokens tables are not created in our current schema --&gt;&#10;        &lt;!-- They would be part of the auth service if needed --&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;020-create-performance-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Create indexes for optimal query performance&lt;/comment&gt;&#10;&#10;        &lt;!-- User authentication indexes --&gt;&#10;        &lt;createIndex tableName=&quot;users&quot; indexName=&quot;idx_users_email&quot;&gt;&#10;            &lt;column name=&quot;email&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;users&quot; indexName=&quot;idx_users_role&quot;&gt;&#10;            &lt;column name=&quot;role&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;users&quot; indexName=&quot;idx_users_active&quot;&gt;&#10;            &lt;column name=&quot;is_active&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;&#10;        &lt;!-- Patient/Doctor indexes - these tables use id that references users.id --&gt;&#10;        &lt;createIndex tableName=&quot;patients&quot; indexName=&quot;idx_patients_address_id&quot;&gt;&#10;            &lt;column name=&quot;address_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctors&quot; indexName=&quot;idx_doctors_specialization_id&quot;&gt;&#10;            &lt;column name=&quot;specialization_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctors&quot; indexName=&quot;idx_doctors_approved&quot;&gt;&#10;            &lt;column name=&quot;is_approved&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctors&quot; indexName=&quot;idx_doctors_active&quot;&gt;&#10;            &lt;column name=&quot;is_active&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;&#10;        &lt;!-- Appointment indexes --&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_patient_id&quot;&gt;&#10;            &lt;column name=&quot;patient_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_doctor_id&quot;&gt;&#10;            &lt;column name=&quot;doctor_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_date_time&quot;&gt;&#10;            &lt;column name=&quot;appointment_date_time&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;appointments&quot; indexName=&quot;idx_appointments_status&quot;&gt;&#10;            &lt;column name=&quot;status&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;&#10;        &lt;!-- Note: Payment indexes are already created in 005-payment-tables.xml --&gt;&#10;        &lt;!-- Note: Other table indexes are created in their respective migration files --&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/030-foreign-keys.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/030-foreign-keys.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;030-add-foreign-keys-auth&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Add foreign key constraints for authentication tables&lt;/comment&gt;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;refresh_tokens&quot;&#10;                baseColumnNames=&quot;user_id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_refresh_tokens_user&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;verification_tokens&quot;&#10;                baseColumnNames=&quot;user_id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_verification_tokens_user&quot;/&gt;&#10;                baseTableName=&quot;refresh_tokens&quot;&#10;                baseColumnNames=&quot;user_id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_refresh_tokens_user&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;verification_tokens&quot;&#10;                baseColumnNames=&quot;user_id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_verification_tokens_user&quot;/&gt;&#10;                baseTableName=&quot;refresh_tokens&quot;&#10;                baseColumnNames=&quot;user_id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_refresh_tokens_user&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;verification_tokens&quot;&#10;                baseColumnNames=&quot;user_id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_verification_tokens_user&quot;/&gt;&#10;                baseTableName=&quot;refresh_tokens&quot;&#10;                baseColumnNames=&quot;user_id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_refresh_tokens_user&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;verification_tokens&quot;&#10;                baseColumnNames=&quot;user_id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_verification_tokens_user&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;030-add-foreign-keys-users&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Add foreign key constraints for user management tables&lt;/comment&gt;&#10;&#10;        &lt;!-- Patients table foreign keys --&gt;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;patients&quot;&#10;                baseColumnNames=&quot;id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_patients_user&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;patients&quot;&#10;                baseColumnNames=&quot;address_id&quot;&#10;                referencedTableName=&quot;addresses&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_patients_address&quot;/&gt;&#10;&#10;        &lt;!-- Doctors table foreign keys --&gt;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;doctors&quot;&#10;                baseColumnNames=&quot;id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_doctors_user&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;doctors&quot;&#10;                baseColumnNames=&quot;specialization_id&quot;&#10;                referencedTableName=&quot;specializations&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_doctors_specialization&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;doctors&quot;&#10;                baseColumnNames=&quot;primary_address_id&quot;&#10;                referencedTableName=&quot;addresses&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_doctors_primary_address&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;030-add-foreign-keys-appointments&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Add foreign key constraints for appointment tables&lt;/comment&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;appointments&quot;&#10;                baseColumnNames=&quot;patient_id&quot;&#10;                referencedTableName=&quot;patients&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_appointments_patient&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;appointments&quot;&#10;                baseColumnNames=&quot;doctor_id&quot;&#10;                referencedTableName=&quot;doctors&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_appointments_doctor&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;030-add-foreign-keys-auth&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Remove auth foreign keys as refresh_tokens and verification_tokens tables don't exist in current schema&lt;/comment&gt;&#10;        &lt;!-- These tables would be part of auth service implementation if needed --&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;030-add-foreign-keys-users&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Add foreign key constraints for user management tables&lt;/comment&gt;&#10;&#10;        &lt;!-- Patients table foreign keys --&gt;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;patients&quot;&#10;                baseColumnNames=&quot;id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_patients_user&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;patients&quot;&#10;                baseColumnNames=&quot;address_id&quot;&#10;                referencedTableName=&quot;addresses&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_patients_address&quot;/&gt;&#10;&#10;        &lt;!-- Doctors table foreign keys --&gt;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;doctors&quot;&#10;                baseColumnNames=&quot;id&quot;&#10;                referencedTableName=&quot;users&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_doctors_user&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;doctors&quot;&#10;                baseColumnNames=&quot;specialization_id&quot;&#10;                referencedTableName=&quot;specializations&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_doctors_specialization&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;doctors&quot;&#10;                baseColumnNames=&quot;primary_address_id&quot;&#10;                referencedTableName=&quot;addresses&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_doctors_primary_address&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;030-add-foreign-keys-appointments&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;comment&gt;Add foreign key constraints for appointment tables&lt;/comment&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;appointments&quot;&#10;                baseColumnNames=&quot;patient_id&quot;&#10;                referencedTableName=&quot;patients&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_appointments_patient&quot;/&gt;&#10;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;appointments&quot;&#10;                baseColumnNames=&quot;doctor_id&quot;&#10;                referencedTableName=&quot;doctors&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_appointments_doctor&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/db.changelog-master.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/db-migration/src/main/resources/db/changelog/db.changelog-master.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;!-- DocMate Platform - Centralized Database Migration Master File --&gt;&#10;    &lt;!-- This file orchestrates all database migrations for the entire platform --&gt;&#10;&#10;    &lt;!-- 1. Enable PostgreSQL Extensions --&gt;&#10;    &lt;include file=&quot;db/changelog/000-enable-extensions.xml&quot;/&gt;&#10;&#10;    &lt;!-- 2. Core Authentication &amp; User Management --&gt;&#10;    &lt;include file=&quot;db/changelog/001-auth-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/002-user-management-tables.xml&quot;/&gt;&#10;&#10;    &lt;!-- 3. Healthcare Core Tables --&gt;&#10;    &lt;include file=&quot;db/changelog/003-appointment-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/004-prescription-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/005-payment-tables.xml&quot;/&gt;&#10;&#10;    &lt;!-- 4. Supporting Services --&gt;&#10;    &lt;include file=&quot;db/changelog/006-review-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/007-notification-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/008-audit-log-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/009-admin-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/010-patient-medical-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/011-doctor-junction-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/012-doctor-verification-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/013-doctor-availability-tables.xml&quot;/&gt;&#10;&#10;&lt;/databaseChangeLog&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;!-- DocMate Platform - Centralized Database Migration Master File --&gt;&#10;    &lt;!-- This file orchestrates all database migrations for the entire platform --&gt;&#10;&#10;    &lt;!-- 1. Enable PostgreSQL Extensions --&gt;&#10;    &lt;include file=&quot;db/changelog/000-enable-extensions.xml&quot;/&gt;&#10;&#10;    &lt;!-- 2. Core Authentication &amp; User Management --&gt;&#10;    &lt;include file=&quot;db/changelog/001-auth-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/002-user-management-tables.xml&quot;/&gt;&#10;&#10;    &lt;!-- 3. Healthcare Core Tables --&gt;&#10;    &lt;include file=&quot;db/changelog/003-appointment-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/004-prescription-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/005-payment-tables.xml&quot;/&gt;&#10;&#10;    &lt;!-- 4. Supporting Services --&gt;&#10;    &lt;include file=&quot;db/changelog/006-review-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/007-notification-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/008-audit-log-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/009-admin-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/010-patient-medical-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/011-doctor-junction-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/012-doctor-verification-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/013-doctor-availability-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/014-file-tables.xml&quot;/&gt;&#10;    &lt;include file=&quot;db/changelog/015-availability-tables.xml&quot;/&gt;&#10;&#10;    &lt;!-- 5. Indexes and Performance --&gt;&#10;    &lt;include file=&quot;db/changelog/020-create-indexes.xml&quot;/&gt;&#10;&#10;    &lt;!-- 6. Foreign Key Constraints --&gt;&#10;    &lt;include file=&quot;db/changelog/030-foreign-keys.xml&quot;/&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker/.env" />
              <option name="updatedContent" value="# DocMate Platform - Lightweight Docker Images Environment Configuration&#10;&#10;# Image Type Selection (choose one):&#10;# - distroless: Ultra-secure, smallest attack surface, no shell (~100MB)&#10;# - alpine: Small with shell access for debugging (~150MB)  &#10;# - minimal: Custom JRE, absolutely smallest size (~80MB)&#10;# - standard: Current full-featured image (~300MB)&#10;IMAGE_TYPE=distroless&#10;&#10;# Image tag&#10;IMAGE_TAG=latest&#10;&#10;# Database Configuration&#10;POSTGRES_DB=docmate_platform&#10;POSTGRES_USER=docmate&#10;POSTGRES_PASSWORD=password&#10;&#10;# Redis Configuration&#10;REDIS_HOST=redis&#10;REDIS_PORT=6379&#10;&#10;# AWS/LocalStack Configuration&#10;AWS_ACCESS_KEY_ID=test&#10;AWS_SECRET_ACCESS_KEY=test&#10;AWS_REGION=us-east-1&#10;AWS_S3_ENDPOINT=http://localstack:4566&#10;AWS_S3_BUCKET=docmate-files&#10;&#10;# External Service Configuration&#10;STRIPE_API_KEY=sk_test_dummy&#10;&#10;# Monitoring&#10;GRAFANA_ADMIN_PASSWORD=admin123&#10;&#10;# Performance Tuning&#10;JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker/.env.example">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker/.env.example" />
              <option name="updatedContent" value="# DocMate Platform Environment Configuration&#10;# Copy this file to .env and update the values as needed&#10;&#10;# Database Configuration&#10;DB_USERNAME=docmate&#10;DB_PASSWORD=password&#10;DB_NAME=docmate_platform&#10;&#10;# JWT Configuration&#10;JWT_SECRET=docmate-secret-key-for-jwt-token-generation-2024&#10;JWT_EXPIRATION=86400000&#10;JWT_REFRESH_EXPIRATION=604800000&#10;&#10;# Redis Configuration&#10;REDIS_HOST=redis&#10;REDIS_PORT=6379&#10;REDIS_PASSWORD=&#10;&#10;# AWS S3 Configuration (for file uploads)&#10;AWS_ACCESS_KEY_ID=your_access_key_here&#10;AWS_SECRET_ACCESS_KEY=your_secret_key_here&#10;AWS_REGION=us-east-1&#10;AWS_S3_BUCKET_NAME=docmate-files&#10;AWS_S3_BASE_URL=https://docmate-files.s3.amazonaws.com&#10;&#10;# Stripe Payment Configuration&#10;STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key_here&#10;STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here&#10;&#10;# Email Configuration (SendGrid)&#10;SENDGRID_API_KEY=your_sendgrid_api_key_here&#10;APP_EMAIL_FROM=noreply@docmate.com&#10;APP_EMAIL_FROM_NAME=DocMate&#10;&#10;# SMS Configuration (Twilio)&#10;TWILIO_ACCOUNT_SID=your_twilio_account_sid&#10;TWILIO_AUTH_TOKEN=your_twilio_auth_token&#10;TWILIO_PHONE_NUMBER=+1234567890&#10;&#10;# Monitoring&#10;GRAFANA_ADMIN_PASSWORD=admin123&#10;&#10;# Logging&#10;LOG_LEVEL=INFO&#10;&#10;# Application URLs (for inter-service communication)&#10;GATEWAY_URL=http://gateway:8080&#10;AUTH_SERVICE_URL=http://auth-service:8081&#10;USER_SERVICE_URL=http://user-service:8082&#10;APPOINTMENT_SERVICE_URL=http://appointment-service:8083&#10;PAYMENT_SERVICE_URL=http://payment-service:8084&#10;NOTIFICATION_SERVICE_URL=http://notification-service:8085&#10;FILE_SERVICE_URL=http://file-service:8086&#10;PRESCRIPTION_SERVICE_URL=http://prescription-service:8087&#10;AVAILABILITY_SERVICE_URL=http://availability-service:8088&#10;TAXONOMY_SERVICE_URL=http://taxonomy-service:8089&#10;ADMIN_SERVICE_URL=http://admin-service:8090" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker/build-lightweight.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker/build-lightweight.sh" />
              <option name="originalContent" value="#!/bin/bash&#10;&#10;# Docker Build Script for DocMate Platform&#10;# This script builds lightweight Docker images for all services&#10;&#10;set -e&#10;&#10;# Colors for output&#10;RED='\033[0;31m'&#10;GREEN='\033[0;32m'&#10;YELLOW='\033[1;33m'&#10;BLUE='\033[0;34m'&#10;NC='\033[0m' # No Color&#10;&#10;# Configuration&#10;SERVICES=(&#10;    &quot;auth-service&quot;&#10;    &quot;user-service&quot;&#10;    &quot;admin-service&quot;&#10;    &quot;appointment-service&quot;&#10;    &quot;availability-service&quot;&#10;    &quot;file-service&quot;&#10;    &quot;notification-service&quot;&#10;    &quot;payment-service&quot;&#10;    &quot;prescription-service&quot;&#10;    &quot;taxonomy-service&quot;&#10;    &quot;gateway&quot;&#10;    &quot;db-migration&quot;&#10;)&#10;&#10;# Docker image variants&#10;declare -A DOCKERFILE_VARIANTS=(&#10;    [&quot;distroless&quot;]=&quot;Dockerfile.distroless&quot;&#10;    [&quot;alpine&quot;]=&quot;Dockerfile.alpine&quot;&#10;    [&quot;minimal&quot;]=&quot;Dockerfile.minimal&quot;&#10;    [&quot;standard&quot;]=&quot;Dockerfile&quot;&#10;)&#10;&#10;declare -A SIZE_ESTIMATES=(&#10;    [&quot;distroless&quot;]=&quot;~100MB (Ultra-secure, no shell)&quot;&#10;    [&quot;alpine&quot;]=&quot;~150MB (Small with shell access)&quot;&#10;    [&quot;minimal&quot;]=&quot;~80MB (Custom JRE, smallest)&quot;&#10;    [&quot;standard&quot;]=&quot;~300MB (Current version)&quot;&#10;)&#10;&#10;print_usage() {&#10;    echo -e &quot;${BLUE}DocMate Platform Docker Build Script${NC}&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Usage: $0 [OPTIONS]&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Options:&quot;&#10;    echo &quot;  -t, --type TYPE     Image type: distroless, alpine, minimal, standard (default: distroless)&quot;&#10;    echo &quot;  -s, --service NAME  Build specific service only&quot;&#10;    echo &quot;  -p, --push          Push images to registry after build&quot;&#10;    echo &quot;  -c, --clean         Clean build (no cache)&quot;&#10;    echo &quot;  -h, --help          Show this help&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Image Types:&quot;&#10;    for type in &quot;${!SIZE_ESTIMATES[@]}&quot;; do&#10;        echo &quot;  ${type}: ${SIZE_ESTIMATES[$type]}&quot;&#10;    done&#10;    echo &quot;&quot;&#10;    echo &quot;Examples:&quot;&#10;    echo &quot;  $0 -t distroless              # Build all services with distroless images&quot;&#10;    echo &quot;  $0 -t alpine -s auth-service  # Build auth-service with alpine image&quot;&#10;    echo &quot;  $0 -t minimal -c              # Clean build all services with minimal images&quot;&#10;}&#10;&#10;# Default values&#10;IMAGE_TYPE=&quot;distroless&quot;&#10;SPECIFIC_SERVICE=&quot;&quot;&#10;PUSH_IMAGES=false&#10;CLEAN_BUILD=false&#10;REGISTRY=&quot;docmate&quot;&#10;&#10;# Parse command line arguments&#10;while [[ $# -gt 0 ]]; do&#10;    case $1 in&#10;        -t|--type)&#10;            IMAGE_TYPE=&quot;$2&quot;&#10;            shift 2&#10;            ;;&#10;        -s|--service)&#10;            SPECIFIC_SERVICE=&quot;$2&quot;&#10;            shift 2&#10;            ;;&#10;        -p|--push)&#10;            PUSH_IMAGES=true&#10;            shift&#10;            ;;&#10;        -c|--clean)&#10;            CLEAN_BUILD=true&#10;            shift&#10;            ;;&#10;        -h|--help)&#10;            print_usage&#10;            exit 0&#10;            ;;&#10;        *)&#10;            echo -e &quot;${RED}Unknown option: $1${NC}&quot;&#10;            print_usage&#10;            exit 1&#10;            ;;&#10;    esac&#10;done&#10;&#10;# Validate image type&#10;if [[ ! &quot;${!DOCKERFILE_VARIANTS[@]}&quot; =~ &quot;${IMAGE_TYPE}&quot; ]]; then&#10;    echo -e &quot;${RED}Invalid image type: ${IMAGE_TYPE}${NC}&quot;&#10;    echo &quot;Available types: ${!DOCKERFILE_VARIANTS[@]}&quot;&#10;    exit 1&#10;fi&#10;&#10;DOCKERFILE=&quot;${DOCKERFILE_VARIANTS[$IMAGE_TYPE]}&quot;&#10;&#10;echo -e &quot;${BLUE} Building DocMate Platform with ${IMAGE_TYPE} images${NC}&quot;&#10;echo -e &quot;${YELLOW}Expected size: ${SIZE_ESTIMATES[$IMAGE_TYPE]}${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;# Build function&#10;build_service() {&#10;    local service=$1&#10;    local start_time=$(date +%s)&#10;&#10;    echo -e &quot;${BLUE}Building ${service}...${NC}&quot;&#10;&#10;    # Build command&#10;    local build_cmd=&quot;docker build&quot;&#10;&#10;    if [[ &quot;$CLEAN_BUILD&quot; == true ]]; then&#10;        build_cmd=&quot;$build_cmd --no-cache&quot;&#10;    fi&#10;&#10;    build_cmd=&quot;$build_cmd -f ${DOCKERFILE} --build-arg SERVICE_NAME=${service} -t ${REGISTRY}/${service}:${IMAGE_TYPE} -t ${REGISTRY}/${service}:latest .&quot;&#10;&#10;    if eval $build_cmd; then&#10;        local end_time=$(date +%s)&#10;        local duration=$((end_time - start_time))&#10;        local size=$(docker images ${REGISTRY}/${service}:${IMAGE_TYPE} --format &quot;table {{.Size}}&quot; | tail -n 1)&#10;&#10;        echo -e &quot;${GREEN}✅ ${service} built successfully in ${duration}s (Size: ${size})${NC}&quot;&#10;&#10;        if [[ &quot;$PUSH_IMAGES&quot; == true ]]; then&#10;            echo -e &quot;${YELLOW}Pushing ${service}...${NC}&quot;&#10;            docker push ${REGISTRY}/${service}:${IMAGE_TYPE}&#10;            docker push ${REGISTRY}/${service}:latest&#10;        fi&#10;    else&#10;        echo -e &quot;${RED}❌ Failed to build ${service}${NC}&quot;&#10;        return 1&#10;    fi&#10;}&#10;&#10;# Main build process&#10;if [[ -n &quot;$SPECIFIC_SERVICE&quot; ]]; then&#10;    build_service &quot;$SPECIFIC_SERVICE&quot;&#10;else&#10;    echo -e &quot;${YELLOW}Building all services...${NC}&quot;&#10;&#10;    for service in &quot;${SERVICES[@]}&quot;; do&#10;        build_service &quot;$service&quot;&#10;        echo &quot;&quot;&#10;    done&#10;&#10;    echo -e &quot;${GREEN} All services built successfully!${NC}&quot;&#10;    echo &quot;&quot;&#10;    echo -e &quot;${BLUE}Image sizes:${NC}&quot;&#10;    docker images ${REGISTRY}/* --format &quot;table {{.Repository}}\t{{.Tag}}\t{{.Size}}&quot; | grep ${IMAGE_TYPE}&#10;fi&#10;" />
              <option name="updatedContent" value="#!/bin/bash&#10;&#10;# Docker Build Script for DocMate Platform&#10;# This script builds lightweight Docker images for all services&#10;&#10;set -e&#10;&#10;# Colors for output&#10;RED='\033[0;31m'&#10;GREEN='\033[0;32m'&#10;YELLOW='\033[1;33m'&#10;BLUE='\033[0;34m'&#10;NC='\033[0m' # No Color&#10;&#10;# Configuration&#10;SERVICES=(&#10;    &quot;auth-service&quot;&#10;    &quot;user-service&quot;&#10;    &quot;admin-service&quot;&#10;    &quot;appointment-service&quot;&#10;    &quot;availability-service&quot;&#10;    &quot;file-service&quot;&#10;    &quot;notification-service&quot;&#10;    &quot;payment-service&quot;&#10;    &quot;prescription-service&quot;&#10;    &quot;taxonomy-service&quot;&#10;    &quot;gateway&quot;&#10;    &quot;db-migration&quot;&#10;)&#10;&#10;# Function to get dockerfile for image type&#10;get_dockerfile() {&#10;    case &quot;$1&quot; in&#10;        &quot;distroless&quot;)&#10;            echo &quot;Dockerfile.distroless&quot;&#10;            ;;&#10;        &quot;alpine&quot;)&#10;            echo &quot;Dockerfile.alpine&quot;&#10;            ;;&#10;        &quot;minimal&quot;)&#10;            echo &quot;Dockerfile.minimal&quot;&#10;            ;;&#10;        &quot;standard&quot;)&#10;            echo &quot;Dockerfile&quot;&#10;            ;;&#10;        *)&#10;            echo &quot;Dockerfile.distroless&quot;&#10;            ;;&#10;    esac&#10;}&#10;&#10;# Function to get size estimate for image type&#10;get_size_estimate() {&#10;    case &quot;$1&quot; in&#10;        &quot;distroless&quot;)&#10;            echo &quot;~100MB (Ultra-secure, no shell)&quot;&#10;            ;;&#10;        &quot;alpine&quot;)&#10;            echo &quot;~150MB (Small with shell access)&quot;&#10;            ;;&#10;        &quot;minimal&quot;)&#10;            echo &quot;~80MB (Custom JRE, smallest)&quot;&#10;            ;;&#10;        &quot;standard&quot;)&#10;            echo &quot;~300MB (Current version)&quot;&#10;            ;;&#10;        *)&#10;            echo &quot;~100MB (Ultra-secure, no shell)&quot;&#10;            ;;&#10;    esac&#10;}&#10;&#10;print_usage() {&#10;    echo -e &quot;${BLUE}DocMate Platform Docker Build Script${NC}&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Usage: $0 [OPTIONS]&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Options:&quot;&#10;    echo &quot;  -t, --type TYPE     Image type: distroless, alpine, minimal, standard (default: distroless)&quot;&#10;    echo &quot;  -s, --service NAME  Build specific service only&quot;&#10;    echo &quot;  -p, --push          Push images to registry after build&quot;&#10;    echo &quot;  -c, --clean         Clean build (no cache)&quot;&#10;    echo &quot;  -h, --help          Show this help&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Image Types:&quot;&#10;    echo &quot;  distroless: $(get_size_estimate &quot;distroless&quot;)&quot;&#10;    echo &quot;  alpine: $(get_size_estimate &quot;alpine&quot;)&quot;&#10;    echo &quot;  minimal: $(get_size_estimate &quot;minimal&quot;)&quot;&#10;    echo &quot;  standard: $(get_size_estimate &quot;standard&quot;)&quot;&#10;    echo &quot;&quot;&#10;    echo &quot;Examples:&quot;&#10;    echo &quot;  $0 -t distroless              # Build all services with distroless images&quot;&#10;    echo &quot;  $0 -t alpine -s auth-service  # Build auth-service with alpine image&quot;&#10;    echo &quot;  $0 -t minimal -c              # Clean build all services with minimal images&quot;&#10;}&#10;&#10;# Default values&#10;IMAGE_TYPE=&quot;distroless&quot;&#10;SPECIFIC_SERVICE=&quot;&quot;&#10;PUSH_IMAGES=false&#10;CLEAN_BUILD=false&#10;REGISTRY=&quot;docmate&quot;&#10;&#10;# Parse command line arguments&#10;while [[ $# -gt 0 ]]; do&#10;    case $1 in&#10;        -t|--type)&#10;            IMAGE_TYPE=&quot;$2&quot;&#10;            shift 2&#10;            ;;&#10;        -s|--service)&#10;            SPECIFIC_SERVICE=&quot;$2&quot;&#10;            shift 2&#10;            ;;&#10;        -p|--push)&#10;            PUSH_IMAGES=true&#10;            shift&#10;            ;;&#10;        -c|--clean)&#10;            CLEAN_BUILD=true&#10;            shift&#10;            ;;&#10;        -h|--help)&#10;            print_usage&#10;            exit 0&#10;            ;;&#10;        *)&#10;            echo -e &quot;${RED}Unknown option: $1${NC}&quot;&#10;            print_usage&#10;            exit 1&#10;            ;;&#10;    esac&#10;done&#10;&#10;# Validate image type&#10;case &quot;$IMAGE_TYPE&quot; in&#10;    &quot;distroless&quot;|&quot;alpine&quot;|&quot;minimal&quot;|&quot;standard&quot;)&#10;        ;;&#10;    *)&#10;        echo -e &quot;${RED}Invalid image type: ${IMAGE_TYPE}${NC}&quot;&#10;        echo &quot;Available types: distroless, alpine, minimal, standard&quot;&#10;        exit 1&#10;        ;;&#10;esac&#10;&#10;DOCKERFILE=$(get_dockerfile &quot;$IMAGE_TYPE&quot;)&#10;SIZE_ESTIMATE=$(get_size_estimate &quot;$IMAGE_TYPE&quot;)&#10;&#10;echo -e &quot;${BLUE} Building DocMate Platform with ${IMAGE_TYPE} images${NC}&quot;&#10;echo -e &quot;${YELLOW}Expected size: ${SIZE_ESTIMATE}${NC}&quot;&#10;echo -e &quot;${YELLOW}Using Dockerfile: ${DOCKERFILE}${NC}&quot;&#10;echo &quot;&quot;&#10;&#10;# Build function&#10;build_service() {&#10;    local service=$1&#10;    local start_time=$(date +%s)&#10;    &#10;    echo -e &quot;${BLUE}Building ${service}...${NC}&quot;&#10;    &#10;    # Build command&#10;    local build_cmd=&quot;docker build&quot;&#10;    &#10;    if [[ &quot;$CLEAN_BUILD&quot; == true ]]; then&#10;        build_cmd=&quot;$build_cmd --no-cache&quot;&#10;    fi&#10;    &#10;    build_cmd=&quot;$build_cmd -f ${DOCKERFILE} --build-arg SERVICE_NAME=${service} -t ${REGISTRY}/${service}:${IMAGE_TYPE} -t ${REGISTRY}/${service}:latest .&quot;&#10;    &#10;    echo -e &quot;${YELLOW}Running: ${build_cmd}${NC}&quot;&#10;    &#10;    if eval $build_cmd; then&#10;        local end_time=$(date +%s)&#10;        local duration=$((end_time - start_time))&#10;        local size=$(docker images ${REGISTRY}/${service}:${IMAGE_TYPE} --format &quot;table {{.Size}}&quot; | tail -n 1)&#10;        &#10;        echo -e &quot;${GREEN}✅ ${service} built successfully in ${duration}s (Size: ${size})${NC}&quot;&#10;        &#10;        if [[ &quot;$PUSH_IMAGES&quot; == true ]]; then&#10;            echo -e &quot;${YELLOW}Pushing ${service}...${NC}&quot;&#10;            docker push ${REGISTRY}/${service}:${IMAGE_TYPE}&#10;            docker push ${REGISTRY}/${service}:latest&#10;        fi&#10;    else&#10;        echo -e &quot;${RED}❌ Failed to build ${service}${NC}&quot;&#10;        return 1&#10;    fi&#10;}&#10;&#10;# Check if we're in the correct directory&#10;if [[ ! -f &quot;pom.xml&quot; ]]; then&#10;    echo -e &quot;${RED}Error: pom.xml not found. Please run this script from the project root directory.${NC}&quot;&#10;    exit 1&#10;fi&#10;&#10;# Check if the dockerfile exists&#10;if [[ ! -f &quot;$DOCKERFILE&quot; ]]; then&#10;    echo -e &quot;${RED}Error: ${DOCKERFILE} not found. Please ensure the dockerfile exists.${NC}&quot;&#10;    exit 1&#10;fi&#10;&#10;# Main build process&#10;if [[ -n &quot;$SPECIFIC_SERVICE&quot; ]]; then&#10;    build_service &quot;$SPECIFIC_SERVICE&quot;&#10;else&#10;    echo -e &quot;${YELLOW}Building all services...${NC}&quot;&#10;    &#10;    for service in &quot;${SERVICES[@]}&quot;; do&#10;        build_service &quot;$service&quot;&#10;        echo &quot;&quot;&#10;    done&#10;    &#10;    echo -e &quot;${GREEN} All services built successfully!${NC}&quot;&#10;    echo &quot;&quot;&#10;    echo -e &quot;${BLUE}Image sizes:${NC}&quot;&#10;    docker images ${REGISTRY}/* --format &quot;table {{.Repository}}\t{{.Tag}}\t{{.Size}}&quot; | grep -E &quot;(${IMAGE_TYPE}|latest)&quot;&#10;fi" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker/docker-compose.yml" />
              <option name="originalContent" value="version: '3.8'&#10;&#10;# Environment variables for lightweight image configuration&#10;# Set IMAGE_TYPE=distroless|alpine|minimal|standard (default: distroless)&#10;# Set IMAGE_TAG=latest (default: latest)&#10;&#10;x-common-variables: &amp;common-variables&#10;  IMAGE_TYPE: ${IMAGE_TYPE:-distroless}&#10;  IMAGE_TAG: ${IMAGE_TAG:-latest}&#10;&#10;x-service-defaults: &amp;service-defaults&#10;  networks:&#10;    - docmate-network&#10;  restart: unless-stopped&#10;  deploy:&#10;    resources:&#10;      limits:&#10;        memory: 512M&#10;      reservations:&#10;        memory: 256M&#10;&#10;services:&#10;  # Database Migration Service&#10;  db-migration:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/db-migration:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-db-migration&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/docmate_platform&#10;      SPRING_DATASOURCE_USERNAME: docmate&#10;      SPRING_DATASOURCE_PASSWORD: password&#10;      SPRING_LIQUIBASE_CHANGE_LOG: classpath:db/changelog/db.changelog-master.xml&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;&#10;  # API Gateway&#10;  gateway:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/gateway:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-gateway&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SPRING_CLOUD_GATEWAY_ROUTES[0]_ID: auth-service&#10;      SPRING_CLOUD_GATEWAY_ROUTES[0]_URI: http://auth-service:8081&#10;      SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[0]: Path=/api/auth/**&#10;    depends_on:&#10;      - db-migration&#10;&#10;  # Auth Service&#10;  auth-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/auth-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-auth-service&#10;    ports:&#10;      - &quot;8081:8081&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8081&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/docmate_platform&#10;      SPRING_DATASOURCE_USERNAME: docmate&#10;      SPRING_DATASOURCE_PASSWORD: password&#10;      SPRING_REDIS_HOST: redis&#10;      SPRING_REDIS_PORT: 6379&#10;    depends_on:&#10;      - postgres&#10;      - redis&#10;      - db-migration&#10;&#10;  # User Service&#10;  user-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/user-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-user-service&#10;    ports:&#10;      - &quot;8082:8082&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8082&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/docmate_platform&#10;      SPRING_DATASOURCE_USERNAME: docmate&#10;      SPRING_DATASOURCE_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Admin Service&#10;  admin-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/admin-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-admin-service&#10;    ports:&#10;      - &quot;8083:8083&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8083&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/docmate_platform&#10;      SPRING_DATASOURCE_USERNAME: docmate&#10;      SPRING_DATASOURCE_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Appointment Service&#10;  appointment-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/appointment-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-appointment-service&#10;    ports:&#10;      - &quot;8084:8084&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8084&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/docmate_platform&#10;      SPRING_DATASOURCE_USERNAME: docmate&#10;      SPRING_DATASOURCE_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Availability Service&#10;  availability-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/availability-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-availability-service&#10;    ports:&#10;      - &quot;8085:8085&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8085&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/docmate_platform&#10;      SPRING_DATASOURCE_USERNAME: docmate&#10;      SPRING_DATASOURCE_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # File Service&#10;  file-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/file-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-file-service&#10;    ports:&#10;      - &quot;8086:8086&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8086&#10;      AWS_S3_ENDPOINT: http://localstack:4566&#10;      AWS_S3_BUCKET: docmate-files&#10;      AWS_ACCESS_KEY_ID: test&#10;      AWS_SECRET_ACCESS_KEY: test&#10;      AWS_REGION: us-east-1&#10;    depends_on:&#10;      - localstack&#10;&#10;  # Notification Service&#10;  notification-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/notification-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-notification-service&#10;    ports:&#10;      - &quot;8087:8087&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8087&#10;      SPRING_REDIS_HOST: redis&#10;      SPRING_REDIS_PORT: 6379&#10;    depends_on:&#10;      - redis&#10;&#10;  # Payment Service&#10;  payment-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/payment-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-payment-service&#10;    ports:&#10;      - &quot;8088:8088&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8088&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/docmate_platform&#10;      SPRING_DATASOURCE_USERNAME: docmate&#10;      SPRING_DATASOURCE_PASSWORD: password&#10;      STRIPE_API_KEY: ${STRIPE_API_KEY:-sk_test_dummy}&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Prescription Service&#10;  prescription-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/prescription-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-prescription-service&#10;    ports:&#10;      - &quot;8089:8089&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8089&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/docmate_platform&#10;      SPRING_DATASOURCE_USERNAME: docmate&#10;      SPRING_DATASOURCE_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Taxonomy Service&#10;  taxonomy-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/taxonomy-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-taxonomy-service&#10;    ports:&#10;      - &quot;8090:8090&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8090&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/docmate_platform&#10;      SPRING_DATASOURCE_USERNAME: docmate&#10;      SPRING_DATASOURCE_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Shared PostgreSQL Database&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    container_name: docmate-postgres&#10;    environment:&#10;      POSTGRES_DB: docmate_platform&#10;      POSTGRES_USER: docmate&#10;      POSTGRES_PASSWORD: password&#10;      POSTGRES_INITDB_ARGS: &quot;--encoding=UTF-8 --lc-collate=C --lc-ctype=C&quot;&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql&#10;    networks:&#10;      - docmate-network&#10;    healthcheck:&#10;      test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U docmate -d docmate_platform&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;&#10;  # Redis for Caching and Session Management&#10;  redis:&#10;    image: redis:7-alpine&#10;    container_name: docmate-redis&#10;    ports:&#10;      - &quot;6379:6379&quot;&#10;    volumes:&#10;      - redis_data:/data&#10;    networks:&#10;      - docmate-network&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;redis-cli&quot;, &quot;ping&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;&#10;  # LocalStack for AWS S3 simulation&#10;  localstack:&#10;    image: localstack/localstack:latest&#10;    container_name: docmate-localstack&#10;    ports:&#10;      - &quot;4566:4566&quot;  # LocalStack main port&#10;      - &quot;4510-4559:4510-4559&quot;  # External service ports&#10;    environment:&#10;      - SERVICES=s3&#10;      - DEBUG=1&#10;      - DATA_DIR=/tmp/localstack/data&#10;      - DOCKER_HOST=unix:///var/run/docker.sock&#10;      - AWS_DEFAULT_REGION=us-east-1&#10;      - AWS_ACCESS_KEY_ID=test&#10;      - AWS_SECRET_ACCESS_KEY=test&#10;    volumes:&#10;      - localstack_data:/tmp/localstack&#10;      - /var/run/docker.sock:/var/run/docker.sock&#10;    networks:&#10;      - docmate-network&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:4566/_localstack/health&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;&#10;  # Monitoring and Management&#10;  prometheus:&#10;    image: prom/prometheus:latest&#10;    container_name: docmate-prometheus&#10;    ports:&#10;      - &quot;9090:9090&quot;&#10;    volumes:&#10;      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml&#10;      - prometheus_data:/prometheus&#10;    command:&#10;      - '--config.file=/etc/prometheus/prometheus.yml'&#10;      - '--storage.tsdb.path=/prometheus'&#10;      - '--web.console.libraries=/etc/prometheus/console_libraries'&#10;      - '--web.console.templates=/etc/prometheus/consoles'&#10;    networks:&#10;      - docmate-network&#10;&#10;  grafana:&#10;    image: grafana/grafana:latest&#10;    container_name: docmate-grafana&#10;    ports:&#10;      - &quot;3000:3000&quot;&#10;    environment:&#10;      - GF_SECURITY_ADMIN_PASSWORD=admin123&#10;    volumes:&#10;      - grafana_data:/var/lib/grafana&#10;      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards&#10;      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning&#10;    networks:&#10;      - docmate-network&#10;&#10;volumes:&#10;  postgres_data:&#10;    driver: local&#10;  redis_data:&#10;    driver: local&#10;  prometheus_data:&#10;    driver: local&#10;  grafana_data:&#10;    driver: local&#10;  localstack_data:&#10;    driver: local&#10;&#10;networks:&#10;  docmate-network:&#10;    driver: bridge&#10;" />
              <option name="updatedContent" value="version: '3.8'&#10;&#10;# Environment variables for lightweight image configuration&#10;# Set IMAGE_TYPE=distroless|alpine|minimal|standard (default: distroless)&#10;# Set IMAGE_TAG=latest (default: latest)&#10;&#10;x-common-variables: &amp;common-variables&#10;  IMAGE_TYPE: ${IMAGE_TYPE:-distroless}&#10;  IMAGE_TAG: ${IMAGE_TAG:-latest}&#10;&#10;x-service-defaults: &amp;service-defaults&#10;  networks:&#10;    - docmate-network&#10;  restart: unless-stopped&#10;  deploy:&#10;    resources:&#10;      limits:&#10;        memory: 512M&#10;      reservations:&#10;        memory: 256M&#10;&#10;services:&#10;  # Database Migration Service&#10;  db-migration:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/db-migration:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-db-migration&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/docmate_platform&#10;      SPRING_DATASOURCE_USERNAME: docmate&#10;      SPRING_DATASOURCE_PASSWORD: password&#10;      SPRING_LIQUIBASE_CHANGE_LOG: classpath:db/changelog/db.changelog-master.xml&#10;    depends_on:&#10;      postgres:&#10;        condition: service_healthy&#10;&#10;  # API Gateway&#10;  gateway:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/gateway:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-gateway&#10;    ports:&#10;      - &quot;8080:8080&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SPRING_CLOUD_GATEWAY_ROUTES[0]_ID: auth-service&#10;      SPRING_CLOUD_GATEWAY_ROUTES[0]_URI: http://auth-service:8081&#10;      SPRING_CLOUD_GATEWAY_ROUTES[0]_PREDICATES[0]: Path=/api/auth/**&#10;    depends_on:&#10;      - db-migration&#10;&#10;  # Auth Service&#10;  auth-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/auth-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-auth-service&#10;    ports:&#10;      - &quot;8081:8081&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      PORT: 8081&#10;      DB_HOST: postgres&#10;      DB_PORT: 5432&#10;      DB_NAME: docmate_platform&#10;      DB_USERNAME: docmate&#10;      DB_PASSWORD: password&#10;      REDIS_HOST: redis&#10;      REDIS_PORT: 6379&#10;    depends_on:&#10;      - postgres&#10;      - redis&#10;      - db-migration&#10;&#10;  # User Service&#10;  user-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/user-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-user-service&#10;    ports:&#10;      - &quot;8082:8082&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      PORT: 8082&#10;      DB_HOST: postgres&#10;      DB_PORT: 5432&#10;      DB_NAME: docmate_platform&#10;      DB_USERNAME: docmate&#10;      DB_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Admin Service&#10;  admin-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/admin-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-admin-service&#10;    ports:&#10;      - &quot;8083:8083&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      PORT: 8083&#10;      DB_HOST: postgres&#10;      DB_PORT: 5432&#10;      DB_NAME: docmate_platform&#10;      DB_USERNAME: docmate&#10;      DB_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Appointment Service&#10;  appointment-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/appointment-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-appointment-service&#10;    ports:&#10;      - &quot;8084:8084&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      PORT: 8084&#10;      DB_HOST: postgres&#10;      DB_PORT: 5432&#10;      DB_NAME: docmate_platform&#10;      DB_USERNAME: docmate&#10;      DB_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Availability Service&#10;  availability-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/availability-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-availability-service&#10;    ports:&#10;      - &quot;8085:8085&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      PORT: 8085&#10;      DB_HOST: postgres&#10;      DB_PORT: 5432&#10;      DB_NAME: docmate_platform&#10;      DB_USERNAME: docmate&#10;      DB_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # File Service&#10;  file-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/file-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-file-service&#10;    ports:&#10;      - &quot;8086:8086&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8086&#10;      AWS_S3_ENDPOINT: http://localstack:4566&#10;      AWS_S3_BUCKET: docmate-files&#10;      AWS_ACCESS_KEY_ID: test&#10;      AWS_SECRET_ACCESS_KEY: test&#10;      AWS_REGION: us-east-1&#10;    depends_on:&#10;      - localstack&#10;&#10;  # Notification Service&#10;  notification-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/notification-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-notification-service&#10;    ports:&#10;      - &quot;8087:8087&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      SERVER_PORT: 8087&#10;      SPRING_REDIS_HOST: redis&#10;      SPRING_REDIS_PORT: 6379&#10;    depends_on:&#10;      - redis&#10;&#10;  # Payment Service&#10;  payment-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/payment-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-payment-service&#10;    ports:&#10;      - &quot;8088:8088&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      PORT: 8088&#10;      DB_HOST: postgres&#10;      DB_PORT: 5432&#10;      DB_NAME: docmate_platform&#10;      DB_USERNAME: docmate&#10;      DB_PASSWORD: password&#10;      STRIPE_API_KEY: ${STRIPE_API_KEY:-sk_test_dummy}&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Prescription Service&#10;  prescription-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/prescription-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-prescription-service&#10;    ports:&#10;      - &quot;8089:8089&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      PORT: 8089&#10;      DB_HOST: postgres&#10;      DB_PORT: 5432&#10;      DB_NAME: docmate_platform&#10;      DB_USERNAME: docmate&#10;      DB_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Taxonomy Service&#10;  taxonomy-service:&#10;    &lt;&lt;: *service-defaults&#10;    image: docmate/taxonomy-service:${IMAGE_TYPE:-distroless}&#10;    container_name: docmate-taxonomy-service&#10;    ports:&#10;      - &quot;8090:8090&quot;&#10;    environment:&#10;      &lt;&lt;: *common-variables&#10;      SPRING_PROFILES_ACTIVE: docker&#10;      PORT: 8090&#10;      DB_HOST: postgres&#10;      DB_PORT: 5432&#10;      DB_NAME: docmate_platform&#10;      DB_USERNAME: docmate&#10;      DB_PASSWORD: password&#10;    depends_on:&#10;      - postgres&#10;      - db-migration&#10;&#10;  # Shared PostgreSQL Database&#10;  postgres:&#10;    image: postgres:15-alpine&#10;    container_name: docmate-postgres&#10;    environment:&#10;      POSTGRES_DB: docmate_platform&#10;      POSTGRES_USER: docmate&#10;      POSTGRES_PASSWORD: password&#10;      POSTGRES_INITDB_ARGS: &quot;--encoding=UTF-8 --lc-collate=C --lc-ctype=C&quot;&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    volumes:&#10;      - postgres_data:/var/lib/postgresql/data&#10;      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql&#10;    networks:&#10;      - docmate-network&#10;    healthcheck:&#10;      test: [&quot;CMD-SHELL&quot;, &quot;pg_isready -U docmate -d docmate_platform&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;&#10;  # Redis for Caching and Session Management&#10;  redis:&#10;    image: redis:7-alpine&#10;    container_name: docmate-redis&#10;    ports:&#10;      - &quot;6379:6379&quot;&#10;    volumes:&#10;      - redis_data:/data&#10;    networks:&#10;      - docmate-network&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;redis-cli&quot;, &quot;ping&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;&#10;  # LocalStack for AWS S3 simulation&#10;  localstack:&#10;    image: localstack/localstack:latest&#10;    container_name: docmate-localstack&#10;    ports:&#10;      - &quot;4566:4566&quot;  # LocalStack main port&#10;      - &quot;4510-4559:4510-4559&quot;  # External service ports&#10;    environment:&#10;      - SERVICES=s3&#10;      - DEBUG=1&#10;      - DATA_DIR=/tmp/localstack/data&#10;      - DOCKER_HOST=unix:///var/run/docker.sock&#10;      - AWS_DEFAULT_REGION=us-east-1&#10;      - AWS_ACCESS_KEY_ID=test&#10;      - AWS_SECRET_ACCESS_KEY=test&#10;    volumes:&#10;      - localstack_data:/tmp/localstack&#10;      - /var/run/docker.sock:/var/run/docker.sock&#10;    networks:&#10;      - docmate-network&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:4566/_localstack/health&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;&#10;  # Monitoring and Management&#10;  prometheus:&#10;    image: prom/prometheus:latest&#10;    container_name: docmate-prometheus&#10;    ports:&#10;      - &quot;9090:9090&quot;&#10;    volumes:&#10;      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml&#10;      - prometheus_data:/prometheus&#10;    command:&#10;      - '--config.file=/etc/prometheus/prometheus.yml'&#10;      - '--storage.tsdb.path=/prometheus'&#10;      - '--web.console.libraries=/etc/prometheus/console_libraries'&#10;      - '--web.console.templates=/etc/prometheus/consoles'&#10;    networks:&#10;      - docmate-network&#10;&#10;  grafana:&#10;    image: grafana/grafana:latest&#10;    container_name: docmate-grafana&#10;    ports:&#10;      - &quot;3000:3000&quot;&#10;    environment:&#10;      - GF_SECURITY_ADMIN_PASSWORD=admin123&#10;    volumes:&#10;      - grafana_data:/var/lib/grafana&#10;      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards&#10;      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning&#10;    networks:&#10;      - docmate-network&#10;&#10;volumes:&#10;  postgres_data:&#10;    driver: local&#10;  redis_data:&#10;    driver: local&#10;  prometheus_data:&#10;    driver: local&#10;  grafana_data:&#10;    driver: local&#10;  localstack_data:&#10;    driver: local&#10;&#10;networks:&#10;  docmate-network:&#10;    driver: bridge" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker/monitoring/grafana/provisioning/datasources/prometheus.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker/monitoring/grafana/provisioning/datasources/prometheus.yml" />
              <option name="updatedContent" value="apiVersion: 1&#10;&#10;datasources:&#10;  - name: Prometheus&#10;    type: prometheus&#10;    access: proxy&#10;    url: http://prometheus:9090&#10;    isDefault: true&#10;    editable: true" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker/monitoring/prometheus.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker/monitoring/prometheus.yml" />
              <option name="updatedContent" value="global:&#10;  scrape_interval: 15s&#10;  evaluation_interval: 15s&#10;&#10;rule_files:&#10;  # - &quot;first_rules.yml&quot;&#10;  # - &quot;second_rules.yml&quot;&#10;&#10;scrape_configs:&#10;  # DocMate Platform Services&#10;  - job_name: 'docmate-services'&#10;    static_configs:&#10;      - targets: &#10;        - 'auth-service:8081'&#10;        - 'user-service:8082'&#10;        - 'admin-service:8083'&#10;        - 'appointment-service:8084'&#10;        - 'availability-service:8085'&#10;        - 'file-service:8086'&#10;        - 'notification-service:8087'&#10;        - 'payment-service:8088'&#10;        - 'prescription-service:8089'&#10;        - 'taxonomy-service:8090'&#10;        - 'gateway:8080'&#10;    metrics_path: '/actuator/prometheus'&#10;    scrape_interval: 30s&#10;&#10;  # Infrastructure Services&#10;  - job_name: 'infrastructure'&#10;    static_configs:&#10;      - targets: &#10;        - 'postgres:5432'&#10;        - 'redis:6379'&#10;        - 'localstack:4566'&#10;&#10;  # Self-monitoring&#10;  - job_name: 'prometheus'&#10;    static_configs:&#10;      - targets: ['localhost:9090']" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker/scripts/init-db.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker/scripts/init-db.sql" />
              <option name="updatedContent" value="-- Database initialization script for DocMate Platform&#10;-- This script creates the shared database and enables necessary extensions&#10;&#10;-- Create database if it doesn't exist (PostgreSQL doesn't support IF NOT EXISTS for CREATE DATABASE)&#10;-- This will be handled by Docker's POSTGRES_DB environment variable&#10;&#10;-- Enable UUID extension for generating UUIDs&#10;CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;;&#10;&#10;-- Enable pg_trgm extension for text search capabilities&#10;CREATE EXTENSION IF NOT EXISTS &quot;pg_trgm&quot;;&#10;&#10;-- Enable btree_gist extension for additional index types&#10;CREATE EXTENSION IF NOT EXISTS &quot;btree_gist&quot;;&#10;&#10;-- Create schemas for different services (optional - can help organize tables)&#10;CREATE SCHEMA IF NOT EXISTS auth;&#10;CREATE SCHEMA IF NOT EXISTS users;&#10;CREATE SCHEMA IF NOT EXISTS appointments;&#10;CREATE SCHEMA IF NOT EXISTS payments;&#10;CREATE SCHEMA IF NOT EXISTS notifications;&#10;CREATE SCHEMA IF NOT EXISTS files;&#10;CREATE SCHEMA IF NOT EXISTS prescriptions;&#10;CREATE SCHEMA IF NOT EXISTS availability;&#10;CREATE SCHEMA IF NOT EXISTS taxonomy;&#10;CREATE SCHEMA IF NOT EXISTS admin;&#10;&#10;-- Grant permissions to the docmate user&#10;GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO docmate;&#10;GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO docmate;&#10;GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO docmate;&#10;&#10;GRANT ALL PRIVILEGES ON SCHEMA auth TO docmate;&#10;GRANT ALL PRIVILEGES ON SCHEMA users TO docmate;&#10;GRANT ALL PRIVILEGES ON SCHEMA appointments TO docmate;&#10;GRANT ALL PRIVILEGES ON SCHEMA payments TO docmate;&#10;GRANT ALL PRIVILEGES ON SCHEMA notifications TO docmate;&#10;GRANT ALL PRIVILEGES ON SCHEMA files TO docmate;&#10;GRANT ALL PRIVILEGES ON SCHEMA prescriptions TO docmate;&#10;GRANT ALL PRIVILEGES ON SCHEMA availability TO docmate;&#10;GRANT ALL PRIVILEGES ON SCHEMA taxonomy TO docmate;&#10;GRANT ALL PRIVILEGES ON SCHEMA admin TO docmate;&#10;&#10;-- Set default privileges for future objects&#10;ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO docmate;&#10;ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO docmate;&#10;ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO docmate;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/file-service/src/main/java/com/docmate/file/config/AwsS3Config.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/file-service/src/main/java/com/docmate/file/config/AwsS3Config.java" />
              <option name="originalContent" value="package com.docmate.file.config;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;&#10;import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;&#10;import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;&#10;import software.amazon.awssdk.regions.Region;&#10;import software.amazon.awssdk.services.s3.S3Client;&#10;&#10;    @Value(&quot;${aws.access-key-id:dummy}&quot;)&#10;    private String accessKeyId;&#10;&#10;    @Value(&quot;${aws.access-key-id:dummy}&quot;)&#10;    private String secretAccessKey;&#10;&#10;    @Value(&quot;${aws.region:us-east-1}&quot;)&#10;    private String region;&#10;&#10;    @Value(&quot;${aws.secret-access-key:dummy}&quot;)&#10;    public S3Client s3Client() {&#10;        // For development/testing, you can use dummy credentials&#10;        // In production, use proper AWS credentials or IAM roles&#10;        AwsCredentialsProvider credentialsProvider = StaticCredentialsProvider.create(&#10;            AwsBasicCredentials.create(accessKeyId, secretAccessKey)&#10;    }&#10;}&#10;        // For development/testing, you can use dummy credentials&#10;        // In production, use proper AWS credentials or IAM roles&#10;" />
              <option name="updatedContent" value="package com.docmate.file.config;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;&#10;import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;&#10;import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;&#10;import software.amazon.awssdk.regions.Region;&#10;import software.amazon.awssdk.services.s3.S3Client;&#10;import software.amazon.awssdk.services.s3.S3ClientBuilder;&#10;&#10;import java.net.URI;&#10;&#10;@Configuration&#10;public class AwsS3Config {&#10;&#10;    @Value(&quot;${aws.access-key-id:test}&quot;)&#10;    private String accessKeyId;&#10;&#10;    @Value(&quot;${aws.secret-access-key:test}&quot;)&#10;    private String secretAccessKey;&#10;&#10;    @Value(&quot;${aws.region:us-east-1}&quot;)&#10;    private String region;&#10;&#10;    @Value(&quot;${aws.s3.endpoint:}&quot;)&#10;    private String s3Endpoint;&#10;&#10;    @Value(&quot;${aws.s3.path-style-access:false}&quot;)&#10;    private boolean pathStyleAccess;&#10;&#10;    @Bean&#10;    public S3Client s3Client() {&#10;        AwsCredentialsProvider credentialsProvider = StaticCredentialsProvider.create(&#10;            AwsBasicCredentials.create(accessKeyId, secretAccessKey)&#10;        );&#10;&#10;        S3ClientBuilder builder = S3Client.builder()&#10;                .region(Region.of(region))&#10;                .credentialsProvider(credentialsProvider);&#10;&#10;        // Configure for LocalStack if endpoint is provided&#10;        if (s3Endpoint != null &amp;&amp; !s3Endpoint.isEmpty()) {&#10;            builder.endpointOverride(URI.create(s3Endpoint))&#10;                   .forcePathStyle(pathStyleAccess);&#10;        }&#10;&#10;        return builder.build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/file-service/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/file-service/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: file-service&#10;  &#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;  &#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;  &#10;  liquibase:&#10;    enabled: false  # Disabled - using centralized db-migration service&#10;&#10;server:&#10;  port: ${PORT:8086}&#10;  servlet:&#10;    context-path: /&#10;    multipart:&#10;      max-file-size: 10MB&#10;      max-request-size: 10MB&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;# AWS S3 Configuration&#10;aws:&#10;  access-key-id: ${AWS_ACCESS_KEY_ID:test}&#10;  secret-access-key: ${AWS_SECRET_ACCESS_KEY:test}&#10;  region: ${AWS_REGION:us-east-1}&#10;  s3:&#10;&#10;    base-url: ${AWS_S3_BASE_URL:https://docmate-files.s3.amazonaws.com}&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc&#10;" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: file-service&#10;  &#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;  &#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;  &#10;  liquibase:&#10;    enabled: false  # Disabled - using centralized db-migration service&#10;&#10;server:&#10;  port: ${PORT:8086}&#10;  servlet:&#10;    context-path: /&#10;    multipart:&#10;      max-file-size: 10MB&#10;      max-request-size: 10MB&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;# AWS S3 Configuration&#10;aws:&#10;  access-key-id: ${AWS_ACCESS_KEY_ID:test}&#10;  secret-access-key: ${AWS_SECRET_ACCESS_KEY:test}&#10;  region: ${AWS_REGION:us-east-1}&#10;  s3:&#10;    endpoint: ${AWS_S3_ENDPOINT:}&#10;    path-style-access: ${AWS_S3_PATH_STYLE_ACCESS:false}&#10;    bucket-name: ${AWS_S3_BUCKET_NAME:docmate-files}&#10;    base-url: ${AWS_S3_BASE_URL:http://localhost:4566/docmate-files}&#10;&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/file-service/src/main/resources/db/migration/V1__Create_file_tables.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/file-service/src/main/resources/db/migration/V1__Create_file_tables.sql" />
              <option name="updatedContent" value="-- Enable UUID support&#10;CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;;&#10;&#10;-- FILE METADATA TABLE&#10;CREATE TABLE IF NOT EXISTS file_metadata (&#10;    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),&#10;    user_id UUID NOT NULL,&#10;    file_name VARCHAR(500) NOT NULL,&#10;    original_name VARCHAR(500) NOT NULL,&#10;    file_path TEXT NOT NULL,&#10;    file_url TEXT NOT NULL,&#10;    content_type VARCHAR(100) NOT NULL,&#10;    file_size BIGINT NOT NULL,&#10;    file_type VARCHAR(50) NOT NULL, -- 'PROFILE_PICTURE', 'MEDICAL_REPORT', 'VERIFICATION_DOCUMENT'&#10;    upload_status VARCHAR(20) DEFAULT 'SUCCESS',&#10;    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- Create indexes for better performance&#10;CREATE INDEX IF NOT EXISTS idx_file_metadata_user_id ON file_metadata(user_id);&#10;CREATE INDEX IF NOT EXISTS idx_file_metadata_file_type ON file_metadata(file_type);&#10;CREATE INDEX IF NOT EXISTS idx_file_metadata_created_date ON file_metadata(created_date);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gateway/src/main/java/com/docmate/gateway/GatewayApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gateway/src/main/java/com/docmate/gateway/GatewayApplication.java" />
              <option name="originalContent" value="package com.docmate.gateway;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class GatewayApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(GatewayApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.gateway;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication(scanBasePackages = {&quot;com.docmate.gateway&quot;, &quot;com.docmate.common&quot;})&#10;public class GatewayApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(GatewayApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gateway/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gateway/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: gateway&#10;  &#10;          uri: http://localhost:8081&#10;          predicates:&#10;            - Path=/api/auth/**&#10;          filters:&#10;            - StripPrefix=0&#10;        &#10;        # User Service Routes&#10;        - id: user-service&#10;          uri: http://localhost:8082&#10;          predicates:&#10;            - Path=/api/patients/**, /api/doctors/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Appointment Service Routes&#10;        - id: appointment-service&#10;          uri: http://localhost:8083&#10;          predicates:&#10;            - Path=/api/appointments/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Payment Service Routes&#10;        - id: payment-service&#10;          uri: http://localhost:8084&#10;          predicates:&#10;            - Path=/api/payments/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Notification Service Routes&#10;        - id: notification-service&#10;          uri: http://localhost:8085&#10;          predicates:&#10;            - Path=/api/notifications/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # File Service Routes&#10;        - id: file-service&#10;          uri: http://localhost:8086&#10;          predicates:&#10;            - Path=/api/files/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Prescription Service Routes&#10;        - id: prescription-service&#10;          uri: http://localhost:8087&#10;          predicates:&#10;            - Path=/api/prescriptions/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Availability Service Routes&#10;        - id: availability-service&#10;          uri: http://localhost:8088&#10;          predicates:&#10;            - Path=/api/availability/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Taxonomy Service Routes&#10;        - id: taxonomy-service&#10;          uri: http://localhost:8089&#10;          predicates:&#10;            - Path=/api/specializations/**, /api/conditions/**&#10;          filters:&#10;            - StripPrefix=0&#10;        &#10;        # Admin Service Routes&#10;        - id: admin-service&#10;          uri: http://localhost:8090&#10;          predicates:&#10;            - Path=/api/admin/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;      &#10;      globalcors:&#10;        corsConfigurations:&#10;          '[/**]':&#10;            allowedOriginPatterns: &quot;*&quot;&#10;            allowedMethods:&#10;              - GET&#10;              - POST&#10;              - PUT&#10;              - DELETE&#10;              - OPTIONS&#10;            allowedHeaders: &quot;*&quot;&#10;            allowCredentials: true&#10;            maxAge: 3600&#10;&#10;server:&#10;  port: ${PORT:8080}&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics,gateway&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.cloud.gateway: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    config-url: /v3/api-docs/swagger-config&#10;    urls:&#10;      - name: Gateway&#10;        url: /v3/api-docs&#10;      - name: Auth Service&#10;        url: http://localhost:8081/v3/api-docs&#10;      - name: User Service&#10;        url: http://localhost:8082/v3/api-docs&#10;      - name: Appointment Service&#10;        url: http://localhost:8083/v3/api-docs&#10;      - name: Payment Service&#10;        url: http://localhost:8084/v3/api-docs&#10;      - name: Notification Service&#10;        url: http://localhost:8085/v3/api-docs&#10;" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: gateway&#10;  &#10;  # Force reactive web application type for Spring Cloud Gateway&#10;  main:&#10;    web-application-type: reactive&#10;  &#10;  # Exclude database auto-configuration since gateway doesn't need database&#10;  autoconfigure:&#10;    exclude:&#10;      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration&#10;      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration&#10;      - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration&#10;&#10;  cloud:&#10;    gateway:&#10;      routes:&#10;        # Auth Service Routes&#10;        - id: auth-service&#10;          uri: http://localhost:8081&#10;          predicates:&#10;            - Path=/api/auth/**&#10;          filters:&#10;            - StripPrefix=0&#10;        &#10;        # User Service Routes&#10;        - id: user-service&#10;          uri: http://localhost:8082&#10;          predicates:&#10;            - Path=/api/patients/**, /api/doctors/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Appointment Service Routes&#10;        - id: appointment-service&#10;          uri: http://localhost:8083&#10;          predicates:&#10;            - Path=/api/appointments/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Payment Service Routes&#10;        - id: payment-service&#10;          uri: http://localhost:8084&#10;          predicates:&#10;            - Path=/api/payments/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Notification Service Routes&#10;        - id: notification-service&#10;          uri: http://localhost:8085&#10;          predicates:&#10;            - Path=/api/notifications/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # File Service Routes&#10;        - id: file-service&#10;          uri: http://localhost:8086&#10;          predicates:&#10;            - Path=/api/files/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Prescription Service Routes&#10;        - id: prescription-service&#10;          uri: http://localhost:8087&#10;          predicates:&#10;            - Path=/api/prescriptions/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Availability Service Routes&#10;        - id: availability-service&#10;          uri: http://localhost:8088&#10;          predicates:&#10;            - Path=/api/availability/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;        &#10;        # Taxonomy Service Routes&#10;        - id: taxonomy-service&#10;          uri: http://localhost:8089&#10;          predicates:&#10;            - Path=/api/specializations/**, /api/conditions/**&#10;          filters:&#10;            - StripPrefix=0&#10;        &#10;        # Admin Service Routes&#10;        - id: admin-service&#10;          uri: http://localhost:8090&#10;          predicates:&#10;            - Path=/api/admin/**&#10;          filters:&#10;            - StripPrefix=0&#10;            - name: JwtAuthenticationFilter&#10;      &#10;      globalcors:&#10;        corsConfigurations:&#10;          '[/**]':&#10;            allowedOriginPatterns: &quot;*&quot;&#10;            allowedMethods:&#10;              - GET&#10;              - POST&#10;              - PUT&#10;              - DELETE&#10;              - OPTIONS&#10;            allowedHeaders: &quot;*&quot;&#10;            allowCredentials: true&#10;            maxAge: 3600&#10;&#10;server:&#10;  port: ${PORT:8080}&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics,gateway&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.cloud.gateway: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    config-url: /v3/api-docs/swagger-config&#10;    urls:&#10;      - name: Gateway&#10;        url: /v3/api-docs&#10;      - name: Auth Service&#10;        url: http://localhost:8081/v3/api-docs&#10;      - name: User Service&#10;        url: http://localhost:8082/v3/api-docs&#10;      - name: Appointment Service&#10;        url: http://localhost:8083/v3/api-docs&#10;      - name: Payment Service&#10;        url: http://localhost:8084/v3/api-docs&#10;      - name: Notification Service&#10;        url: http://localhost:8085/v3/api-docs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/notification-service/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/notification-service/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;notification-service&lt;/artifactId&gt;&#10;    &lt;name&gt;notification-service&lt;/name&gt;&#10;    &lt;description&gt;Notification service for DocMate platform with email, SMS, and push notifications&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;        &lt;dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.sendgrid&lt;/groupId&gt;&#10;            &lt;artifactId&gt;sendgrid-java&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;notification-service&lt;/artifactId&gt;&#10;    &lt;name&gt;notification-service&lt;/name&gt;&#10;    &lt;description&gt;Notification service for DocMate platform with email, SMS, and push notifications&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Communication Services --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.twilio.sdk&lt;/groupId&gt;&#10;            &lt;artifactId&gt;twilio&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.sendgrid&lt;/groupId&gt;&#10;            &lt;artifactId&gt;sendgrid-java&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/notification-service/src/main/java/com/docmate/notification/NotificationServiceApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/notification-service/src/main/java/com/docmate/notification/NotificationServiceApplication.java" />
              <option name="originalContent" value="package com.docmate.notification;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;import org.springframework.scheduling.annotation.EnableAsync;&#10;import org.springframework.scheduling.annotation.EnableScheduling;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EnableAsync&#10;@EnableScheduling&#10;@EntityScan(basePackages = {&quot;com.docmate.common.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.notification.repository&quot;})&#10;public class NotificationServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(NotificationServiceApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.notification;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;import org.springframework.scheduling.annotation.EnableAsync;&#10;import org.springframework.scheduling.annotation.EnableScheduling;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EnableAsync&#10;@EnableScheduling&#10;@EntityScan(basePackages = {&quot;com.docmate.common.entity&quot;, &quot;com.docmate.notification.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.notification.repository&quot;})&#10;public class NotificationServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(NotificationServiceApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/notification-service/src/main/java/com/docmate/notification/repository/NotificationRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/notification-service/src/main/java/com/docmate/notification/repository/NotificationRepository.java" />
              <option name="originalContent" value="package com.docmate.notification.repository;&#10;&#10;import com.docmate.notification.entity.Notification;&#10;import com.docmate.common.enums.NotificationType;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface NotificationRepository extends JpaRepository&lt;Notification, UUID&gt; {&#10;    &#10;    @Query(&quot;SELECT n FROM Notification n WHERE n.user.id = :userId ORDER BY n.createdDate DESC&quot;)&#10;    Page&lt;Notification&gt; findByUserId(@Param(&quot;userId&quot;) UUID userId, Pageable pageable);&#10;    &#10;    @Query(&quot;SELECT n FROM Notification n WHERE n.user.id = :userId AND n.isRead = false ORDER BY n.createdDate DESC&quot;)&#10;    List&lt;Notification&gt; findUnreadByUserId(@Param(&quot;userId&quot;) UUID userId);&#10;    &#10;    @Query(&quot;SELECT n FROM Notification n WHERE n.type = :type AND n.createdDate &gt;= :fromDate&quot;)&#10;    List&lt;Notification&gt; findByTypeAndCreatedAfter(@Param(&quot;type&quot;) NotificationType type, &#10;                                                 @Param(&quot;fromDate&quot;) LocalDateTime fromDate);&#10;    &#10;    @Query(&quot;SELECT COUNT(n) FROM Notification n WHERE n.user.id = :userId AND n.isRead = false&quot;)&#10;    long countUnreadByUserId(@Param(&quot;userId&quot;) UUID userId);&#10;    &#10;    @Query(&quot;UPDATE Notification n SET n.isRead = true WHERE n.user.id = :userId AND n.isRead = false&quot;)&#10;    void markAllAsReadByUserId(@Param(&quot;userId&quot;) UUID userId);&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.notification.repository;&#10;&#10;import com.docmate.common.entity.Notification;&#10;import com.docmate.common.enums.NotificationType;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface NotificationRepository extends JpaRepository&lt;Notification, UUID&gt; {&#10;    &#10;    @Query(&quot;SELECT n FROM Notification n WHERE n.user.id = :userId ORDER BY n.createdDate DESC&quot;)&#10;    Page&lt;Notification&gt; findByUserId(@Param(&quot;userId&quot;) UUID userId, Pageable pageable);&#10;    &#10;    @Query(&quot;SELECT n FROM Notification n WHERE n.user.id = :userId AND n.isRead = false ORDER BY n.createdDate DESC&quot;)&#10;    List&lt;Notification&gt; findUnreadByUserId(@Param(&quot;userId&quot;) UUID userId);&#10;    &#10;    @Query(&quot;SELECT n FROM Notification n WHERE n.type = :type AND n.createdDate &gt;= :fromDate&quot;)&#10;    List&lt;Notification&gt; findByTypeAndCreatedAfter(@Param(&quot;type&quot;) NotificationType type, &#10;                                                 @Param(&quot;fromDate&quot;) LocalDateTime fromDate);&#10;    &#10;    @Query(&quot;SELECT COUNT(n) FROM Notification n WHERE n.user.id = :userId AND n.isRead = false&quot;)&#10;    long countUnreadByUserId(@Param(&quot;userId&quot;) UUID userId);&#10;    &#10;    @Query(&quot;UPDATE Notification n SET n.isRead = true WHERE n.user.id = :userId AND n.isRead = false&quot;)&#10;    void markAllAsReadByUserId(@Param(&quot;userId&quot;) UUID userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/notification-service/src/main/java/com/docmate/notification/service/NotificationService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/notification-service/src/main/java/com/docmate/notification/service/NotificationService.java" />
              <option name="originalContent" value="package com.docmate.notification.service;&#10;&#10;import com.docmate.notification.entity.Notification;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.enums.NotificationType;&#10;import com.docmate.common.exception.BusinessException;&#10;import com.docmate.notification.dto.CreateNotificationRequest;&#10;import com.docmate.notification.dto.NotificationDto;&#10;import com.docmate.notification.mapper.NotificationMapper;&#10;import com.docmate.notification.repository.NotificationRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.scheduling.annotation.Async;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor&#10;@Transactional&#10;public class NotificationService {&#10;    &#10;    private final NotificationRepository notificationRepository;&#10;    private final NotificationMapper notificationMapper;&#10;    private final EmailService emailService;&#10;    private final SmsService smsService;&#10;    private final UserService userService;&#10;    &#10;    @Async&#10;    public void createAndSendNotification(CreateNotificationRequest request) {&#10;        log.info(&quot;Creating notification for user: {} with type: {}&quot;, request.getUserId(), request.getType());&#10;        &#10;        // Get user details&#10;        User user = userService.findById(request.getUserId());&#10;        &#10;        // Create in-app notification&#10;        Notification notification = Notification.builder()&#10;                .user(user)&#10;                .title(request.getTitle())&#10;                .message(request.getMessage())&#10;                .type(request.getType())&#10;                .isRead(false)&#10;                .data(request.getData())&#10;                .build();&#10;        &#10;        notification = notificationRepository.save(notification);&#10;        &#10;        // Send email notification if requested&#10;        if (request.isSendEmail() &amp;&amp; user.getEmail() != null) {&#10;            try {&#10;                emailService.sendNotificationEmail(user.getEmail(), request.getTitle(), request.getMessage(), request.getType());&#10;                log.info(&quot;Email notification sent to: {}&quot;, user.getEmail());&#10;            } catch (Exception e) {&#10;                log.error(&quot;Failed to send email notification to {}: {}&quot;, user.getEmail(), e.getMessage());&#10;            }&#10;        }&#10;        &#10;        // Send SMS notification if requested&#10;        if (request.isSendSms() &amp;&amp; user.getPhone() != null) {&#10;            try {&#10;                smsService.sendNotificationSms(user.getPhone(), request.getMessage());&#10;                log.info(&quot;SMS notification sent to: {}&quot;, user.getPhone());&#10;            } catch (Exception e) {&#10;                log.error(&quot;Failed to send SMS notification to {}: {}&quot;, user.getPhone(), e.getMessage());&#10;            }&#10;        }&#10;        &#10;        log.info(&quot;Notification created successfully with ID: {}&quot;, notification.getId());&#10;    }&#10;    &#10;    public void sendAppointmentReminder(UUID appointmentId, UUID patientId, UUID doctorId, LocalDateTime appointmentTime) {&#10;        log.info(&quot;Sending appointment reminder for appointment: {}&quot;, appointmentId);&#10;        &#10;        String message = String.format(&quot;Reminder: You have an appointment scheduled for %s&quot;, appointmentTime);&#10;        &#10;        // Send reminder to patient&#10;        CreateNotificationRequest patientNotification = CreateNotificationRequest.builder()&#10;                .userId(patientId)&#10;                .title(&quot;Appointment Reminder&quot;)&#10;                .message(message)&#10;                .type(NotificationType.APPOINTMENT_REMINDER)&#10;                .sendEmail(true)&#10;                .sendSms(true)&#10;                .build();&#10;        &#10;        createAndSendNotification(patientNotification);&#10;        &#10;        // Send reminder to doctor&#10;        CreateNotificationRequest doctorNotification = CreateNotificationRequest.builder()&#10;                .userId(doctorId)&#10;                .title(&quot;Upcoming Appointment&quot;)&#10;                .message(&quot;You have an upcoming appointment with a patient at &quot; + appointmentTime)&#10;                .type(NotificationType.APPOINTMENT_REMINDER)&#10;                .sendEmail(true)&#10;                .build();&#10;        &#10;        createAndSendNotification(doctorNotification);&#10;    }&#10;    &#10;    public void sendPaymentNotification(UUID userId, String paymentStatus, String appointmentDetails) {&#10;        log.info(&quot;Sending payment notification to user: {} with status: {}&quot;, userId, paymentStatus);&#10;        &#10;        String title = paymentStatus.equals(&quot;COMPLETED&quot;) ? &quot;Payment Successful&quot; : &quot;Payment Failed&quot;;&#10;        String message = String.format(&quot;Your payment for %s has been %s&quot;, appointmentDetails, paymentStatus.toLowerCase());&#10;        &#10;        CreateNotificationRequest notification = CreateNotificationRequest.builder()&#10;                .userId(userId)&#10;                .title(title)&#10;                .message(message)&#10;                .type(paymentStatus.equals(&quot;COMPLETED&quot;) ? NotificationType.PAYMENT_RECEIVED : NotificationType.PAYMENT_FAILED)&#10;                .sendEmail(true)&#10;                .build();&#10;        &#10;        createAndSendNotification(notification);&#10;    }&#10;    &#10;    public void sendDoctorApprovalNotification(UUID doctorId, boolean approved) {&#10;        log.info(&quot;Sending doctor approval notification to: {} - approved: {}&quot;, doctorId, approved);&#10;        &#10;        String title = approved ? &quot;Doctor Profile Approved&quot; : &quot;Doctor Profile Rejected&quot;;&#10;        String message = approved ? &#10;                &quot;Congratulations! Your doctor profile has been approved. You can now start accepting appointments.&quot; :&#10;                &quot;Your doctor profile has been rejected. Please contact support for more information.&quot;;&#10;        &#10;        CreateNotificationRequest notification = CreateNotificationRequest.builder()&#10;                .userId(doctorId)&#10;                .title(title)&#10;                .message(message)&#10;                .type(approved ? NotificationType.DOCTOR_APPROVED : NotificationType.DOCTOR_REJECTED)&#10;                .sendEmail(true)&#10;                .build();&#10;        &#10;        createAndSendNotification(notification);&#10;    }&#10;    &#10;    @Transactional(readOnly = true)&#10;    public Page&lt;NotificationDto&gt; getUserNotifications(UUID userId, Pageable pageable) {&#10;        log.info(&quot;Fetching notifications for user: {}&quot;, userId);&#10;        &#10;        Page&lt;Notification&gt; notifications = notificationRepository.findByUserId(userId, pageable);&#10;        return notifications.map(notificationMapper::toDto);&#10;    }&#10;    &#10;    @Transactional(readOnly = true)&#10;    public List&lt;NotificationDto&gt; getUnreadNotifications(UUID userId) {&#10;        log.info(&quot;Fetching unread notifications for user: {}&quot;, userId);&#10;        &#10;        List&lt;Notification&gt; notifications = notificationRepository.findUnreadByUserId(userId);&#10;        return notifications.stream()&#10;                .map(notificationMapper::toDto)&#10;                .toList();&#10;    }&#10;    &#10;    public void markNotificationAsRead(UUID notificationId, UUID userId) {&#10;        log.info(&quot;Marking notification {} as read for user: {}&quot;, notificationId, userId);&#10;        &#10;        Notification notification = notificationRepository.findById(notificationId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;NOTIFICATION_NOT_FOUND&quot;, &quot;Notification not found&quot;, 404));&#10;        &#10;        if (!notification.getUser().getId().equals(userId)) {&#10;            throw new BusinessException(&quot;UNAUTHORIZED&quot;, &quot;Cannot mark notification as read&quot;, 403);&#10;        }&#10;        &#10;        notification.setIsRead(true);&#10;        notificationRepository.save(notification);&#10;    }&#10;    &#10;    public void markAllAsRead(UUID userId) {&#10;        log.info(&quot;Marking all notifications as read for user: {}&quot;, userId);&#10;        &#10;        notificationRepository.markAllAsReadByUserId(userId);&#10;    }&#10;    &#10;    @Transactional(readOnly = true)&#10;    public long getUnreadCount(UUID userId) {&#10;        return notificationRepository.countUnreadByUserId(userId);&#10;    }&#10;    &#10;    public void deleteNotification(UUID notificationId, UUID userId) {&#10;        log.info(&quot;Deleting notification {} for user: {}&quot;, notificationId, userId);&#10;        &#10;        Notification notification = notificationRepository.findById(notificationId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;NOTIFICATION_NOT_FOUND&quot;, &quot;Notification not found&quot;, 404));&#10;        &#10;        if (!notification.getUser().getId().equals(userId)) {&#10;            throw new BusinessException(&quot;UNAUTHORIZED&quot;, &quot;Cannot delete notification&quot;, 403);&#10;        }&#10;        &#10;        notificationRepository.delete(notification);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.notification.service;&#10;&#10;import com.docmate.common.entity.Notification;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.enums.NotificationType;&#10;import com.docmate.common.exception.BusinessException;&#10;import com.docmate.notification.dto.CreateNotificationRequest;&#10;import com.docmate.notification.dto.NotificationDto;&#10;import com.docmate.notification.mapper.NotificationMapper;&#10;import com.docmate.notification.repository.NotificationRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.scheduling.annotation.Async;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor&#10;@Transactional&#10;public class NotificationService {&#10;    &#10;    private final NotificationRepository notificationRepository;&#10;    private final NotificationMapper notificationMapper;&#10;    private final EmailService emailService;&#10;    private final SmsService smsService;&#10;    private final UserService userService;&#10;    &#10;    @Async&#10;    public void createAndSendNotification(CreateNotificationRequest request) {&#10;        log.info(&quot;Creating notification for user: {} with type: {}&quot;, request.getUserId(), request.getType());&#10;        &#10;        // Get user details&#10;        User user = userService.findById(request.getUserId());&#10;        &#10;        // Create in-app notification&#10;        Notification notification = Notification.builder()&#10;                .user(user)&#10;                .title(request.getTitle())&#10;                .message(request.getMessage())&#10;                .type(request.getType())&#10;                .isRead(false)&#10;                .data(request.getData())&#10;                .build();&#10;        &#10;        notification = notificationRepository.save(notification);&#10;        &#10;        // Send email notification if requested&#10;        if (request.isSendEmail() &amp;&amp; user.getEmail() != null) {&#10;            try {&#10;                emailService.sendNotificationEmail(user.getEmail(), request.getTitle(), request.getMessage(), request.getType());&#10;                log.info(&quot;Email notification sent to: {}&quot;, user.getEmail());&#10;            } catch (Exception e) {&#10;                log.error(&quot;Failed to send email notification to {}: {}&quot;, user.getEmail(), e.getMessage());&#10;            }&#10;        }&#10;        &#10;        // Send SMS notification if requested&#10;        if (request.isSendSms() &amp;&amp; user.getPhone() != null) {&#10;            try {&#10;                smsService.sendNotificationSms(user.getPhone(), request.getMessage());&#10;                log.info(&quot;SMS notification sent to: {}&quot;, user.getPhone());&#10;            } catch (Exception e) {&#10;                log.error(&quot;Failed to send SMS notification to {}: {}&quot;, user.getPhone(), e.getMessage());&#10;            }&#10;        }&#10;        &#10;        log.info(&quot;Notification created successfully with ID: {}&quot;, notification.getId());&#10;    }&#10;    &#10;    public void sendAppointmentReminder(UUID appointmentId, UUID patientId, UUID doctorId, LocalDateTime appointmentTime) {&#10;        log.info(&quot;Sending appointment reminder for appointment: {}&quot;, appointmentId);&#10;        &#10;        String message = String.format(&quot;Reminder: You have an appointment scheduled for %s&quot;, appointmentTime);&#10;        &#10;        // Send reminder to patient&#10;        CreateNotificationRequest patientNotification = CreateNotificationRequest.builder()&#10;                .userId(patientId)&#10;                .title(&quot;Appointment Reminder&quot;)&#10;                .message(message)&#10;                .type(NotificationType.APPOINTMENT_REMINDER)&#10;                .sendEmail(true)&#10;                .sendSms(true)&#10;                .build();&#10;        &#10;        createAndSendNotification(patientNotification);&#10;        &#10;        // Send reminder to doctor&#10;        CreateNotificationRequest doctorNotification = CreateNotificationRequest.builder()&#10;                .userId(doctorId)&#10;                .title(&quot;Upcoming Appointment&quot;)&#10;                .message(&quot;You have an upcoming appointment with a patient at &quot; + appointmentTime)&#10;                .type(NotificationType.APPOINTMENT_REMINDER)&#10;                .sendEmail(true)&#10;                .build();&#10;        &#10;        createAndSendNotification(doctorNotification);&#10;    }&#10;    &#10;    public void sendPaymentNotification(UUID userId, String paymentStatus, String appointmentDetails) {&#10;        log.info(&quot;Sending payment notification to user: {} with status: {}&quot;, userId, paymentStatus);&#10;        &#10;        String title = paymentStatus.equals(&quot;COMPLETED&quot;) ? &quot;Payment Successful&quot; : &quot;Payment Failed&quot;;&#10;        String message = String.format(&quot;Your payment for %s has been %s&quot;, appointmentDetails, paymentStatus.toLowerCase());&#10;        &#10;        CreateNotificationRequest notification = CreateNotificationRequest.builder()&#10;                .userId(userId)&#10;                .title(title)&#10;                .message(message)&#10;                .type(paymentStatus.equals(&quot;COMPLETED&quot;) ? NotificationType.PAYMENT_RECEIVED : NotificationType.PAYMENT_FAILED)&#10;                .sendEmail(true)&#10;                .build();&#10;        &#10;        createAndSendNotification(notification);&#10;    }&#10;    &#10;    public void sendDoctorApprovalNotification(UUID doctorId, boolean approved) {&#10;        log.info(&quot;Sending doctor approval notification to: {} - approved: {}&quot;, doctorId, approved);&#10;        &#10;        String title = approved ? &quot;Doctor Profile Approved&quot; : &quot;Doctor Profile Rejected&quot;;&#10;        String message = approved ? &#10;                &quot;Congratulations! Your doctor profile has been approved. You can now start accepting appointments.&quot; :&#10;                &quot;Your doctor profile has been rejected. Please contact support for more information.&quot;;&#10;        &#10;        CreateNotificationRequest notification = CreateNotificationRequest.builder()&#10;                .userId(doctorId)&#10;                .title(title)&#10;                .message(message)&#10;                .type(approved ? NotificationType.DOCTOR_APPROVED : NotificationType.DOCTOR_REJECTED)&#10;                .sendEmail(true)&#10;                .build();&#10;        &#10;        createAndSendNotification(notification);&#10;    }&#10;    &#10;    @Transactional(readOnly = true)&#10;    public Page&lt;NotificationDto&gt; getUserNotifications(UUID userId, Pageable pageable) {&#10;        log.info(&quot;Fetching notifications for user: {}&quot;, userId);&#10;        &#10;        Page&lt;Notification&gt; notifications = notificationRepository.findByUserId(userId, pageable);&#10;        return notifications.map(notificationMapper::toDto);&#10;    }&#10;    &#10;    @Transactional(readOnly = true)&#10;    public List&lt;NotificationDto&gt; getUnreadNotifications(UUID userId) {&#10;        log.info(&quot;Fetching unread notifications for user: {}&quot;, userId);&#10;        &#10;        List&lt;Notification&gt; notifications = notificationRepository.findUnreadByUserId(userId);&#10;        return notifications.stream()&#10;                .map(notificationMapper::toDto)&#10;                .toList();&#10;    }&#10;    &#10;    public void markNotificationAsRead(UUID notificationId, UUID userId) {&#10;        log.info(&quot;Marking notification {} as read for user: {}&quot;, notificationId, userId);&#10;        &#10;        Notification notification = notificationRepository.findById(notificationId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;NOTIFICATION_NOT_FOUND&quot;, &quot;Notification not found&quot;, 404));&#10;        &#10;        if (!notification.getUser().getId().equals(userId)) {&#10;            throw new BusinessException(&quot;UNAUTHORIZED&quot;, &quot;Cannot mark notification as read&quot;, 403);&#10;        }&#10;        &#10;        notification.setIsRead(true);&#10;        notificationRepository.save(notification);&#10;    }&#10;    &#10;    public void markAllAsRead(UUID userId) {&#10;        log.info(&quot;Marking all notifications as read for user: {}&quot;, userId);&#10;        &#10;        notificationRepository.markAllAsReadByUserId(userId);&#10;    }&#10;    &#10;    @Transactional(readOnly = true)&#10;    public long getUnreadCount(UUID userId) {&#10;        return notificationRepository.countUnreadByUserId(userId);&#10;    }&#10;    &#10;    public void deleteNotification(UUID notificationId, UUID userId) {&#10;        log.info(&quot;Deleting notification {} for user: {}&quot;, notificationId, userId);&#10;        &#10;        Notification notification = notificationRepository.findById(notificationId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;NOTIFICATION_NOT_FOUND&quot;, &quot;Notification not found&quot;, 404));&#10;        &#10;        if (!notification.getUser().getId().equals(userId)) {&#10;            throw new BusinessException(&quot;UNAUTHORIZED&quot;, &quot;Cannot delete notification&quot;, 403);&#10;        }&#10;        &#10;        notificationRepository.delete(notification);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/notification-service/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/notification-service/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: notification-service&#10;  &#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;  &#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;  &#10;  liquibase:&#10;    change-log: classpath:db/changelog/db.changelog-master.xml&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;&#10;server:&#10;  port: ${PORT:8085}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;# SendGrid Configuration&#10;sendgrid:&#10;  api:&#10;    key: ${SENDGRID_API_KEY:your_sendgrid_api_key_here}&#10;&#10;# Twilio Configuration&#10;twilio:&#10;  account:&#10;    sid: ${TWILIO_ACCOUNT_SID:your_twilio_account_sid}&#10;  auth:&#10;    token: ${TWILIO_AUTH_TOKEN:your_twilio_auth_token}&#10;  phone:&#10;    number: ${TWILIO_PHONE_NUMBER:+1234567890}&#10;&#10;# Application Configuration&#10;app:&#10;  email:&#10;    from: ${APP_EMAIL_FROM:noreply@docmate.com}&#10;    from-name: ${APP_EMAIL_FROM_NAME:DocMate}&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc&#10;" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: notification-service&#10;  &#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;  &#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: update&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;  &#10;  liquibase:&#10;    enabled: false  # Disabled - using centralized db-migration service&#10;&#10;server:&#10;  port: ${PORT:8085}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;# SendGrid Configuration&#10;sendgrid:&#10;  api:&#10;    key: ${SENDGRID_API_KEY:your_sendgrid_api_key_here}&#10;&#10;# Twilio Configuration&#10;twilio:&#10;  account:&#10;    sid: ${TWILIO_ACCOUNT_SID:your_twilio_account_sid}&#10;  auth:&#10;    token: ${TWILIO_AUTH_TOKEN:your_twilio_auth_token}&#10;  phone:&#10;    number: ${TWILIO_PHONE_NUMBER:+1234567890}&#10;&#10;# Application Configuration&#10;app:&#10;  email:&#10;    from: ${APP_EMAIL_FROM:noreply@docmate.com}&#10;    from-name: ${APP_EMAIL_FROM_NAME:DocMate}&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/payment-service/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/payment-service/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;payment-service&lt;/artifactId&gt;&#10;    &lt;name&gt;payment-service&lt;/name&gt;&#10;    &lt;description&gt;Payment processing microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;        &lt;dependency&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;&#10;            &lt;artifactId&gt;gson&lt;/artifactId&gt;&#10;            &lt;version&gt;2.10.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;payment-service&lt;/artifactId&gt;&#10;    &lt;name&gt;payment-service&lt;/name&gt;&#10;    &lt;description&gt;Payment processing microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Stripe Payment Integration --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.stripe&lt;/groupId&gt;&#10;            &lt;artifactId&gt;stripe-java&lt;/artifactId&gt;&#10;            &lt;version&gt;28.3.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;&#10;            &lt;artifactId&gt;gson&lt;/artifactId&gt;&#10;            &lt;version&gt;2.10.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/payment-service/src/main/java/com/docmate/payment/PaymentServiceApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/payment-service/src/main/java/com/docmate/payment/PaymentServiceApplication.java" />
              <option name="originalContent" value="package com.docmate.payment;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EntityScan(basePackages = {&quot;com.docmate.common.entity&quot;, &quot;com.docmate.payment.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.payment.repository&quot;})&#10;public class PaymentServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(PaymentServiceApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.payment;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EntityScan(basePackages = {&quot;com.docmate.common.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.payment.repository&quot;})&#10;public class PaymentServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(PaymentServiceApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/payment-service/src/main/java/com/docmate/payment/mapper/PaymentMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/payment-service/src/main/java/com/docmate/payment/mapper/PaymentMapper.java" />
              <option name="originalContent" value="package com.docmate.payment.mapper;&#10;&#10;import com.docmate.payment.entity.Payment;&#10;import com.docmate.payment.dto.PaymentDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mapping;&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;appointment.patient.id&quot;)&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;appointment.doctor.id&quot;)&#10;    @Mapping(target = &quot;currency&quot;, source = &quot;currency&quot;)&#10;    @Mapping(target = &quot;stripeChargeId&quot;, source = &quot;stripeChargeId&quot;)&#10;    @Mapping(target = &quot;paymentDate&quot;, source = &quot;paymentDate&quot;)&#10;    @Mapping(target = &quot;refundAmount&quot;, source = &quot;refundAmount&quot;)&#10;    @Mapping(target = &quot;refundDate&quot;, source = &quot;refundDate&quot;)&#10;    @Mapping(target = &quot;refundReason&quot;, source = &quot;refundReason&quot;)&#10;    @Mapping(target = &quot;failureReason&quot;, source = &quot;failureReason&quot;)&#10;    @Mapping(target = &quot;receiptUrl&quot;, source = &quot;receiptUrl&quot;)&#10;    @Mapping(target = &quot;description&quot;, source = &quot;description&quot;)&#10;    @Mapping(target = &quot;metadata&quot;, source = &quot;metadata&quot;)&#10;import org.mapstruct.MappingConstants;&#10;    @Mapping(target = &quot;appointment&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;appointment&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;appointment.patient.id&quot;)&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;appointment.doctor.id&quot;)&#10;    @Mapping(target = &quot;currency&quot;, source = &quot;currency&quot;)&#10;    @Mapping(target = &quot;stripeChargeId&quot;, source = &quot;stripeChargeId&quot;)&#10;    @Mapping(target = &quot;paymentDate&quot;, source = &quot;paymentDate&quot;)&#10;    @Mapping(target = &quot;refundAmount&quot;, source = &quot;refundAmount&quot;)&#10;    @Mapping(target = &quot;refundDate&quot;, source = &quot;refundDate&quot;)&#10;    @Mapping(target = &quot;refundReason&quot;, source = &quot;refundReason&quot;)&#10;    @Mapping(target = &quot;failureReason&quot;, source = &quot;failureReason&quot;)&#10;    @Mapping(target = &quot;receiptUrl&quot;, source = &quot;receiptUrl&quot;)&#10;    @Mapping(target = &quot;description&quot;, source = &quot;description&quot;)&#10;    @Mapping(target = &quot;metadata&quot;, source = &quot;metadata&quot;)&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;    @Mapping(target = &quot;appointment&quot;, ignore = true) // Will be set by service layer&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;appointment.patient.id&quot;)&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;appointment.doctor.id&quot;)&#10;    @Mapping(target = &quot;currency&quot;, source = &quot;currency&quot;)&#10;    @Mapping(target = &quot;stripeChargeId&quot;, source = &quot;stripeChargeId&quot;)&#10;    @Mapping(target = &quot;paymentDate&quot;, source = &quot;paymentDate&quot;)&#10;    @Mapping(target = &quot;refundAmount&quot;, source = &quot;refundAmount&quot;)&#10;    @Mapping(target = &quot;refundDate&quot;, source = &quot;refundDate&quot;)&#10;    @Mapping(target = &quot;refundReason&quot;, source = &quot;refundReason&quot;)&#10;    @Mapping(target = &quot;failureReason&quot;, source = &quot;failureReason&quot;)&#10;    @Mapping(target = &quot;receiptUrl&quot;, source = &quot;receiptUrl&quot;)&#10;    @Mapping(target = &quot;description&quot;, source = &quot;description&quot;)&#10;    @Mapping(target = &quot;metadata&quot;, source = &quot;metadata&quot;)&#10;public interface PaymentMapper {&#10;    @Mapping(target = &quot;patientId&quot;, source = &quot;appointment.patient.id&quot;)&#10;    @Mapping(target = &quot;doctorId&quot;, source = &quot;appointment.doctor.id&quot;)&#10;    @Mapping(target = &quot;currency&quot;, source = &quot;currency&quot;)&#10;    @Mapping(target = &quot;stripeChargeId&quot;, source = &quot;stripeChargeId&quot;)&#10;    @Mapping(target = &quot;paymentDate&quot;, source = &quot;paymentDate&quot;)&#10;    @Mapping(target = &quot;refundAmount&quot;, source = &quot;refundAmount&quot;)&#10;    @Mapping(target = &quot;refundDate&quot;, source = &quot;refundDate&quot;)&#10;    @Mapping(target = &quot;refundReason&quot;, source = &quot;refundReason&quot;)&#10;    @Mapping(target = &quot;failureReason&quot;, source = &quot;failureReason&quot;)&#10;    @Mapping(target = &quot;receiptUrl&quot;, source = &quot;receiptUrl&quot;)&#10;    @Mapping(target = &quot;description&quot;, source = &quot;description&quot;)&#10;    @Mapping(target = &quot;metadata&quot;, source = &quot;metadata&quot;)&#10;&#10;    @Mapping(target = &quot;appointment&quot;, ignore = true) // Will be set by service layer&#10;    PaymentDto toDto(Payment payment);&#10;&#10;    Payment toEntity(PaymentDto paymentDto);&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.payment.mapper;&#10;&#10;import com.docmate.common.entity.Payment;&#10;import com.docmate.payment.dto.PaymentDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingConstants;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;public interface PaymentMapper {&#10;&#10;    PaymentDto toDto(Payment payment);&#10;&#10;    Payment toEntity(PaymentDto paymentDto);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/payment-service/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/payment-service/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: payment-service&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;&#10;  liquibase:&#10;    change-log: classpath:db/changelog/db.changelog-master.xml&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;&#10;server:&#10;  port: ${PORT:8084}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;# Stripe Configuration&#10;stripe:&#10;  api:&#10;    key: ${STRIPE_SECRET_KEY:sk_test_your_stripe_secret_key_here}&#10;  webhook:&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc&#10;" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: payment-service&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;&#10;  liquibase:&#10;    enabled: false  # Disabled - using centralized db-migration service&#10;&#10;server:&#10;  port: ${PORT:8084}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;# Stripe Configuration&#10;stripe:&#10;  api:&#10;    key: ${STRIPE_SECRET_KEY:sk_test_your_stripe_secret_key_here}&#10;  webhook:&#10;    secret: ${STRIPE_WEBHOOK_SECRET:whsec_your_webhook_secret_here}&#10;&#10;# JWT Configuration&#10;jwt:&#10;  secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;  expiration: ${JWT_EXPIRATION:86400000}&#10;  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/payment-service/src/main/resources/db/changelog/001-initial-schema.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/payment-service/src/main/resources/db/changelog/001-initial-schema.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-payments-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;payments&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;appointment_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;amount&quot; type=&quot;DECIMAL(10,2)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;currency&quot; type=&quot;VARCHAR(3)&quot; defaultValue=&quot;USD&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_method&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_status&quot; type=&quot;VARCHAR(20)&quot; defaultValue=&quot;PENDING&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;stripe_payment_intent_id&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;stripe_charge_id&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;payment_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;failure_reason&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;refund_amount&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;refund_date&quot; type=&quot;TIMESTAMP&quot;/&gt;&#10;            &lt;column name=&quot;refund_reason&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;receipt_url&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;description&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;metadata&quot; type=&quot;JSONB&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-payment-transactions-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;payment_transactions&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;payment_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;transaction_type&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;amount&quot; type=&quot;DECIMAL(10,2)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;status&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;external_transaction_id&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;response_data&quot; type=&quot;JSONB&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;003-add-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;payment_transactions&quot;&#10;                baseColumnNames=&quot;payment_id&quot;&#10;                referencedTableName=&quot;payments&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_payment_transactions_payment&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;004-create-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;payments&quot; indexName=&quot;idx_payments_appointment_id&quot;&gt;&#10;            &lt;column name=&quot;appointment_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;payments&quot; indexName=&quot;idx_payments_status&quot;&gt;&#10;            &lt;column name=&quot;payment_status&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;payments&quot; indexName=&quot;idx_payments_stripe_intent&quot;&gt;&#10;            &lt;column name=&quot;stripe_payment_intent_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;payment_transactions&quot; indexName=&quot;idx_transactions_payment_id&quot;&gt;&#10;            &lt;column name=&quot;payment_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/payment-service/src/main/resources/db/changelog/db.changelog-master.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/payment-service/src/main/resources/db/changelog/db.changelog-master.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;    &lt;!-- Database Changes --&gt;&#10;    &lt;!-- Include changelog files as needed --&gt;&#10;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;    &lt;!-- Payment Service Database Changes --&gt;&#10;    &lt;!-- Include changelog files as needed --&gt;&#10;    &lt;include file=&quot;db/changelog/001-initial-schema.xml&quot;/&gt;&#10;    &#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/payment-service/src/main/resources/db/migration/V1__Create_payment_tables.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/payment-service/src/main/resources/db/migration/V1__Create_payment_tables.sql" />
              <option name="updatedContent" value="-- Enable UUID support&#10;CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;;&#10;&#10;-- APPOINTMENTS TABLE (Reference for foreign keys)&#10;CREATE TABLE IF NOT EXISTS appointments (&#10;    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),&#10;    doctor_id UUID NOT NULL,&#10;    patient_id UUID NOT NULL,&#10;    appointment_date_time TIMESTAMP NOT NULL,&#10;    mode VARCHAR(20) CHECK (mode IN ('VIDEO', 'TELE', 'OFFLINE')) NOT NULL,&#10;    status VARCHAR(20) CHECK (status IN ('PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED')) DEFAULT 'PENDING',&#10;    payment_status VARCHAR(20) CHECK (payment_status IN ('PENDING', 'PAID', 'FAILED', 'REFUNDED')),&#10;    notes TEXT,&#10;    cancellation_reason TEXT,&#10;    meeting_link TEXT,&#10;    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- PAYMENTS TABLE&#10;CREATE TABLE IF NOT EXISTS payments (&#10;    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),&#10;    appointment_id UUID REFERENCES appointments(id),&#10;    amount NUMERIC(10,2) NOT NULL,&#10;    status VARCHAR(20) CHECK (status IN ('PENDING', 'COMPLETED', 'FAILED', 'REFUNDED')) DEFAULT 'PENDING',&#10;    payment_method VARCHAR(50),&#10;    transaction_id VARCHAR(200),&#10;    stripe_payment_intent_id VARCHAR(200),&#10;    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- Create indexes for better performance&#10;CREATE INDEX IF NOT EXISTS idx_payments_appointment_id ON payments(appointment_id);&#10;CREATE INDEX IF NOT EXISTS idx_payments_status ON payments(status);&#10;CREATE INDEX IF NOT EXISTS idx_payments_stripe_intent_id ON payments(stripe_payment_intent_id);&#10;CREATE INDEX IF NOT EXISTS idx_payments_transaction_id ON payments(transaction_id);&#10;CREATE INDEX IF NOT EXISTS idx_payments_created_date ON payments(created_date);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;    &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;    &lt;packaging&gt;pom&lt;/packaging&gt;&#10;    &lt;name&gt;DocMate Platform&lt;/name&gt;&#10;    &lt;description&gt;DocMate Healthcare Platform - Complete Backend&lt;/description&gt;&#10;&#10;    &lt;modules&gt;&#10;        &lt;module&gt;common&lt;/module&gt;&#10;        &lt;module&gt;gateway&lt;/module&gt;&#10;        &lt;module&gt;appointment-service&lt;/module&gt;&#10;        &lt;module&gt;availability-service&lt;/module&gt;&#10;        &lt;module&gt;file-service&lt;/module&gt;&#10;        &lt;module&gt;notification-service&lt;/module&gt;&#10;        &lt;module&gt;payment-service&lt;/module&gt;&#10;        &lt;module&gt;prescription-service&lt;/module&gt;&#10;        &lt;module&gt;taxonomy-service&lt;/module&gt;&#10;    &lt;/modules&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;17&lt;/java.version&gt;&#10;        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;&#10;&#10;        &lt;!-- Spring Framework Versions --&gt;&#10;        &lt;spring-boot.version&gt;3.1.5&lt;/spring-boot.version&gt;&#10;        &lt;spring-cloud.version&gt;2022.0.4&lt;/spring-cloud.version&gt;&#10;        &lt;spring-cloud-gateway.version&gt;4.0.7&lt;/spring-cloud-gateway.version&gt;&#10;        &lt;spring-security.version&gt;6.1.5&lt;/spring-security.version&gt;&#10;&#10;        &lt;!-- Database Versions --&gt;&#10;        &lt;postgresql.version&gt;42.6.0&lt;/postgresql.version&gt;&#10;        &lt;liquibase.version&gt;4.23.1&lt;/liquibase.version&gt;&#10;        &lt;hibernate.version&gt;6.2.13.Final&lt;/hibernate.version&gt;&#10;&#10;        &lt;!-- Third Party Libraries --&gt;&#10;        &lt;lombok.version&gt;1.18.28&lt;/lombok.version&gt;&#10;        &lt;mapstruct.version&gt;1.5.5.Final&lt;/mapstruct.version&gt;&#10;        &lt;jjwt.version&gt;0.11.5&lt;/jjwt.version&gt;&#10;        &lt;commons-io.version&gt;2.13.0&lt;/commons-io.version&gt;&#10;        &lt;jackson.version&gt;2.15.3&lt;/jackson.version&gt;&#10;        &lt;validation-api.version&gt;3.0.2&lt;/validation-api.version&gt;&#10;        &lt;openapi.version&gt;2.2.0&lt;/openapi.version&gt;&#10;        &lt;aws-sdk.version&gt;2.20.162&lt;/aws-sdk.version&gt;&#10;        &lt;stripe.version&gt;24.16.0&lt;/stripe.version&gt;&#10;        &lt;twilio.version&gt;10.0.0&lt;/twilio.version&gt;&#10;        &lt;sendgrid.version&gt;4.9.3&lt;/sendgrid.version&gt;&#10;        &lt;redis.version&gt;5.0.2&lt;/redis.version&gt;&#10;        &lt;junit.version&gt;5.10.0&lt;/junit.version&gt;&#10;        &lt;testcontainers.version&gt;1.19.0&lt;/testcontainers.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencyManagement&gt;&#10;        &lt;dependencies&gt;&#10;            &lt;!-- Spring Boot Dependencies --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;&#10;                &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;                &lt;type&gt;pom&lt;/type&gt;&#10;                &lt;scope&gt;import&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Spring Boot Actuator for Health Checks and Monitoring --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;                &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Spring Cloud Dependencies --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;&#10;                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;&#10;                &lt;type&gt;pom&lt;/type&gt;&#10;                &lt;scope&gt;import&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Database Dependencies --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;                &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;                &lt;version&gt;${postgresql.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;                &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;                &lt;version&gt;${liquibase.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- JWT Dependencies --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;                &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;&#10;                &lt;version&gt;${jjwt.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;                &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;&#10;                &lt;version&gt;${jjwt.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;                &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;&#10;                &lt;version&gt;${jjwt.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Utility Libraries --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;                &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;                &lt;version&gt;${lombok.version}&lt;/version&gt;&#10;                &lt;scope&gt;provided&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;                &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;                &lt;version&gt;${mapstruct.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;                &lt;artifactId&gt;mapstruct-processor&lt;/artifactId&gt;&#10;                &lt;version&gt;${mapstruct.version}&lt;/version&gt;&#10;                &lt;scope&gt;provided&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;commons-io&lt;/groupId&gt;&#10;                &lt;artifactId&gt;commons-io&lt;/artifactId&gt;&#10;                &lt;version&gt;${commons-io.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- OpenAPI Documentation --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;                &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;                &lt;version&gt;${openapi.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- AWS SDK --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt;&#10;                &lt;artifactId&gt;bom&lt;/artifactId&gt;&#10;                &lt;version&gt;${aws-sdk.version}&lt;/version&gt;&#10;                &lt;type&gt;pom&lt;/type&gt;&#10;                &lt;scope&gt;import&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Payment Integration --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;com.stripe&lt;/groupId&gt;&#10;                &lt;artifactId&gt;stripe-java&lt;/artifactId&gt;&#10;                &lt;version&gt;${stripe.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Communication Services --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;com.twilio.sdk&lt;/groupId&gt;&#10;                &lt;artifactId&gt;twilio&lt;/artifactId&gt;&#10;                &lt;version&gt;${twilio.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;com.sendgrid&lt;/groupId&gt;&#10;                &lt;artifactId&gt;sendgrid-java&lt;/artifactId&gt;&#10;                &lt;version&gt;${sendgrid.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Redis --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&#10;                &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Test Dependencies --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;                &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;                &lt;scope&gt;test&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;                &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;                &lt;version&gt;${testcontainers.version}&lt;/version&gt;&#10;                &lt;scope&gt;test&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;                &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;                &lt;version&gt;${testcontainers.version}&lt;/version&gt;&#10;                &lt;scope&gt;test&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Internal Modules --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;                &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;                &lt;version&gt;${project.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;        &lt;/dependencies&gt;&#10;    &lt;/dependencyManagement&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;pluginManagement&gt;&#10;            &lt;plugins&gt;&#10;                &lt;plugin&gt;&#10;                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;                    &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;                    &lt;configuration&gt;&#10;                        &lt;excludes&gt;&#10;                            &lt;exclude&gt;&#10;                                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;                                &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;                            &lt;/exclude&gt;&#10;                        &lt;/excludes&gt;&#10;                    &lt;/configuration&gt;&#10;                    &lt;executions&gt;&#10;                        &lt;execution&gt;&#10;                            &lt;goals&gt;&#10;                                &lt;goal&gt;repackage&lt;/goal&gt;&#10;                            &lt;/goals&gt;&#10;                        &lt;/execution&gt;&#10;                    &lt;/executions&gt;&#10;                &lt;/plugin&gt;&#10;&#10;                &lt;plugin&gt;&#10;                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                    &lt;version&gt;3.11.0&lt;/version&gt;&#10;                    &lt;configuration&gt;&#10;                        &lt;source&gt;${java.version}&lt;/source&gt;&#10;                        &lt;target&gt;${java.version}&lt;/target&gt;&#10;                        &lt;release&gt;${java.version}&lt;/release&gt;&#10;                        &lt;compilerArgs&gt;&#10;                            &lt;arg&gt;-parameters&lt;/arg&gt;&#10;                        &lt;/compilerArgs&gt;&#10;                        &lt;annotationProcessorPaths&gt;&#10;                            &lt;path&gt;&#10;                                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;                                &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;                                &lt;version&gt;${lombok.version}&lt;/version&gt;&#10;                            &lt;/path&gt;&#10;                            &lt;path&gt;&#10;                                &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;                                &lt;artifactId&gt;mapstruct-processor&lt;/artifactId&gt;&#10;                                &lt;version&gt;${mapstruct.version}&lt;/version&gt;&#10;                            &lt;/path&gt;&#10;                        &lt;/annotationProcessorPaths&gt;&#10;                    &lt;/configuration&gt;&#10;                &lt;/plugin&gt;&#10;&#10;                &lt;plugin&gt;&#10;                    &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt;&#10;                    &lt;version&gt;${liquibase.version}&lt;/version&gt;&#10;                &lt;/plugin&gt;&#10;            &lt;/plugins&gt;&#10;        &lt;/pluginManagement&gt;&#10;    &lt;/build&gt;&#10;&#10;    &lt;repositories&gt;&#10;        &lt;repository&gt;&#10;            &lt;id&gt;central&lt;/id&gt;&#10;            &lt;name&gt;Maven Central&lt;/name&gt;&#10;            &lt;url&gt;https://repo1.maven.org/maven2&lt;/url&gt;&#10;        &lt;/repository&gt;&#10;&#10;        &lt;repository&gt;&#10;            &lt;id&gt;spring-releases&lt;/id&gt;&#10;            &lt;name&gt;Spring Releases&lt;/name&gt;&#10;            &lt;url&gt;https://repo.spring.io/release&lt;/url&gt;&#10;        &lt;/repository&gt;&#10;    &lt;/repositories&gt;&#10;&#10;    &lt;pluginRepositories&gt;&#10;        &lt;pluginRepository&gt;&#10;            &lt;id&gt;central&lt;/id&gt;&#10;            &lt;name&gt;Maven Plugin Repository&lt;/name&gt;&#10;            &lt;url&gt;https://repo1.maven.org/maven2&lt;/url&gt;&#10;        &lt;/pluginRepository&gt;&#10;&#10;        &lt;pluginRepository&gt;&#10;            &lt;id&gt;spring-releases&lt;/id&gt;&#10;            &lt;name&gt;Spring Releases&lt;/name&gt;&#10;            &lt;url&gt;https://repo.spring.io/release&lt;/url&gt;&#10;        &lt;/pluginRepository&gt;&#10;    &lt;/pluginRepositories&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;    &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;    &lt;packaging&gt;pom&lt;/packaging&gt;&#10;    &lt;name&gt;DocMate Platform&lt;/name&gt;&#10;    &lt;description&gt;DocMate Healthcare Platform - Complete Backend&lt;/description&gt;&#10;&#10;    &lt;modules&gt;&#10;        &lt;module&gt;common&lt;/module&gt;&#10;        &lt;module&gt;gateway&lt;/module&gt;&#10;        &lt;module&gt;db-migration&lt;/module&gt;&#10;        &lt;module&gt;admin-service&lt;/module&gt;&#10;        &lt;module&gt;auth-service&lt;/module&gt;&#10;        &lt;module&gt;user-service&lt;/module&gt;&#10;        &lt;module&gt;appointment-service&lt;/module&gt;&#10;        &lt;module&gt;availability-service&lt;/module&gt;&#10;        &lt;module&gt;file-service&lt;/module&gt;&#10;        &lt;module&gt;notification-service&lt;/module&gt;&#10;        &lt;module&gt;payment-service&lt;/module&gt;&#10;        &lt;module&gt;prescription-service&lt;/module&gt;&#10;        &lt;module&gt;taxonomy-service&lt;/module&gt;&#10;    &lt;/modules&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;17&lt;/java.version&gt;&#10;        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;&#10;&#10;        &lt;!-- Spring Framework Versions --&gt;&#10;        &lt;spring-boot.version&gt;3.1.5&lt;/spring-boot.version&gt;&#10;        &lt;spring-cloud.version&gt;2022.0.4&lt;/spring-cloud.version&gt;&#10;        &lt;spring-cloud-gateway.version&gt;4.0.7&lt;/spring-cloud-gateway.version&gt;&#10;        &lt;spring-security.version&gt;6.1.5&lt;/spring-security.version&gt;&#10;&#10;        &lt;!-- Database Versions --&gt;&#10;        &lt;postgresql.version&gt;42.6.0&lt;/postgresql.version&gt;&#10;        &lt;liquibase.version&gt;4.23.1&lt;/liquibase.version&gt;&#10;        &lt;hibernate.version&gt;6.2.13.Final&lt;/hibernate.version&gt;&#10;&#10;        &lt;!-- Third Party Libraries --&gt;&#10;        &lt;lombok.version&gt;1.18.28&lt;/lombok.version&gt;&#10;        &lt;mapstruct.version&gt;1.5.5.Final&lt;/mapstruct.version&gt;&#10;        &lt;jjwt.version&gt;0.11.5&lt;/jjwt.version&gt;&#10;        &lt;commons-io.version&gt;2.13.0&lt;/commons-io.version&gt;&#10;        &lt;jackson.version&gt;2.15.3&lt;/jackson.version&gt;&#10;        &lt;validation-api.version&gt;3.0.2&lt;/validation-api.version&gt;&#10;        &lt;openapi.version&gt;2.2.0&lt;/openapi.version&gt;&#10;        &lt;aws-sdk.version&gt;2.20.162&lt;/aws-sdk.version&gt;&#10;        &lt;stripe.version&gt;24.16.0&lt;/stripe.version&gt;&#10;        &lt;twilio.version&gt;10.0.0&lt;/twilio.version&gt;&#10;        &lt;sendgrid.version&gt;4.9.3&lt;/sendgrid.version&gt;&#10;        &lt;redis.version&gt;5.0.2&lt;/redis.version&gt;&#10;        &lt;junit.version&gt;5.10.0&lt;/junit.version&gt;&#10;        &lt;testcontainers.version&gt;1.19.0&lt;/testcontainers.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencyManagement&gt;&#10;        &lt;dependencies&gt;&#10;            &lt;!-- Spring Boot Dependencies --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;&#10;                &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;                &lt;type&gt;pom&lt;/type&gt;&#10;                &lt;scope&gt;import&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Spring Boot Actuator for Health Checks and Monitoring --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;                &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Spring Cloud Dependencies --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;&#10;                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;&#10;                &lt;type&gt;pom&lt;/type&gt;&#10;                &lt;scope&gt;import&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Database Dependencies --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;                &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;                &lt;version&gt;${postgresql.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;                &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;                &lt;version&gt;${liquibase.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- JWT Dependencies --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;                &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;&#10;                &lt;version&gt;${jjwt.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;                &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;&#10;                &lt;version&gt;${jjwt.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;&#10;                &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;&#10;                &lt;version&gt;${jjwt.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Utility Libraries --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;                &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;                &lt;version&gt;${lombok.version}&lt;/version&gt;&#10;                &lt;scope&gt;provided&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;                &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;                &lt;version&gt;${mapstruct.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;                &lt;artifactId&gt;mapstruct-processor&lt;/artifactId&gt;&#10;                &lt;version&gt;${mapstruct.version}&lt;/version&gt;&#10;                &lt;scope&gt;provided&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;commons-io&lt;/groupId&gt;&#10;                &lt;artifactId&gt;commons-io&lt;/artifactId&gt;&#10;                &lt;version&gt;${commons-io.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- OpenAPI Documentation --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;                &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;                &lt;version&gt;${openapi.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- AWS SDK --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;software.amazon.awssdk&lt;/groupId&gt;&#10;                &lt;artifactId&gt;bom&lt;/artifactId&gt;&#10;                &lt;version&gt;${aws-sdk.version}&lt;/version&gt;&#10;                &lt;type&gt;pom&lt;/type&gt;&#10;                &lt;scope&gt;import&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Payment Integration --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;com.stripe&lt;/groupId&gt;&#10;                &lt;artifactId&gt;stripe-java&lt;/artifactId&gt;&#10;                &lt;version&gt;${stripe.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Communication Services --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;com.twilio.sdk&lt;/groupId&gt;&#10;                &lt;artifactId&gt;twilio&lt;/artifactId&gt;&#10;                &lt;version&gt;${twilio.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;com.sendgrid&lt;/groupId&gt;&#10;                &lt;artifactId&gt;sendgrid-java&lt;/artifactId&gt;&#10;                &lt;version&gt;${sendgrid.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Redis --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&#10;                &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Test Dependencies --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;                &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;                &lt;scope&gt;test&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;                &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;                &lt;version&gt;${testcontainers.version}&lt;/version&gt;&#10;                &lt;scope&gt;test&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;org.testcontainers&lt;/groupId&gt;&#10;                &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;                &lt;version&gt;${testcontainers.version}&lt;/version&gt;&#10;                &lt;scope&gt;test&lt;/scope&gt;&#10;            &lt;/dependency&gt;&#10;&#10;            &lt;!-- Internal Modules --&gt;&#10;            &lt;dependency&gt;&#10;                &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;                &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;                &lt;version&gt;${project.version}&lt;/version&gt;&#10;            &lt;/dependency&gt;&#10;        &lt;/dependencies&gt;&#10;    &lt;/dependencyManagement&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;pluginManagement&gt;&#10;            &lt;plugins&gt;&#10;                &lt;plugin&gt;&#10;                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;                    &lt;version&gt;${spring-boot.version}&lt;/version&gt;&#10;                    &lt;configuration&gt;&#10;                        &lt;excludes&gt;&#10;                            &lt;exclude&gt;&#10;                                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;                                &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;                            &lt;/exclude&gt;&#10;                        &lt;/excludes&gt;&#10;                    &lt;/configuration&gt;&#10;                    &lt;executions&gt;&#10;                        &lt;execution&gt;&#10;                            &lt;goals&gt;&#10;                                &lt;goal&gt;repackage&lt;/goal&gt;&#10;                            &lt;/goals&gt;&#10;                        &lt;/execution&gt;&#10;                    &lt;/executions&gt;&#10;                &lt;/plugin&gt;&#10;&#10;                &lt;plugin&gt;&#10;                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                    &lt;version&gt;3.11.0&lt;/version&gt;&#10;                    &lt;configuration&gt;&#10;                        &lt;source&gt;${java.version}&lt;/source&gt;&#10;                        &lt;target&gt;${java.version}&lt;/target&gt;&#10;                        &lt;release&gt;${java.version}&lt;/release&gt;&#10;                        &lt;compilerArgs&gt;&#10;                            &lt;arg&gt;-parameters&lt;/arg&gt;&#10;                        &lt;/compilerArgs&gt;&#10;                        &lt;annotationProcessorPaths&gt;&#10;                            &lt;path&gt;&#10;                                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;                                &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;                                &lt;version&gt;${lombok.version}&lt;/version&gt;&#10;                            &lt;/path&gt;&#10;                            &lt;path&gt;&#10;                                &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;                                &lt;artifactId&gt;mapstruct-processor&lt;/artifactId&gt;&#10;                                &lt;version&gt;${mapstruct.version}&lt;/version&gt;&#10;                            &lt;/path&gt;&#10;                        &lt;/annotationProcessorPaths&gt;&#10;                    &lt;/configuration&gt;&#10;                &lt;/plugin&gt;&#10;&#10;                &lt;plugin&gt;&#10;                    &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt;&#10;                    &lt;version&gt;${liquibase.version}&lt;/version&gt;&#10;                &lt;/plugin&gt;&#10;            &lt;/plugins&gt;&#10;        &lt;/pluginManagement&gt;&#10;    &lt;/build&gt;&#10;&#10;    &lt;repositories&gt;&#10;        &lt;repository&gt;&#10;            &lt;id&gt;central&lt;/id&gt;&#10;            &lt;name&gt;Maven Central&lt;/name&gt;&#10;            &lt;url&gt;https://repo1.maven.org/maven2&lt;/url&gt;&#10;        &lt;/repository&gt;&#10;&#10;        &lt;repository&gt;&#10;            &lt;id&gt;spring-releases&lt;/id&gt;&#10;            &lt;name&gt;Spring Releases&lt;/name&gt;&#10;            &lt;url&gt;https://repo.spring.io/release&lt;/url&gt;&#10;        &lt;/repository&gt;&#10;    &lt;/repositories&gt;&#10;&#10;    &lt;pluginRepositories&gt;&#10;        &lt;pluginRepository&gt;&#10;            &lt;id&gt;central&lt;/id&gt;&#10;            &lt;name&gt;Maven Plugin Repository&lt;/name&gt;&#10;            &lt;url&gt;https://repo1.maven.org/maven2&lt;/url&gt;&#10;        &lt;/pluginRepository&gt;&#10;&#10;        &lt;pluginRepository&gt;&#10;            &lt;id&gt;spring-releases&lt;/id&gt;&#10;            &lt;name&gt;Spring Releases&lt;/name&gt;&#10;            &lt;url&gt;https://repo.spring.io/release&lt;/url&gt;&#10;        &lt;/pluginRepository&gt;&#10;    &lt;/pluginRepositories&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/prescription-service/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/prescription-service/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;prescription-service&lt;/artifactId&gt;&#10;    &lt;name&gt;prescription-service&lt;/name&gt;&#10;    &lt;description&gt;Prescription management microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;prescription-service&lt;/artifactId&gt;&#10;    &lt;name&gt;prescription-service&lt;/name&gt;&#10;    &lt;description&gt;Prescription management microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/prescription-service/src/main/java/com/docmate/prescription/repository/PrescriptionMedicineRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/prescription-service/src/main/java/com/docmate/prescription/repository/PrescriptionMedicineRepository.java" />
              <option name="originalContent" value="package com.docmate.prescription.repository;&#10;&#10;import com.docmate.common.entity.PrescriptionMedicine;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;@Repository&#10;public interface PrescriptionMedicineRepository extends JpaRepository&lt;PrescriptionMedicine, Long&gt; {&#10;public interface PrescriptionMedicineRepository extends JpaRepository&lt;PrescriptionMedicine, Long&gt; {&#10;    List&lt;PrescriptionMedicine&gt; findByPrescriptionId(Long prescriptionId);&#10;&#10;    List&lt;PrescriptionMedicine&gt; findByPrescriptionId(Long prescriptionId);&#10;}&#10;    void deleteByPrescriptionId(Long prescriptionId);&#10;" />
              <option name="updatedContent" value="package com.docmate.prescription.repository;&#10;&#10;import com.docmate.common.entity.PrescriptionMedicine;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface PrescriptionMedicineRepository extends JpaRepository&lt;PrescriptionMedicine, UUID&gt; {&#10;&#10;    List&lt;PrescriptionMedicine&gt; findByPrescriptionId(UUID prescriptionId);&#10;&#10;    void deleteByPrescriptionId(UUID prescriptionId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/prescription-service/src/main/resources/application.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/prescription-service/src/main/resources/application.yml" />
              <option name="originalContent" value="spring:&#10;  application:&#10;    name: prescription-service&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;&#10;  liquibase:&#10;    change-log: classpath:db/changelog/db.changelog-master.xml&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;    default-schema: public&#10;    drop-first: false&#10;&#10;server:&#10;  port: ${PORT:8087}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc&#10;" />
              <option name="updatedContent" value="spring:&#10;  application:&#10;    name: prescription-service&#10;&#10;  datasource:&#10;    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:docmate_platform}&#10;    username: ${DB_USERNAME:docmate}&#10;    password: ${DB_PASSWORD:password}&#10;    driver-class-name: org.postgresql.Driver&#10;&#10;  jpa:&#10;    hibernate:&#10;      ddl-auto: validate&#10;    show-sql: false&#10;    properties:&#10;      hibernate:&#10;        dialect: org.hibernate.dialect.PostgreSQLDialect&#10;        format_sql: true&#10;&#10;  liquibase:&#10;    enabled: false  # Disabled - using centralized db-migration service&#10;&#10;server:&#10;  port: ${PORT:8087}&#10;  servlet:&#10;    context-path: /&#10;&#10;management:&#10;  endpoints:&#10;    web:&#10;      exposure:&#10;        include: health,info,metrics&#10;  endpoint:&#10;    health:&#10;      show-details: when-authorized&#10;&#10;logging:&#10;  level:&#10;    com.docmate: ${LOG_LEVEL:INFO}&#10;    org.springframework.security: ${LOG_LEVEL:INFO}&#10;  pattern:&#10;    console: &quot;%d{yyyy-MM-dd HH:mm:ss} - %msg%n&quot;&#10;    file: &quot;%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n&quot;&#10;&#10;app:&#10;  jwt:&#10;    secret: ${JWT_SECRET:docmate-secret-key-for-jwt-token-generation-2024}&#10;    expiration: ${JWT_EXPIRATION:86400000}&#10;    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}&#10;&#10;springdoc:&#10;  api-docs:&#10;    path: /v3/api-docs&#10;  swagger-ui:&#10;    path: /swagger-ui.html&#10;    display-request-duration: true&#10;    groups-order: desc" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/prescription-service/src/main/resources/db/migration/V1__Create_prescription_tables.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/prescription-service/src/main/resources/db/migration/V1__Create_prescription_tables.sql" />
              <option name="updatedContent" value="-- Enable UUID support&#10;CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;;&#10;&#10;-- USERS TABLE (Reference for foreign keys)&#10;CREATE TABLE IF NOT EXISTS users (&#10;    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),&#10;    full_name VARCHAR(100) NOT NULL,&#10;    email VARCHAR(100) UNIQUE NOT NULL,&#10;    phone VARCHAR(15),&#10;    password_hash TEXT NOT NULL,&#10;    role VARCHAR(20) CHECK (role IN ('PATIENT', 'DOCTOR', 'ADMIN')) NOT NULL,&#10;    is_active BOOLEAN DEFAULT true,&#10;    profile_picture TEXT,&#10;    email_verified BOOLEAN DEFAULT false,&#10;    phone_verified BOOLEAN DEFAULT false,&#10;    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- APPOINTMENTS TABLE (Reference for foreign keys)&#10;CREATE TABLE IF NOT EXISTS appointments (&#10;    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),&#10;    doctor_id UUID NOT NULL,&#10;    patient_id UUID NOT NULL,&#10;    appointment_date_time TIMESTAMP NOT NULL,&#10;    mode VARCHAR(20) CHECK (mode IN ('VIDEO', 'TELE', 'OFFLINE')) NOT NULL,&#10;    status VARCHAR(20) CHECK (status IN ('PENDING', 'CONFIRMED', 'CANCELLED', 'COMPLETED')) DEFAULT 'PENDING',&#10;    payment_status VARCHAR(20) CHECK (payment_status IN ('PENDING', 'PAID', 'FAILED', 'REFUNDED')),&#10;    notes TEXT,&#10;    cancellation_reason TEXT,&#10;    meeting_link TEXT,&#10;    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- PATIENTS TABLE (Reference for foreign keys)&#10;CREATE TABLE IF NOT EXISTS patients (&#10;    id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,&#10;    date_of_birth DATE,&#10;    gender VARCHAR(10) CHECK (gender IN ('MALE', 'FEMALE', 'OTHER')),&#10;    blood_type VARCHAR(5),&#10;    height VARCHAR(10),&#10;    weight VARCHAR(10),&#10;    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- DOCTORS TABLE (Reference for foreign keys)&#10;CREATE TABLE IF NOT EXISTS doctors (&#10;    id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,&#10;    license_number VARCHAR(50) UNIQUE NOT NULL,&#10;    experience_years INTEGER DEFAULT 0,&#10;    fee_per_consultation NUMERIC(10,2) DEFAULT 0.00,&#10;    bio TEXT,&#10;    video_consultation_enabled BOOLEAN DEFAULT false,&#10;    tele_consultation_enabled BOOLEAN DEFAULT false,&#10;    emergency_available BOOLEAN DEFAULT false,&#10;    is_approved BOOLEAN DEFAULT false,&#10;    is_active BOOLEAN DEFAULT true,&#10;    clinic_name VARCHAR(200),&#10;    average_rating NUMERIC(3,2) DEFAULT 0.00,&#10;    review_count INTEGER DEFAULT 0,&#10;    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- PRESCRIPTIONS&#10;CREATE TABLE IF NOT EXISTS prescriptions (&#10;    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),&#10;    appointment_id UUID REFERENCES appointments(id) ON DELETE CASCADE,&#10;    doctor_id UUID REFERENCES doctors(id),&#10;    patient_id UUID REFERENCES patients(id),&#10;    diagnosis TEXT NOT NULL,&#10;    symptoms TEXT,&#10;    advice TEXT,&#10;    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- PRESCRIPTION MEDICINES&#10;CREATE TABLE IF NOT EXISTS prescription_medicines (&#10;    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),&#10;    prescription_id UUID REFERENCES prescriptions(id) ON DELETE CASCADE,&#10;    name VARCHAR(200) NOT NULL,&#10;    dosage VARCHAR(100) NOT NULL,&#10;    frequency VARCHAR(100) NOT NULL,&#10;    duration VARCHAR(100) NOT NULL,&#10;    instructions TEXT,&#10;    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- Create indexes for better performance&#10;CREATE INDEX IF NOT EXISTS idx_prescriptions_appointment_id ON prescriptions(appointment_id);&#10;CREATE INDEX IF NOT EXISTS idx_prescriptions_doctor_id ON prescriptions(doctor_id);&#10;CREATE INDEX IF NOT EXISTS idx_prescriptions_patient_id ON prescriptions(patient_id);&#10;CREATE INDEX IF NOT EXISTS idx_prescription_medicines_prescription_id ON prescription_medicines(prescription_id);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/taxonomy-service/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/taxonomy-service/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;taxonomy-service&lt;/artifactId&gt;&#10;    &lt;name&gt;taxonomy-service&lt;/name&gt;&#10;    &lt;description&gt;Medical taxonomy management microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;taxonomy-service&lt;/artifactId&gt;&#10;    &lt;name&gt;taxonomy-service&lt;/name&gt;&#10;    &lt;description&gt;Medical taxonomy management microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/taxonomy-service/src/main/resources/db/migration/V1__Create_taxonomy_tables.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/taxonomy-service/src/main/resources/db/migration/V1__Create_taxonomy_tables.sql" />
              <option name="updatedContent" value="-- Enable UUID support&#10;CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;;&#10;&#10;-- SPECIALIZATIONS (Master data)&#10;CREATE TABLE IF NOT EXISTS specializations (&#10;    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),&#10;    name VARCHAR(100) UNIQUE NOT NULL,&#10;    description TEXT,&#10;    is_active BOOLEAN DEFAULT true,&#10;    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- CONDITIONS (Master data for filtering)&#10;CREATE TABLE IF NOT EXISTS conditions (&#10;    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),&#10;    name VARCHAR(100) UNIQUE NOT NULL,&#10;    description TEXT,&#10;    is_active BOOLEAN DEFAULT true,&#10;    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;    updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;);&#10;&#10;-- Create indexes for better performance&#10;CREATE INDEX IF NOT EXISTS idx_specializations_name ON specializations(name);&#10;CREATE INDEX IF NOT EXISTS idx_specializations_active ON specializations(is_active);&#10;CREATE INDEX IF NOT EXISTS idx_conditions_name ON conditions(name);&#10;CREATE INDEX IF NOT EXISTS idx_conditions_active ON conditions(is_active);&#10;&#10;-- Insert sample specializations&#10;INSERT INTO specializations (name, description) VALUES&#10;('Cardiology', 'Heart and cardiovascular system'),&#10;('Dermatology', 'Skin, hair, and nail conditions'),&#10;('Neurology', 'Brain and nervous system disorders'),&#10;('Pediatrics', 'Medical care for infants, children, and adolescents'),&#10;('Orthopedics', 'Musculoskeletal system'),&#10;('Psychiatry', 'Mental health and behavioral disorders'),&#10;('General Medicine', 'Primary care and general health issues'),&#10;('Gynecology', 'Women''s reproductive health'),&#10;('Ophthalmology', 'Eye and vision care'),&#10;('ENT', 'Ear, nose, and throat disorders')&#10;ON CONFLICT (name) DO NOTHING;&#10;&#10;-- Insert sample conditions&#10;INSERT INTO conditions (name, description) VALUES&#10;('Diabetes', 'Blood sugar regulation disorders'),&#10;('Hypertension', 'High blood pressure'),&#10;('Asthma', 'Respiratory condition affecting breathing'),&#10;('Arthritis', 'Joint inflammation and pain'),&#10;('Depression', 'Mental health condition affecting mood'),&#10;('Anxiety', 'Mental health condition causing excessive worry'),&#10;('Migraine', 'Severe recurring headaches'),&#10;('Back Pain', 'Pain in the back or spine'),&#10;('Skin Allergies', 'Allergic reactions affecting the skin'),&#10;('Heart Disease', 'Various conditions affecting the heart')&#10;ON CONFLICT (name) DO NOTHING;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;user-service&lt;/artifactId&gt;&#10;    &lt;name&gt;user-service&lt;/name&gt;&#10;    &lt;description&gt;User management microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;        &lt;artifactId&gt;docmate-platform&lt;/artifactId&gt;&#10;        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;&#10;    &lt;/parent&gt;&#10;    &lt;artifactId&gt;user-service&lt;/artifactId&gt;&#10;    &lt;name&gt;user-service&lt;/name&gt;&#10;    &lt;description&gt;User management microservice for DocMate platform&lt;/description&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starters --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Spring Boot Actuator for Health Checks --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.liquibase&lt;/groupId&gt;&#10;            &lt;artifactId&gt;liquibase-core&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Documentation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Common Module --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.docmate&lt;/groupId&gt;&#10;            &lt;artifactId&gt;common&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Utilities --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mapstruct&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mapstruct&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Test Dependencies --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/UserServiceApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/UserServiceApplication.java" />
              <option name="originalContent" value="package com.docmate.user;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.context.annotation.ComponentScan;&#10;import org.springframework.context.annotation.FilterType;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EntityScan(basePackages = {&quot;com.docmate.common.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.common.repository&quot;})&#10;@ComponentScan(basePackages = {&quot;com.docmate.user&quot;, &quot;com.docmate.common&quot;})&#10;public class UserServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(UserServiceApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.boot.autoconfigure.domain.EntityScan;&#10;import org.springframework.context.annotation.ComponentScan;&#10;import org.springframework.data.jpa.repository.config.EnableJpaAuditing;&#10;import org.springframework.data.jpa.repository.config.EnableJpaRepositories;&#10;&#10;@SpringBootApplication&#10;@EnableJpaAuditing&#10;@EntityScan(basePackages = {&quot;com.docmate.common.entity&quot;})&#10;@EnableJpaRepositories(basePackages = {&quot;com.docmate.common.repository&quot;})&#10;@ComponentScan(basePackages = {&quot;com.docmate.user&quot;, &quot;com.docmate.common&quot;})&#10;public class UserServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(UserServiceApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/controller/DoctorController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/controller/DoctorController.java" />
              <option name="originalContent" value="package com.docmate.user.controller;&#10;&#10;import com.docmate.common.dto.response.ApiResponse;&#10;import com.docmate.common.dto.response.PageResponse;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.user.dto.DoctorDto;&#10;import com.docmate.user.dto.DoctorSearchResponse;&#10;import com.docmate.user.dto.DoctorStatsResponse;&#10;import com.docmate.user.dto.UpdateDoctorProfileRequest;&#10;import com.docmate.user.service.DoctorService;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.security.SecurityRequirement;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/doctors&quot;)&#10;@RequiredArgsConstructor&#10;@Tag(name = &quot;Doctor Management&quot;, description = &quot;Doctor profile management APIs&quot;)&#10;@SecurityRequirement(name = &quot;bearerAuth&quot;)&#10;public class DoctorController {&#10;&#10;    private final DoctorService doctorService;&#10;&#10;    @GetMapping(&quot;/search&quot;)&#10;    @Operation(summary = &quot;Search doctors&quot;, description = &quot;Search doctors with filters&quot;)&#10;    public ResponseEntity&lt;PageResponse&lt;DoctorSearchResponse&gt;&gt; searchDoctors(&#10;            @RequestParam(required = false) String query,&#10;            @RequestParam(required = false) UUID specializationId,&#10;            @RequestParam(required = false) UUID conditionId,&#10;            @RequestParam(required = false) BigDecimal maxFee,&#10;            @RequestParam(required = false) String consultationType,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;DoctorSearchResponse&gt; doctors = doctorService.searchDoctors(&#10;                query, specializationId, conditionId, maxFee, consultationType, pageable);&#10;&#10;        return ResponseEntity.ok(PageResponse.of(doctors));&#10;    }&#10;&#10;    @GetMapping(&quot;/me/profile&quot;)&#10;    @Operation(summary = &quot;Get current doctor profile&quot;, description = &quot;Get the current doctor's profile&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;DoctorDto&gt; getDoctorProfile(@AuthenticationPrincipal User currentUser) {&#10;        DoctorDto profile = doctorService.getDoctorByEmail(currentUser.getEmail());&#10;        return ResponseEntity.ok(profile);&#10;    }&#10;&#10;    @PutMapping(&quot;/me/profile&quot;)&#10;    @Operation(summary = &quot;Update doctor profile&quot;, description = &quot;Update the current doctor's profile&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;DoctorDto&gt; updateDoctorProfile(&#10;            @Valid @RequestBody UpdateDoctorProfileRequest request,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        DoctorDto currentProfile = doctorService.getDoctorByEmail(currentUser.getEmail());&#10;        DoctorDto updatedProfile = doctorService.updateDoctorProfile(currentProfile.getId(), request);&#10;        return ResponseEntity.ok(updatedProfile);&#10;    }&#10;&#10;    @GetMapping(&quot;/me/stats&quot;)&#10;    @Operation(summary = &quot;Get doctor statistics&quot;, description = &quot;Get current doctor's statistics&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;DoctorStatsResponse&gt; getDoctorStats(@AuthenticationPrincipal User currentUser) {&#10;        DoctorStatsResponse stats = doctorService.getDoctorStats(currentUser.getId());&#10;        return ResponseEntity.ok(stats);&#10;    }&#10;&#10;    @PostMapping(&quot;/profile&quot;)&#10;    @Operation(summary = &quot;Create doctor profile&quot;, description = &quot;Create a new doctor profile&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;DoctorDto&gt;&gt; createProfile(&#10;            @Valid @RequestBody DoctorDto doctorDto,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        DoctorDto createdProfile = doctorService.createDoctorProfile(doctorDto, currentUser);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Doctor profile created successfully - Pending approval&quot;, createdProfile));&#10;    }&#10;&#10;    @GetMapping(&quot;/{doctorId}&quot;)&#10;    @Operation(summary = &quot;Get doctor by ID&quot;, description = &quot;Get doctor profile by ID&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;DoctorDto&gt;&gt; getDoctorById(@PathVariable UUID doctorId) {&#10;        DoctorDto doctor = doctorService.getDoctorProfile(doctorId);&#10;        return ResponseEntity.ok(ApiResponse.success(doctor));&#10;    }&#10;&#10;    @PutMapping(&quot;/{doctorId}&quot;)&#10;    @Operation(summary = &quot;Update doctor by ID&quot;, description = &quot;Update doctor profile by ID (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;DoctorDto&gt;&gt; updateDoctorById(&#10;            @PathVariable UUID doctorId,&#10;            @Valid @RequestBody UpdateDoctorProfileRequest request) {&#10;        DoctorDto updatedProfile = doctorService.updateDoctorProfile(doctorId, request);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Doctor profile updated successfully&quot;, updatedProfile));&#10;    }&#10;&#10;    @PostMapping(&quot;/{doctorId}/approve&quot;)&#10;    @Operation(summary = &quot;Approve doctor&quot;, description = &quot;Approve doctor profile (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;DoctorDto&gt;&gt; approveDoctor(@PathVariable UUID doctorId) {&#10;        DoctorDto approvedDoctor = doctorService.approveDoctorProfile(doctorId);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Doctor approved successfully&quot;, approvedDoctor));&#10;    }&#10;&#10;    @PostMapping(&quot;/{doctorId}/reject&quot;)&#10;    @Operation(summary = &quot;Reject doctor&quot;, description = &quot;Reject doctor profile (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;DoctorDto&gt;&gt; rejectDoctor(@PathVariable UUID doctorId) {&#10;        DoctorDto rejectedDoctor = doctorService.rejectDoctorProfile(doctorId);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Doctor rejected successfully&quot;, rejectedDoctor));&#10;    }&#10;&#10;    @GetMapping(&quot;/approved&quot;)&#10;    @Operation(summary = &quot;Get approved doctors&quot;, description = &quot;Get all approved doctors with pagination&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PageResponse&lt;DoctorDto&gt;&gt;&gt; getApprovedDoctors(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;DoctorDto&gt; doctors = doctorService.getApprovedDoctors(pageable);&#10;        return ResponseEntity.ok(ApiResponse.success(PageResponse.of(doctors)));&#10;    }&#10;&#10;    @GetMapping(&quot;/pending&quot;)&#10;    @Operation(summary = &quot;Get pending approval doctors&quot;, description = &quot;Get doctors pending approval (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PageResponse&lt;DoctorDto&gt;&gt;&gt; getPendingApprovalDoctors(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;DoctorDto&gt; doctors = doctorService.getPendingApprovalDoctors(pageable);&#10;        PageResponse&lt;DoctorDto&gt; pageResponse = PageResponse.of(&#10;                doctors.getContent(),&#10;                doctors.getNumber(),&#10;                doctors.getSize(),&#10;                doctors.getTotalElements()&#10;        );&#10;        return ResponseEntity.ok(ApiResponse.success(pageResponse));&#10;    }&#10;&#10;    @GetMapping(&quot;/specialization/{specializationId}&quot;)&#10;    @Operation(summary = &quot;Get doctors by specialization&quot;, description = &quot;Get doctors by specialization ID&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PageResponse&lt;DoctorDto&gt;&gt;&gt; getDoctorsBySpecialization(&#10;            @PathVariable UUID specializationId,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;DoctorDto&gt; doctors = doctorService.getDoctorsBySpecialization(specializationId, pageable);&#10;        PageResponse&lt;DoctorDto&gt; pageResponse = PageResponse.of(&#10;                doctors.getContent(),&#10;                doctors.getNumber(),&#10;                doctors.getSize(),&#10;                doctors.getTotalElements()&#10;        );&#10;        return ResponseEntity.ok(ApiResponse.success(pageResponse));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{doctorId}&quot;)&#10;    @Operation(summary = &quot;Delete doctor&quot;, description = &quot;Delete doctor profile (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; deleteDoctor(@PathVariable UUID doctorId) {&#10;        doctorService.deleteDoctor(doctorId);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Doctor deleted successfully&quot;, &quot;Doctor profile has been deactivated&quot;));&#10;    }&#10;&#10;    @GetMapping(&quot;/count/approved&quot;)&#10;    @Operation(summary = &quot;Get approved doctor count&quot;, description = &quot;Get total approved doctor count&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Long&gt;&gt; getApprovedDoctorCount() {&#10;        long count = doctorService.getApprovedDoctorCount();&#10;        return ResponseEntity.ok(ApiResponse.success(count));&#10;    }&#10;&#10;    @GetMapping(&quot;/count/pending&quot;)&#10;    @Operation(summary = &quot;Get pending doctor count&quot;, description = &quot;Get pending approval doctor count (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Long&gt;&gt; getPendingDoctorCount() {&#10;        long count = doctorService.getPendingApprovalDoctorCount();&#10;        return ResponseEntity.ok(ApiResponse.success(count));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user.controller;&#10;&#10;import com.docmate.common.dto.response.ApiResponse;&#10;import com.docmate.common.dto.response.PageResponse;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.dto.DoctorDto;&#10;import com.docmate.common.dto.DoctorSearchResponse;&#10;import com.docmate.common.dto.DoctorStatsResponse;&#10;import com.docmate.common.dto.UpdateDoctorProfileRequest;&#10;import com.docmate.user.service.DoctorService;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.security.SecurityRequirement;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/doctors&quot;)&#10;@RequiredArgsConstructor&#10;@Tag(name = &quot;Doctor Management&quot;, description = &quot;Doctor profile management APIs&quot;)&#10;@SecurityRequirement(name = &quot;bearerAuth&quot;)&#10;public class DoctorController {&#10;&#10;    private final DoctorService doctorService;&#10;&#10;    @GetMapping(&quot;/search&quot;)&#10;    @Operation(summary = &quot;Search doctors&quot;, description = &quot;Search doctors with filters&quot;)&#10;    public ResponseEntity&lt;PageResponse&lt;DoctorSearchResponse&gt;&gt; searchDoctors(&#10;            @RequestParam(required = false) String query,&#10;            @RequestParam(required = false) UUID specializationId,&#10;            @RequestParam(required = false) UUID conditionId,&#10;            @RequestParam(required = false) BigDecimal maxFee,&#10;            @RequestParam(required = false) String consultationType,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;DoctorSearchResponse&gt; doctors = doctorService.searchDoctors(&#10;                query, specializationId, conditionId, maxFee, consultationType, pageable);&#10;&#10;        return ResponseEntity.ok(PageResponse.of(doctors));&#10;    }&#10;&#10;    @GetMapping(&quot;/me/profile&quot;)&#10;    @Operation(summary = &quot;Get current doctor profile&quot;, description = &quot;Get the current doctor's profile&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;DoctorDto&gt; getDoctorProfile(@AuthenticationPrincipal User currentUser) {&#10;        DoctorDto profile = doctorService.getDoctorByEmail(currentUser.getEmail());&#10;        return ResponseEntity.ok(profile);&#10;    }&#10;&#10;    @PutMapping(&quot;/me/profile&quot;)&#10;    @Operation(summary = &quot;Update doctor profile&quot;, description = &quot;Update the current doctor's profile&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;DoctorDto&gt; updateDoctorProfile(&#10;            @Valid @RequestBody UpdateDoctorProfileRequest request,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        DoctorDto currentProfile = doctorService.getDoctorByEmail(currentUser.getEmail());&#10;        DoctorDto updatedProfile = doctorService.updateDoctorProfile(currentProfile.getId(), request);&#10;        return ResponseEntity.ok(updatedProfile);&#10;    }&#10;&#10;    @GetMapping(&quot;/me/stats&quot;)&#10;    @Operation(summary = &quot;Get doctor statistics&quot;, description = &quot;Get current doctor's statistics&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;DoctorStatsResponse&gt; getDoctorStats(@AuthenticationPrincipal User currentUser) {&#10;        DoctorStatsResponse stats = doctorService.getDoctorStats(currentUser.getId());&#10;        return ResponseEntity.ok(stats);&#10;    }&#10;&#10;    @PostMapping(&quot;/profile&quot;)&#10;    @Operation(summary = &quot;Create doctor profile&quot;, description = &quot;Create a new doctor profile&quot;)&#10;    @PreAuthorize(&quot;hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;DoctorDto&gt;&gt; createProfile(&#10;            @Valid @RequestBody DoctorDto doctorDto,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        DoctorDto createdProfile = doctorService.createDoctorProfile(doctorDto, currentUser);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Doctor profile created successfully - Pending approval&quot;, createdProfile));&#10;    }&#10;&#10;    @GetMapping(&quot;/{doctorId}&quot;)&#10;    @Operation(summary = &quot;Get doctor by ID&quot;, description = &quot;Get doctor profile by ID&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;DoctorDto&gt;&gt; getDoctorById(@PathVariable UUID doctorId) {&#10;        DoctorDto doctor = doctorService.getDoctorProfile(doctorId);&#10;        return ResponseEntity.ok(ApiResponse.success(doctor));&#10;    }&#10;&#10;    @PutMapping(&quot;/{doctorId}&quot;)&#10;    @Operation(summary = &quot;Update doctor by ID&quot;, description = &quot;Update doctor profile by ID (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;DoctorDto&gt;&gt; updateDoctorById(&#10;            @PathVariable UUID doctorId,&#10;            @Valid @RequestBody UpdateDoctorProfileRequest request) {&#10;        DoctorDto updatedProfile = doctorService.updateDoctorProfile(doctorId, request);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Doctor profile updated successfully&quot;, updatedProfile));&#10;    }&#10;&#10;    @PostMapping(&quot;/{doctorId}/approve&quot;)&#10;    @Operation(summary = &quot;Approve doctor&quot;, description = &quot;Approve doctor profile (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;DoctorDto&gt;&gt; approveDoctor(@PathVariable UUID doctorId) {&#10;        DoctorDto approvedDoctor = doctorService.approveDoctorProfile(doctorId);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Doctor approved successfully&quot;, approvedDoctor));&#10;    }&#10;&#10;    @PostMapping(&quot;/{doctorId}/reject&quot;)&#10;    @Operation(summary = &quot;Reject doctor&quot;, description = &quot;Reject doctor profile (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;DoctorDto&gt;&gt; rejectDoctor(@PathVariable UUID doctorId) {&#10;        DoctorDto rejectedDoctor = doctorService.rejectDoctorProfile(doctorId);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Doctor rejected successfully&quot;, rejectedDoctor));&#10;    }&#10;&#10;    @GetMapping(&quot;/approved&quot;)&#10;    @Operation(summary = &quot;Get approved doctors&quot;, description = &quot;Get all approved doctors with pagination&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PageResponse&lt;DoctorDto&gt;&gt;&gt; getApprovedDoctors(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;DoctorDto&gt; doctors = doctorService.getApprovedDoctors(pageable);&#10;        return ResponseEntity.ok(ApiResponse.success(PageResponse.of(doctors)));&#10;    }&#10;&#10;    @GetMapping(&quot;/pending&quot;)&#10;    @Operation(summary = &quot;Get pending approval doctors&quot;, description = &quot;Get doctors pending approval (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PageResponse&lt;DoctorDto&gt;&gt;&gt; getPendingApprovalDoctors(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;DoctorDto&gt; doctors = doctorService.getPendingApprovalDoctors(pageable);&#10;        PageResponse&lt;DoctorDto&gt; pageResponse = PageResponse.of(&#10;                doctors.getContent(),&#10;                doctors.getNumber(),&#10;                doctors.getSize(),&#10;                doctors.getTotalElements()&#10;        );&#10;        return ResponseEntity.ok(ApiResponse.success(pageResponse));&#10;    }&#10;&#10;    @GetMapping(&quot;/specialization/{specializationId}&quot;)&#10;    @Operation(summary = &quot;Get doctors by specialization&quot;, description = &quot;Get doctors by specialization ID&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PageResponse&lt;DoctorDto&gt;&gt;&gt; getDoctorsBySpecialization(&#10;            @PathVariable UUID specializationId,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;DoctorDto&gt; doctors = doctorService.getDoctorsBySpecialization(specializationId, pageable);&#10;        PageResponse&lt;DoctorDto&gt; pageResponse = PageResponse.of(&#10;                doctors.getContent(),&#10;                doctors.getNumber(),&#10;                doctors.getSize(),&#10;                doctors.getTotalElements()&#10;        );&#10;        return ResponseEntity.ok(ApiResponse.success(pageResponse));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{doctorId}&quot;)&#10;    @Operation(summary = &quot;Delete doctor&quot;, description = &quot;Delete doctor profile (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; deleteDoctor(@PathVariable UUID doctorId) {&#10;        doctorService.deleteDoctor(doctorId);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Doctor deleted successfully&quot;, &quot;Doctor profile has been deactivated&quot;));&#10;    }&#10;&#10;    @GetMapping(&quot;/count/approved&quot;)&#10;    @Operation(summary = &quot;Get approved doctor count&quot;, description = &quot;Get total approved doctor count&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Long&gt;&gt; getApprovedDoctorCount() {&#10;        long count = doctorService.getApprovedDoctorCount();&#10;        return ResponseEntity.ok(ApiResponse.success(count));&#10;    }&#10;&#10;    @GetMapping(&quot;/count/pending&quot;)&#10;    @Operation(summary = &quot;Get pending doctor count&quot;, description = &quot;Get pending approval doctor count (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Long&gt;&gt; getPendingDoctorCount() {&#10;        long count = doctorService.getPendingApprovalDoctorCount();&#10;        return ResponseEntity.ok(ApiResponse.success(count));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/controller/PatientController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/controller/PatientController.java" />
              <option name="originalContent" value="package com.docmate.user.controller;&#10;&#10;import com.docmate.common.dto.response.ApiResponse;&#10;import com.docmate.common.dto.response.PageResponse;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.dto.PatientDto;&#10;import com.docmate.common.dto.PatientMedicalHistoryResponse;&#10;import com.docmate.common.dto.PatientReportResponse;&#10;import com.docmate.common.dto.UpdatePatientMedicalHistoryRequest;&#10;import com.docmate.common.dto.PatientProfileDto;&#10;import com.docmate.common.dto.UpdatePatientProfileDto;&#10;import com.docmate.user.service.PatientService;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.security.SecurityRequirement;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;import java.time.LocalDate;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/patients&quot;)&#10;@RequiredArgsConstructor&#10;@Tag(name = &quot;Patient Management&quot;, description = &quot;Patient profile management APIs&quot;)&#10;@SecurityRequirement(name = &quot;bearerAuth&quot;)&#10;@PreAuthorize(&quot;hasRole('PATIENT')&quot;)&#10;public class PatientController {&#10;&#10;    private final PatientService patientService;&#10;&#10;    @GetMapping(&quot;/me/profile&quot;)&#10;    @Operation(summary = &quot;Get current patient profile&quot;, description = &quot;Get the current patient's profile&quot;)&#10;    public ResponseEntity&lt;PatientProfileDto&gt; getPatientProfile(@AuthenticationPrincipal User currentUser) {&#10;        PatientProfileDto profile = patientService.getPatientByEmail(currentUser.getEmail());&#10;        return ResponseEntity.ok(profile);&#10;    }&#10;&#10;    @PutMapping(&quot;/me/profile&quot;)&#10;    @Operation(summary = &quot;Update patient profile&quot;, description = &quot;Update the current patient's profile&quot;)&#10;    public ResponseEntity&lt;PatientProfileDto&gt; updatePatientProfile(&#10;            @Valid @RequestBody UpdatePatientProfileDto request,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        PatientProfileDto currentProfile = patientService.getPatientByEmail(currentUser.getEmail());&#10;        PatientProfileDto updatedProfile = patientService.updatePatientProfile(currentProfile.id(), request);&#10;        return ResponseEntity.ok(updatedProfile);&#10;    }&#10;&#10;    @PutMapping(&quot;/me/medical-history&quot;)&#10;    @Operation(summary = &quot;Update medical history&quot;, description = &quot;Update patient's medical history&quot;)&#10;    public ResponseEntity&lt;PatientMedicalHistoryResponse&gt; updateMedicalHistory(&#10;            @Valid @RequestBody UpdatePatientMedicalHistoryRequest request,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        PatientMedicalHistoryResponse response = patientService.updateMedicalHistory(currentUser.getId(), request);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    @GetMapping(&quot;/me/reports&quot;)&#10;    @Operation(summary = &quot;Get patient reports&quot;, description = &quot;Get patient's medical reports&quot;)&#10;    public ResponseEntity&lt;PageResponse&lt;PatientReportResponse&gt;&gt; getPatientReports(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @AuthenticationPrincipal User currentUser) {&#10;&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;PatientReportResponse&gt; reports = patientService.getPatientReports(currentUser.getId(), pageable);&#10;        return ResponseEntity.ok(PageResponse.of(reports));&#10;    }&#10;&#10;    @PostMapping(&quot;/me/reports&quot;)&#10;    @Operation(summary = &quot;Upload patient report&quot;, description = &quot;Upload a new medical report&quot;)&#10;    public ResponseEntity&lt;PatientReportResponse&gt; uploadPatientReport(&#10;            @RequestParam(&quot;file&quot;) MultipartFile file,&#10;            @RequestParam(&quot;title&quot;) String title,&#10;            @RequestParam(value = &quot;description&quot;, required = false) String description,&#10;            @RequestParam(value = &quot;testDate&quot;, required = false) LocalDate testDate,&#10;            @AuthenticationPrincipal User currentUser) {&#10;&#10;        PatientReportResponse response = patientService.uploadPatientReport(&#10;            currentUser.getId(), file, title, description, testDate);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/me/reports/{id}&quot;)&#10;    @Operation(summary = &quot;Delete patient report&quot;, description = &quot;Delete a patient's medical report&quot;)&#10;    public ResponseEntity&lt;Void&gt; deletePatientReport(&#10;            @PathVariable UUID id,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        patientService.deletePatientReport(currentUser.getId(), id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    // Admin-only endpoints&#10;    @PostMapping(&quot;/profile&quot;)&#10;    @Operation(summary = &quot;Create patient profile&quot;, description = &quot;Create a new patient profile&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PatientDto&gt;&gt; createProfile(&#10;            @Valid @RequestBody PatientDto patientDto,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        PatientDto createdProfile = patientService.createPatientProfile(patientDto, currentUser);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Patient profile created successfully&quot;, createdProfile));&#10;    }&#10;&#10;    @GetMapping(&quot;/{patientId}&quot;)&#10;    @Operation(summary = &quot;Get patient by ID&quot;, description = &quot;Get patient profile by ID&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN') or hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PatientProfileDto&gt;&gt; getPatientById(@PathVariable UUID patientId) {&#10;        PatientProfileDto patient = patientService.getPatientProfile(patientId);&#10;        return ResponseEntity.ok(ApiResponse.success(patient));&#10;    }&#10;&#10;    @GetMapping&#10;    @Operation(summary = &quot;Get all patients&quot;, description = &quot;Get all patients with pagination (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PageResponse&lt;PatientDto&gt;&gt;&gt; getAllPatients(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;PatientDto&gt; patients = patientService.getAllPatients(pageable);&#10;        return ResponseEntity.ok(ApiResponse.success(PageResponse.of(patients)));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{patientId}&quot;)&#10;    @Operation(summary = &quot;Delete patient&quot;, description = &quot;Delete patient profile (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; deletePatient(@PathVariable UUID patientId) {&#10;        patientService.deletePatient(patientId);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Patient deleted successfully&quot;, &quot;Patient profile has been deactivated&quot;));&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user.controller;&#10;&#10;import com.docmate.common.dto.response.ApiResponse;&#10;import com.docmate.common.dto.response.PageResponse;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.dto.PatientDto;&#10;import com.docmate.common.dto.PatientMedicalHistoryResponse;&#10;import com.docmate.common.dto.PatientReportResponse;&#10;import com.docmate.common.dto.UpdatePatientMedicalHistoryRequest;&#10;import com.docmate.common.dto.PatientProfileDto;&#10;import com.docmate.common.dto.UpdatePatientProfileDto;&#10;import com.docmate.user.service.PatientService;&#10;import io.swagger.v3.oas.annotations.Operation;&#10;import io.swagger.v3.oas.annotations.security.SecurityRequirement;&#10;import io.swagger.v3.oas.annotations.tags.Tag;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;import java.time.LocalDate;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/patients&quot;)&#10;@RequiredArgsConstructor&#10;@Tag(name = &quot;Patient Management&quot;, description = &quot;Patient profile management APIs&quot;)&#10;@SecurityRequirement(name = &quot;bearerAuth&quot;)&#10;@PreAuthorize(&quot;hasRole('PATIENT')&quot;)&#10;public class PatientController {&#10;&#10;    private final PatientService patientService;&#10;&#10;    @GetMapping(&quot;/me/profile&quot;)&#10;    @Operation(summary = &quot;Get current patient profile&quot;, description = &quot;Get the current patient's profile&quot;)&#10;    public ResponseEntity&lt;PatientProfileDto&gt; getPatientProfile(@AuthenticationPrincipal User currentUser) {&#10;        PatientProfileDto profile = patientService.getPatientByEmail(currentUser.getEmail());&#10;        return ResponseEntity.ok(profile);&#10;    }&#10;&#10;    @PutMapping(&quot;/me/profile&quot;)&#10;    @Operation(summary = &quot;Update patient profile&quot;, description = &quot;Update the current patient's profile&quot;)&#10;    public ResponseEntity&lt;PatientProfileDto&gt; updatePatientProfile(&#10;            @Valid @RequestBody UpdatePatientProfileDto request,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        PatientProfileDto currentProfile = patientService.getPatientByEmail(currentUser.getEmail());&#10;        PatientProfileDto updatedProfile = patientService.updatePatientProfile(currentProfile.id(), request);&#10;        return ResponseEntity.ok(updatedProfile);&#10;    }&#10;&#10;    @PutMapping(&quot;/me/medical-history&quot;)&#10;    @Operation(summary = &quot;Update medical history&quot;, description = &quot;Update patient's medical history&quot;)&#10;    public ResponseEntity&lt;PatientMedicalHistoryResponse&gt; updateMedicalHistory(&#10;            @Valid @RequestBody UpdatePatientMedicalHistoryRequest request,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        PatientMedicalHistoryResponse response = patientService.updateMedicalHistory(currentUser.getId(), request);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    @GetMapping(&quot;/me/reports&quot;)&#10;    @Operation(summary = &quot;Get patient reports&quot;, description = &quot;Get patient's medical reports&quot;)&#10;    public ResponseEntity&lt;PageResponse&lt;PatientReportResponse&gt;&gt; getPatientReports(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @AuthenticationPrincipal User currentUser) {&#10;&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;PatientReportResponse&gt; reports = patientService.getPatientReports(currentUser.getId(), pageable);&#10;        return ResponseEntity.ok(PageResponse.of(reports));&#10;    }&#10;&#10;    @PostMapping(&quot;/me/reports&quot;)&#10;    @Operation(summary = &quot;Upload patient report&quot;, description = &quot;Upload a new medical report&quot;)&#10;    public ResponseEntity&lt;PatientReportResponse&gt; uploadPatientReport(&#10;            @RequestParam(&quot;file&quot;) MultipartFile file,&#10;            @RequestParam(&quot;title&quot;) String title,&#10;            @RequestParam(value = &quot;description&quot;, required = false) String description,&#10;            @RequestParam(value = &quot;testDate&quot;, required = false) LocalDate testDate,&#10;            @AuthenticationPrincipal User currentUser) {&#10;&#10;        PatientReportResponse response = patientService.uploadPatientReport(&#10;            currentUser.getId(), file, title, description, testDate);&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/me/reports/{reportId}&quot;)&#10;    @Operation(summary = &quot;Delete patient report&quot;, description = &quot;Delete a patient's medical report&quot;)&#10;    public ResponseEntity&lt;Void&gt; deletePatientReport(&#10;            @PathVariable UUID reportId,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        patientService.deletePatientReport(currentUser.getId(), reportId);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    // Admin-only endpoints&#10;    @PostMapping(&quot;/profile&quot;)&#10;    @Operation(summary = &quot;Create patient profile&quot;, description = &quot;Create a new patient profile&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PatientDto&gt;&gt; createProfile(&#10;            @Valid @RequestBody PatientDto patientDto,&#10;            @AuthenticationPrincipal User currentUser) {&#10;        PatientDto createdProfile = patientService.createPatientProfile(patientDto, currentUser);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Patient profile created successfully&quot;, createdProfile));&#10;    }&#10;&#10;    @GetMapping(&quot;/{patientId}&quot;)&#10;    @Operation(summary = &quot;Get patient by ID&quot;, description = &quot;Get patient profile by ID&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN') or hasRole('DOCTOR')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PatientProfileDto&gt;&gt; getPatientById(@PathVariable UUID patientId) {&#10;        PatientProfileDto patient = patientService.getPatientProfile(patientId);&#10;        return ResponseEntity.ok(ApiResponse.success(patient));&#10;    }&#10;&#10;    @GetMapping&#10;    @Operation(summary = &quot;Get all patients&quot;, description = &quot;Get all patients with pagination (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PageResponse&lt;PatientDto&gt;&gt;&gt; getAllPatients(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        Pageable pageable = PageRequest.of(page, size);&#10;        Page&lt;PatientDto&gt; patients = patientService.getAllPatients(pageable);&#10;        return ResponseEntity.ok(ApiResponse.success(PageResponse.of(patients)));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{patientId}&quot;)&#10;    @Operation(summary = &quot;Delete patient&quot;, description = &quot;Delete patient profile (Admin only)&quot;)&#10;    @PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; deletePatient(@PathVariable UUID patientId) {&#10;        patientService.deletePatient(patientId);&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Patient deleted successfully&quot;, &quot;Patient profile has been deactivated&quot;));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/controller/PatientMeController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/controller/PatientMeController.java" />
              <option name="originalContent" value="package com.docmate.user.controller;&#10;&#10;import com.docmate.common.dto.*;&#10;import com.docmate.user.dto.UpdatePatientMedicalHistoryRequest;&#10;import com.docmate.user.dto.PatientMedicalHistoryResponse;&#10;import com.docmate.user.service.FileService;&#10;import com.docmate.user.service.PatientService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.core.io.ByteArrayResource;&#10;import org.springframework.core.io.Resource;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.validation.annotation.Validated;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.UUID;&#10;&#10;/**&#10; * Controller exposing patient-specific endpoints under /api/patients/me.&#10; */&#10;@RestController&#10;@RequestMapping(&quot;/api/patients/me&quot;)&#10;@Validated&#10;@RequiredArgsConstructor&#10;public class PatientMeController {&#10;&#10;    private final PatientService patientService;&#10;    private final FileService fileService;&#10;&#10;    @GetMapping(&quot;/profile&quot;)&#10;    public PatientProfileDto getProfile(Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName()); // Assuming JWT contains user ID&#10;        return patientService.getPatientProfileByUserId(userId);&#10;    }&#10;&#10;    @PutMapping(&quot;/profile&quot;)&#10;    public PatientProfileDto updateProfile(@RequestBody UpdatePatientProfileDto dto, Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        // Get patient ID from user ID first&#10;        PatientProfileDto currentProfile = patientService.getPatientProfileByUserId(userId);&#10;        return patientService.updatePatientProfile(currentProfile.id(), dto);&#10;    }&#10;&#10;    @PutMapping(&quot;/medical-history&quot;)&#10;    public PatientMedicalHistoryResponse updateHistory(@RequestBody UpdatePatientMedicalHistoryRequest request, Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        PatientProfileDto currentProfile = patientService.getPatientProfileByUserId(userId);&#10;        return patientService.updateMedicalHistory(currentProfile.id(), request);&#10;    }&#10;&#10;    @GetMapping(&quot;/stats&quot;)&#10;    public PatientStatsDto stats(Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        PatientProfileDto currentProfile = patientService.getPatientProfileByUserId(userId);&#10;        return patientService.getPatientStats(currentProfile.id());&#10;    }&#10;&#10;    @GetMapping(&quot;/reports&quot;)&#10;    public Page&lt;ReportDto&gt; listReports(@RequestParam(defaultValue = &quot;0&quot;) int page,&#10;                                       @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;                                       Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        PatientProfileDto currentProfile = patientService.getPatientProfileByUserId(userId);&#10;        return fileService.getPatientReports(currentProfile.id(), PageRequest.of(page, size));&#10;    }&#10;&#10;    @PostMapping(value = &quot;/reports&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#10;    public ReportDto upload(@RequestPart(&quot;title&quot;) String title,&#10;                           @RequestPart(&quot;file&quot;) byte[] file,&#10;                           Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        PatientProfileDto currentProfile = patientService.getPatientProfileByUserId(userId);&#10;        return fileService.uploadPatientReport(currentProfile.id(), title, file);&#10;    }&#10;&#10;    @GetMapping(&quot;/reports/{id}/download&quot;)&#10;    public ResponseEntity&lt;Resource&gt; download(@PathVariable UUID id, Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        // Verify patient owns this report&#10;        byte[] content = fileService.downloadPatientReport(id, userId);&#10;        ByteArrayResource resource = new ByteArrayResource(content);&#10;        return ResponseEntity.ok()&#10;                .header(HttpHeaders.CONTENT_DISPOSITION, &quot;attachment; filename=report.pdf&quot;)&#10;                .contentType(MediaType.APPLICATION_OCTET_STREAM)&#10;                .body(resource);&#10;    }&#10;&#10;    @GetMapping(&quot;/reports/{id}/preview&quot;)&#10;    public ResponseEntity&lt;Resource&gt; preview(@PathVariable UUID id, Authentication authentication) {&#10;        byte[] content = new byte[0];&#10;        ByteArrayResource resource = new ByteArrayResource(content);&#10;        return ResponseEntity.ok()&#10;                .contentType(MediaType.IMAGE_PNG)&#10;                .body(resource);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/reports/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; delete(@PathVariable UUID id, Authentication authentication) {&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.docmate.user.controller;&#10;&#10;import com.docmate.common.dto.response.ApiResponse;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.dto.PatientMedicalHistoryResponse;&#10;import com.docmate.common.dto.UpdatePatientMedicalHistoryRequest;&#10;import com.docmate.user.dto.UpdatePatientProfileDto;&#10;import com.docmate.user.dto.PatientProfileDto;&#10;import com.docmate.user.dto.PatientStatsDto;&#10;import com.docmate.user.service.FileService;&#10;import com.docmate.user.service.PatientService;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.core.io.ByteArrayResource;&#10;import org.springframework.core.io.Resource;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.validation.annotation.Validated;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.UUID;&#10;&#10;/**&#10; * Controller exposing patient-specific endpoints under /api/patients/me.&#10; */&#10;@RestController&#10;@RequestMapping(&quot;/api/patients/me&quot;)&#10;@Validated&#10;@RequiredArgsConstructor&#10;public class PatientMeController {&#10;&#10;    private final PatientService patientService;&#10;    private final FileService fileService;&#10;&#10;    @GetMapping(&quot;/profile&quot;)&#10;    public PatientProfileDto getProfile(Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName()); // Assuming JWT contains user ID&#10;        return patientService.getPatientProfileByUserId(userId);&#10;    }&#10;&#10;    @PutMapping(&quot;/profile&quot;)&#10;    public PatientProfileDto updateProfile(@RequestBody UpdatePatientProfileDto dto, Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        // Get patient ID from user ID first&#10;        PatientProfileDto currentProfile = patientService.getPatientProfileByUserId(userId);&#10;        return patientService.updatePatientProfile(currentProfile.id(), dto);&#10;    }&#10;&#10;    @PutMapping(&quot;/medical-history&quot;)&#10;    public PatientMedicalHistoryResponse updateHistory(@RequestBody UpdatePatientMedicalHistoryRequest request, Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        PatientProfileDto currentProfile = patientService.getPatientProfileByUserId(userId);&#10;        return patientService.updateMedicalHistory(currentProfile.id(), request);&#10;    }&#10;&#10;    @GetMapping(&quot;/stats&quot;)&#10;    public PatientStatsDto stats(Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        PatientProfileDto currentProfile = patientService.getPatientProfileByUserId(userId);&#10;        return patientService.getPatientStats(currentProfile.id());&#10;    }&#10;&#10;    @GetMapping(&quot;/reports&quot;)&#10;    public Page&lt;ReportDto&gt; listReports(@RequestParam(defaultValue = &quot;0&quot;) int page,&#10;                                       @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;                                       Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        PatientProfileDto currentProfile = patientService.getPatientProfileByUserId(userId);&#10;        return fileService.getPatientReports(currentProfile.id(), PageRequest.of(page, size));&#10;    }&#10;&#10;    @PostMapping(value = &quot;/reports&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#10;    public ReportDto upload(@RequestPart(&quot;title&quot;) String title,&#10;                           @RequestPart(&quot;file&quot;) byte[] file,&#10;                           Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        PatientProfileDto currentProfile = patientService.getPatientProfileByUserId(userId);&#10;        return fileService.uploadPatientReport(currentProfile.id(), title, file);&#10;    }&#10;&#10;    @GetMapping(&quot;/reports/{id}/download&quot;)&#10;    public ResponseEntity&lt;Resource&gt; download(@PathVariable UUID id, Authentication authentication) {&#10;        UUID userId = UUID.fromString(authentication.getName());&#10;        // Verify patient owns this report&#10;        byte[] content = fileService.downloadPatientReport(id, userId);&#10;        ByteArrayResource resource = new ByteArrayResource(content);&#10;        return ResponseEntity.ok()&#10;                .header(HttpHeaders.CONTENT_DISPOSITION, &quot;attachment; filename=report.pdf&quot;)&#10;                .contentType(MediaType.APPLICATION_OCTET_STREAM)&#10;                .body(resource);&#10;    }&#10;&#10;    @GetMapping(&quot;/reports/{id}/preview&quot;)&#10;    public ResponseEntity&lt;Resource&gt; preview(@PathVariable UUID id, Authentication authentication) {&#10;        byte[] content = new byte[0];&#10;        ByteArrayResource resource = new ByteArrayResource(content);&#10;        return ResponseEntity.ok()&#10;                .contentType(MediaType.IMAGE_PNG)&#10;                .body(resource);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/reports/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; delete(@PathVariable UUID id, Authentication authentication) {&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/DoctorDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/DoctorDto.java" />
              <option name="originalContent" value="package com.docmate.user.dto;&#10;&#10;import com.docmate.common.dto.user.UserDto;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.Set;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class DoctorDto {&#10;&#10;    private UUID id;&#10;    private UserDto user;&#10;    private SpecializationDto specialization;&#10;    private String licenseNumber;&#10;    private Integer experienceYears;&#10;    private BigDecimal feePerConsultation;&#10;    private String bio;&#10;    private Boolean videoConsultationEnabled;&#10;    private Boolean teleConsultationEnabled;&#10;    private Boolean emergencyAvailable;&#10;    private Boolean isApproved;&#10;    private Boolean isActive;&#10;    private String clinicName;&#10;    private AddressDto primaryAddress;&#10;    private BigDecimal averageRating;&#10;    private Integer reviewCount;&#10;    private Set&lt;SpecializationDto&gt; specializations;&#10;    private Set&lt;ConditionDto&gt; conditions;&#10;    private LocalDateTime createdDate;&#10;    private LocalDateTime updatedDate;&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user.dto;&#10;&#10;import com.docmate.common.dto.UserDto;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.math.BigDecimal;&#10;import java.time.LocalDateTime;&#10;import java.util.Set;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class DoctorDto {&#10;&#10;    private UUID id;&#10;    private UserDto user;&#10;    private SpecializationDto specialization;&#10;    private String licenseNumber;&#10;    private Integer experienceYears;&#10;    private BigDecimal feePerConsultation;&#10;    private String bio;&#10;    private Boolean videoConsultationEnabled;&#10;    private Boolean teleConsultationEnabled;&#10;    private Boolean emergencyAvailable;&#10;    private Boolean isApproved;&#10;    private Boolean isActive;&#10;    private String clinicName;&#10;    private AddressDto primaryAddress;&#10;    private BigDecimal averageRating;&#10;    private Integer reviewCount;&#10;    private Set&lt;SpecializationDto&gt; specializations;&#10;    private Set&lt;ConditionDto&gt; conditions;&#10;    private LocalDateTime createdDate;&#10;    private LocalDateTime updatedDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/DoctorSearchResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/DoctorSearchResponse.java" />
              <option name="updatedContent" value="package com.docmate.user.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class DoctorSearchResponse {&#10;    &#10;    private UUID id;&#10;    private String fullName;&#10;    private String profilePicture;&#10;    private String specialization;&#10;    private String bio;&#10;    private Integer experienceYears;&#10;    private BigDecimal feePerConsultation;&#10;    private BigDecimal averageRating;&#10;    private Integer reviewCount;&#10;    private String clinicName;&#10;    private Boolean videoConsultationEnabled;&#10;    private Boolean teleConsultationEnabled;&#10;    private Boolean emergencyAvailable;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/DoctorStatsResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/DoctorStatsResponse.java" />
              <option name="updatedContent" value="package com.docmate.user.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class DoctorStatsResponse {&#10;    &#10;    private Long totalAppointments;&#10;    private Long completedAppointments;&#10;    private Long pendingAppointments;&#10;    private Long cancelledAppointments;&#10;    private Long totalPatients;&#10;    private Double averageRating;&#10;    private Long totalReviews;&#10;    private Long totalEarnings;&#10;    private Long thisMonthAppointments;&#10;    private Long thisMonthEarnings;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/PatientDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/PatientDto.java" />
              <option name="originalContent" value="package com.docmate.user.dto;&#10;&#10;import com.docmate.common.dto.user.UserDto;&#10;import com.docmate.common.enums.Gender;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class PatientDto {&#10;&#10;    private UUID id;&#10;    private UserDto user;&#10;    private LocalDate dateOfBirth;&#10;    private Gender gender;&#10;    private String bloodType;&#10;    private String height;&#10;    private String weight;&#10;    private AddressDto address;&#10;    private LocalDateTime createdDate;&#10;    private LocalDateTime updatedDate;&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user.dto;&#10;&#10;import com.docmate.common.dto.UserDto;&#10;import com.docmate.common.enums.Gender;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class PatientDto {&#10;&#10;    private UUID id;&#10;    private UserDto user;&#10;    private LocalDate dateOfBirth;&#10;    private Gender gender;&#10;    private String bloodType;&#10;    private String height;&#10;    private String weight;&#10;    private AddressDto address;&#10;    private LocalDateTime createdDate;&#10;    private LocalDateTime updatedDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/PatientMedicalHistoryResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/PatientMedicalHistoryResponse.java" />
              <option name="updatedContent" value="package com.docmate.user.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class PatientMedicalHistoryResponse {&#10;    &#10;    private UUID id;&#10;    private UUID patientId;&#10;    private String allergies;&#10;    private String chronicConditions;&#10;    private String currentMedications;&#10;    private String previousSurgeries;&#10;    private String familyHistory;&#10;    private String emergencyContactName;&#10;    private String emergencyContactPhone;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/PatientReportResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/PatientReportResponse.java" />
              <option name="updatedContent" value="package com.docmate.user.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class PatientReportResponse {&#10;    &#10;    private UUID id;&#10;    private UUID patientId;&#10;    private String title;&#10;    private String description;&#10;    private LocalDate testDate;&#10;    private String fileUrl;&#10;    private String fileName;&#10;    private String fileType;&#10;    private Long fileSize;&#10;    private LocalDateTime createdDate;&#10;    private LocalDateTime updatedDate;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/UpdateDoctorProfileRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/UpdateDoctorProfileRequest.java" />
              <option name="updatedContent" value="package com.docmate.user.dto;&#10;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class UpdateDoctorProfileRequest {&#10;    &#10;    @Size(max = 50, message = &quot;License number must not exceed 50 characters&quot;)&#10;    private String licenseNumber;&#10;    &#10;    private UUID specializationId;&#10;    private Integer experienceYears;&#10;    private BigDecimal feePerConsultation;&#10;    &#10;    @Size(max = 2000, message = &quot;Bio must not exceed 2000 characters&quot;)&#10;    private String bio;&#10;    &#10;    @Size(max = 200, message = &quot;Clinic name must not exceed 200 characters&quot;)&#10;    private String clinicName;&#10;    &#10;    private Boolean videoConsultationEnabled;&#10;    private Boolean teleConsultationEnabled;&#10;    private Boolean emergencyAvailable;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/UpdatePatientMedicalHistoryRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/dto/UpdatePatientMedicalHistoryRequest.java" />
              <option name="updatedContent" value="package com.docmate.user.dto;&#10;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class UpdatePatientMedicalHistoryRequest {&#10;    &#10;    @Size(max = 2000, message = &quot;Allergies must not exceed 2000 characters&quot;)&#10;    private String allergies;&#10;    &#10;    @Size(max = 2000, message = &quot;Chronic conditions must not exceed 2000 characters&quot;)&#10;    private String chronicConditions;&#10;    &#10;    @Size(max = 2000, message = &quot;Current medications must not exceed 2000 characters&quot;)&#10;    private String currentMedications;&#10;    &#10;    @Size(max = 2000, message = &quot;Previous surgeries must not exceed 2000 characters&quot;)&#10;    private String previousSurgeries;&#10;    &#10;    @Size(max = 2000, message = &quot;Family history must not exceed 2000 characters&quot;)&#10;    private String familyHistory;&#10;    &#10;    @Size(max = 100, message = &quot;Emergency contact name must not exceed 100 characters&quot;)&#10;    private String emergencyContactName;&#10;    &#10;    @Size(max = 15, message = &quot;Emergency contact phone must not exceed 15 characters&quot;)&#10;    private String emergencyContactPhone;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/entity/User.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/entity/User.java" />
              <option name="updatedContent" value="package com.docmate.user.entity;&#10;&#10;import com.docmate.common.entity.BaseEntity;&#10;import com.docmate.common.enums.UserRole;&#10;import com.docmate.common.enums.UserStatus;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Pattern;&#10;import lombok.*;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Entity&#10;@Table(name = &quot;users&quot;)&#10;@Getter&#10;@Setter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class User extends BaseEntity {&#10;    &#10;    @Column(name = &quot;email&quot;, unique = true, nullable = false)&#10;    @Email(message = &quot;Invalid email format&quot;)&#10;    @NotBlank(message = &quot;Email is required&quot;)&#10;    private String email;&#10;    &#10;    @Column(name = &quot;password_hash&quot;, nullable = false)&#10;    private String passwordHash;&#10;    &#10;    @Column(name = &quot;first_name&quot;, nullable = false)&#10;    @NotBlank(message = &quot;First name is required&quot;)&#10;    private String firstName;&#10;    &#10;    @Column(name = &quot;last_name&quot;, nullable = false)&#10;    @NotBlank(message = &quot;Last name is required&quot;)&#10;    private String lastName;&#10;    &#10;    @Column(name = &quot;phone_number&quot;)&#10;    @Pattern(regexp = &quot;^\\+?[1-9]\\d{1,14}$&quot;, message = &quot;Invalid phone number format&quot;)&#10;    private String phoneNumber;&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;role&quot;, nullable = false)&#10;    private UserRole role;&#10;    &#10;    @Enumerated(EnumType.STRING)&#10;    @Column(name = &quot;status&quot;, nullable = false)&#10;    @Builder.Default&#10;    private UserStatus status = UserStatus.ACTIVE;&#10;    &#10;    @Column(name = &quot;profile_picture_url&quot;)&#10;    private String profilePictureUrl;&#10;    &#10;    @Column(name = &quot;timezone&quot;)&#10;    @Builder.Default&#10;    private String timezone = &quot;UTC&quot;;&#10;    &#10;    @Column(name = &quot;language&quot;)&#10;    @Builder.Default&#10;    private String language = &quot;en&quot;;&#10;    &#10;    @Column(name = &quot;email_verified&quot;)&#10;    @Builder.Default&#10;    private Boolean emailVerified = false;&#10;    &#10;    @Column(name = &quot;phone_verified&quot;)&#10;    @Builder.Default&#10;    private Boolean phoneVerified = false;&#10;    &#10;    @Column(name = &quot;last_login_at&quot;)&#10;    private LocalDateTime lastLoginAt;&#10;    &#10;    @Column(name = &quot;password_reset_token&quot;)&#10;    private String passwordResetToken;&#10;    &#10;    @Column(name = &quot;password_reset_expires_at&quot;)&#10;    private LocalDateTime passwordResetExpiresAt;&#10;    &#10;    @Column(name = &quot;email_verification_token&quot;)&#10;    private String emailVerificationToken;&#10;    &#10;    @Column(name = &quot;email_verification_expires_at&quot;)&#10;    private LocalDateTime emailVerificationExpiresAt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/mapper/AddressMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/mapper/AddressMapper.java" />
              <option name="originalContent" value="package com.docmate.user.mapper;&#10;&#10;import com.docmate.common.entity.Address;&#10;import com.docmate.user.dto.AddressDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingConstants;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;public interface AddressMapper {&#10;&#10;    AddressDto toDto(Address address);&#10;&#10;    Address toEntity(AddressDto addressDto);&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user.mapper;&#10;&#10;import com.docmate.common.entity.Address;&#10;import com.docmate.common.dto.AddressDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingConstants;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;public interface AddressMapper {&#10;&#10;    AddressDto toDto(Address address);&#10;&#10;    Address toEntity(AddressDto addressDto);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/mapper/ConditionMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/mapper/ConditionMapper.java" />
              <option name="originalContent" value="package com.docmate.user.mapper;&#10;&#10;import com.docmate.common.entity.Condition;&#10;import com.docmate.user.dto.ConditionDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingConstants;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;public interface ConditionMapper {&#10;&#10;    ConditionDto toDto(Condition condition);&#10;&#10;    Condition toEntity(ConditionDto conditionDto);&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user.mapper;&#10;&#10;import com.docmate.common.entity.Condition;&#10;import com.docmate.common.dto.ConditionDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingConstants;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;public interface ConditionMapper {&#10;&#10;    ConditionDto toDto(Condition condition);&#10;&#10;    Condition toEntity(ConditionDto conditionDto);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/mapper/DoctorMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/mapper/DoctorMapper.java" />
              <option name="originalContent" value="package com.docmate.user.mapper;&#10;&#10;import com.docmate.common.entity.Doctor;&#10;import com.docmate.user.dto.DoctorDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.MappingConstants;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING,&#10;        uses = {UserMapper.class, SpecializationMapper.class, ConditionMapper.class, AddressMapper.class})&#10;public interface DoctorMapper {&#10;&#10;    @Mapping(target = &quot;user&quot;, source = &quot;user&quot;)&#10;    @Mapping(target = &quot;specialization&quot;, source = &quot;specialization&quot;)&#10;    @Mapping(target = &quot;primaryAddress&quot;, source = &quot;primaryAddress&quot;)&#10;    @Mapping(target = &quot;specializations&quot;, source = &quot;specializations&quot;)&#10;    @Mapping(target = &quot;conditions&quot;, source = &quot;conditions&quot;)&#10;    DoctorDto toDto(Doctor doctor);&#10;&#10;    @Mapping(target = &quot;user&quot;, ignore = true)&#10;    @Mapping(target = &quot;specialization&quot;, ignore = true)&#10;    @Mapping(target = &quot;primaryAddress&quot;, ignore = true)&#10;    @Mapping(target = &quot;specializations&quot;, ignore = true)&#10;    @Mapping(target = &quot;conditions&quot;, ignore = true)&#10;    @Mapping(target = &quot;id&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;averageRating&quot;, ignore = true)&#10;    @Mapping(target = &quot;reviewCount&quot;, ignore = true)&#10;    Doctor toEntity(DoctorDto doctorDto);&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user.mapper;&#10;&#10;import com.docmate.common.entity.Doctor;&#10;import com.docmate.common.dto.DoctorDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.MappingConstants;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING,&#10;        uses = {UserMapper.class, SpecializationMapper.class, ConditionMapper.class, AddressMapper.class})&#10;public interface DoctorMapper {&#10;&#10;    @Mapping(target = &quot;user&quot;, source = &quot;user&quot;)&#10;    @Mapping(target = &quot;specialization&quot;, source = &quot;specialization&quot;)&#10;    @Mapping(target = &quot;primaryAddress&quot;, source = &quot;primaryAddress&quot;)&#10;    @Mapping(target = &quot;specializations&quot;, source = &quot;specializations&quot;)&#10;    @Mapping(target = &quot;conditions&quot;, source = &quot;conditions&quot;)&#10;    DoctorDto toDto(Doctor doctor);&#10;&#10;    @Mapping(target = &quot;user&quot;, ignore = true)&#10;    @Mapping(target = &quot;specialization&quot;, ignore = true)&#10;    @Mapping(target = &quot;primaryAddress&quot;, ignore = true)&#10;    @Mapping(target = &quot;specializations&quot;, ignore = true)&#10;    @Mapping(target = &quot;conditions&quot;, ignore = true)&#10;    @Mapping(target = &quot;id&quot;, ignore = true)&#10;    @Mapping(target = &quot;averageRating&quot;, ignore = true)&#10;    @Mapping(target = &quot;reviewCount&quot;, ignore = true)&#10;    Doctor toEntity(DoctorDto doctorDto);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/mapper/PatientMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/mapper/PatientMapper.java" />
              <option name="originalContent" value="package com.docmate.user.mapper;&#10;&#10;import com.docmate.common.dto.PatientProfileDto;&#10;import com.docmate.common.entity.Patient;&#10;import com.docmate.user.dto.PatientDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.MappingConstants;&#10;import org.mapstruct.MappingTarget;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING, uses = {UserMapper.class, AddressMapper.class})&#10;public interface PatientMapper {&#10;&#10;    @Mapping(target = &quot;user&quot;, source = &quot;user&quot;)&#10;    @Mapping(target = &quot;address&quot;, source = &quot;address&quot;)&#10;    @Mapping(target = &quot;medicalHistory&quot;, source = &quot;medicalHistory&quot;)&#10;    @Mapping(target = &quot;emergencyContactName&quot;, source = &quot;emergencyContactName&quot;)&#10;    @Mapping(target = &quot;emergencyContactPhone&quot;, source = &quot;emergencyContactPhone&quot;)&#10;    @Mapping(target = &quot;createdAt&quot;, source = &quot;createdDate&quot;)&#10;    @Mapping(target = &quot;updatedAt&quot;, source = &quot;updatedDate&quot;)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;medicalHistory&quot;, source = &quot;medicalHistory&quot;)&#10;    @Mapping(target = &quot;emergencyContactName&quot;, source = &quot;emergencyContactName&quot;)&#10;    @Mapping(target = &quot;emergencyContactPhone&quot;, source = &quot;emergencyContactPhone&quot;)&#10;    @Mapping(target = &quot;createdAt&quot;, source = &quot;createdDate&quot;)&#10;    @Mapping(target = &quot;updatedAt&quot;, source = &quot;updatedDate&quot;)&#10;    @Mapping(target = &quot;street&quot;, source = &quot;address.street&quot;)&#10;    @Mapping(target = &quot;addressType&quot;, source = &quot;address.addressType&quot;)&#10;    @Mapping(target = &quot;isDefault&quot;, source = &quot;address.isDefault&quot;)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;street&quot;, source = &quot;address.street&quot;)&#10;    @Mapping(target = &quot;addressType&quot;, source = &quot;address.addressType&quot;)&#10;    @Mapping(target = &quot;isDefault&quot;, source = &quot;address.isDefault&quot;)&#10;    @Mapping(target = &quot;medicalHistory&quot;, source = &quot;medicalHistory&quot;)&#10;    @Mapping(target = &quot;emergencyContactName&quot;, source = &quot;emergencyContactName&quot;)&#10;    @Mapping(target = &quot;street&quot;, source = &quot;address.street&quot;)&#10;    @Mapping(target = &quot;addressType&quot;, source = &quot;address.addressType&quot;)&#10;    @Mapping(target = &quot;isDefault&quot;, source = &quot;address.isDefault&quot;)&#10;    @Mapping(target = &quot;emergencyContactPhone&quot;, source = &quot;emergencyContactPhone&quot;)&#10;    @Mapping(target = &quot;createdAt&quot;, source = &quot;createdDate&quot;)&#10;    @Mapping(target = &quot;updatedAt&quot;, source = &quot;updatedDate&quot;)&#10;    @Mapping(target = &quot;medicalHistory&quot;, source = &quot;medicalHistory&quot;)&#10;    @Mapping(target = &quot;emergencyContactName&quot;, source = &quot;emergencyContactName&quot;)&#10;    @Mapping(target = &quot;emergencyContactPhone&quot;, source = &quot;emergencyContactPhone&quot;)&#10;    @Mapping(target = &quot;createdAt&quot;, source = &quot;createdDate&quot;)&#10;    @Mapping(target = &quot;updatedAt&quot;, source = &quot;updatedDate&quot;)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    PatientDto toDto(Patient patient);&#10;&#10;    @Mapping(target = &quot;street&quot;, source = &quot;address.street&quot;)&#10;    @Mapping(target = &quot;addressType&quot;, source = &quot;address.addressType&quot;)&#10;    @Mapping(target = &quot;isDefault&quot;, source = &quot;address.isDefault&quot;)&#10;    @Mapping(target = &quot;user&quot;, ignore = true)&#10;    @Mapping(target = &quot;address&quot;, ignore = true)&#10;    @Mapping(target = &quot;id&quot;, ignore = true)&#10;    Patient toEntity(PatientDto patientDto);&#10;&#10;    // Simplified profile mapping - explicitly ignore id to prevent UUID conversion issues&#10;    @Mapping(target = &quot;id&quot;, ignore = true)&#10;    @Mapping(target = &quot;fullName&quot;, source = &quot;user.fullName&quot;)&#10;    @Mapping(target = &quot;email&quot;, source = &quot;user.email&quot;)&#10;    @Mapping(target = &quot;phone&quot;, source = &quot;user.phone&quot;)&#10;    PatientProfileDto toProfileDto(Patient patient);&#10;&#10;    @Mapping(target = &quot;id&quot;, ignore = true)&#10;    @Mapping(target = &quot;user&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    void updateEntityFromDto(PatientDto patientDto, @MappingTarget Patient patient);&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user.mapper;&#10;&#10;import com.docmate.common.dto.PatientProfileDto;&#10;import com.docmate.common.entity.Patient;&#10;import com.docmate.common.dto.PatientDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.MappingConstants;&#10;import org.mapstruct.MappingTarget;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING, uses = {UserMapper.class, AddressMapper.class})&#10;public interface PatientMapper {&#10;&#10;    @Mapping(target = &quot;user&quot;, source = &quot;user&quot;)&#10;    @Mapping(target = &quot;address&quot;, source = &quot;address&quot;)&#10;    PatientDto toDto(Patient patient);&#10;&#10;    @Mapping(target = &quot;user&quot;, ignore = true)&#10;    @Mapping(target = &quot;address&quot;, ignore = true)&#10;    @Mapping(target = &quot;id&quot;, ignore = true)&#10;    Patient toEntity(PatientDto patientDto);&#10;&#10;    // Simplified profile mapping - explicitly ignore id to prevent UUID conversion issues&#10;    @Mapping(target = &quot;id&quot;, ignore = true)&#10;    @Mapping(target = &quot;fullName&quot;, source = &quot;user.fullName&quot;)&#10;    @Mapping(target = &quot;email&quot;, source = &quot;user.email&quot;)&#10;    @Mapping(target = &quot;phone&quot;, source = &quot;user.phone&quot;)&#10;    PatientProfileDto toProfileDto(Patient patient);&#10;&#10;    @Mapping(target = &quot;id&quot;, ignore = true)&#10;    @Mapping(target = &quot;user&quot;, ignore = true)&#10;    @Mapping(target = &quot;createdDate&quot;, ignore = true)&#10;    @Mapping(target = &quot;updatedDate&quot;, ignore = true)&#10;    void updateEntityFromDto(PatientDto patientDto, @MappingTarget Patient patient);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/mapper/SpecializationMapper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/mapper/SpecializationMapper.java" />
              <option name="originalContent" value="package com.docmate.user.mapper;&#10;&#10;import com.docmate.common.entity.Specialization;&#10;import com.docmate.user.dto.SpecializationDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingConstants;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;public interface SpecializationMapper {&#10;&#10;    SpecializationDto toDto(Specialization specialization);&#10;&#10;    Specialization toEntity(SpecializationDto specializationDto);&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user.mapper;&#10;&#10;import com.docmate.common.entity.Specialization;&#10;import com.docmate.common.dto.SpecializationDto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingConstants;&#10;&#10;@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)&#10;public interface SpecializationMapper {&#10;&#10;    SpecializationDto toDto(Specialization specialization);&#10;&#10;    Specialization toEntity(SpecializationDto specializationDto);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/repository/PatientRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/repository/PatientRepository.java" />
              <option name="originalContent" value="package com.docmate.user.repository;&#10;&#10;import com.docmate.common.entity.Patient;&#10;" />
              <option name="updatedContent" value="package com.docmate.user.repository;&#10;&#10;import com.docmate.common.entity.Patient;&#10;import com.docmate.common.enums.Gender;&#10;import com.docmate.common.enums.UserStatus;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface PatientRepository extends JpaRepository&lt;Patient, UUID&gt; {&#10;&#10;    Optional&lt;Patient&gt; findByUserId(UUID userId);&#10;&#10;    @Query(&quot;SELECT p FROM Patient p WHERE p.user.email = :email&quot;)&#10;    Optional&lt;Patient&gt; findByUserEmail(@Param(&quot;email&quot;) String email);&#10;&#10;    List&lt;Patient&gt; findByGender(Gender gender);&#10;&#10;    @Query(&quot;SELECT p FROM Patient p WHERE p.user.status = :status&quot;)&#10;    Page&lt;Patient&gt; findByUserStatus(@Param(&quot;status&quot;) UserStatus status, Pageable pageable);&#10;&#10;    @Query(&quot;SELECT p FROM Patient p WHERE p.dateOfBirth BETWEEN :startDate AND :endDate&quot;)&#10;    List&lt;Patient&gt; findByDateOfBirthBetween(@Param(&quot;startDate&quot;) LocalDate startDate, @Param(&quot;endDate&quot;) LocalDate endDate);&#10;&#10;    @Query(&quot;SELECT COUNT(p) FROM Patient p WHERE p.user.isActive = true&quot;)&#10;    Long countByUserIsActiveTrue();&#10;&#10;    @Query(&quot;SELECT p FROM Patient p WHERE p.user.isActive = true&quot;)&#10;    Page&lt;Patient&gt; findByUserIsActiveTrue(Pageable pageable);&#10;&#10;    @Query(&quot;SELECT p FROM Patient p WHERE p.bloodType = :bloodType&quot;)&#10;    List&lt;Patient&gt; findByBloodType(@Param(&quot;bloodType&quot;) String bloodType);&#10;&#10;    @Query(&quot;SELECT p FROM Patient p WHERE &quot; +&#10;           &quot;LOWER(p.user.firstName) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR &quot; +&#10;           &quot;LOWER(p.user.lastName) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR &quot; +&#10;           &quot;LOWER(p.user.email) LIKE LOWER(CONCAT('%', :searchTerm, '%'))&quot;)&#10;    Page&lt;Patient&gt; searchPatients(@Param(&quot;searchTerm&quot;) String searchTerm, Pageable pageable);&#10;&#10;    @Query(&quot;SELECT COUNT(p) FROM Patient p WHERE p.user.status = 'ACTIVE'&quot;)&#10;    long countActivePatients();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/repository/UserRepository.java" />
              <option name="originalContent" value="package com.docmate.user.repository;&#10;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.enums.ConsultationMode;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, UUID&gt; {&#10;&#10;    Optional&lt;User&gt; findByEmail(String email);&#10;&#10;    boolean existsByEmail(String email);&#10;&#10;    Optional&lt;User&gt; findByPasswordResetToken(String token);&#10;&#10;    Optional&lt;User&gt; findByEmailVerificationToken(String token);&#10;&#10;    Page&lt;User&gt; findByRole(String role, Pageable pageable);&#10;&#10;    Long countByIsActiveTrue();&#10;&#10;    Long countByRoleAndIsActiveTrue(String role, Boolean isActive);&#10;&#10;    @Query(&quot;SELECT u FROM User u WHERE &quot; +&#10;           &quot;LOWER(u.firstName) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR &quot; +&#10;           &quot;LOWER(u.lastName) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR &quot; +&#10;           &quot;LOWER(u.email) LIKE LOWER(CONCAT('%', :searchTerm, '%'))&quot;)&#10;    Page&lt;User&gt; findByFirstNameContainingIgnoreCaseOrLastNameContainingIgnoreCaseOrEmailContainingIgnoreCase(&#10;            @Param(&quot;searchTerm&quot;) String searchTerm,&#10;            @Param(&quot;searchTerm&quot;) String searchTerm2,&#10;            @Param(&quot;searchTerm&quot;) String searchTerm3,&#10;            Pageable pageable);&#10;&#10;    @Query(&quot;SELECT u FROM User u JOIN Doctor d ON u.id = d.id &quot; +&#10;           &quot;WHERE u.role = 'DOCTOR' AND u.isActive = true &quot; +&#10;           &quot;AND (:query IS NULL OR LOWER(u.firstName) LIKE LOWER(CONCAT('%', :query, '%')) &quot; +&#10;           &quot;OR LOWER(u.lastName) LIKE LOWER(CONCAT('%', :query, '%')) &quot; +&#10;           &quot;OR LOWER(d.bio) LIKE LOWER(CONCAT('%', :query, '%'))) &quot; +&#10;           &quot;AND (:specialization IS NULL OR d.specialization.name = :specialization) &quot; +&#10;           &quot;AND (:maxFee IS NULL OR d.feePerConsultation &lt;= :maxFee) &quot; +&#10;           &quot;AND (:emergencyAvailable IS NULL OR d.emergencyAvailable = :emergencyAvailable)&quot;)&#10;    Page&lt;User&gt; findDoctorsWithFilters(@Param(&quot;query&quot;) String query,&#10;                                     @Param(&quot;specialization&quot;) String specialization,&#10;                                     @Param(&quot;condition&quot;) String condition,&#10;                                     @Param(&quot;maxFee&quot;) BigDecimal maxFee,&#10;                                     @Param(&quot;consultationMode&quot;) ConsultationMode consultationMode,&#10;                                     @Param(&quot;emergencyAvailable&quot;) Boolean emergencyAvailable,&#10;                                     Pageable pageable);&#10;&#10;    @Query(&quot;SELECT u FROM User u JOIN Doctor d ON u.id = d.id &quot; +&#10;           &quot;WHERE u.role = 'DOCTOR' AND u.isActive = true &quot; +&#10;           &quot;AND d.specialization.name = :specialization&quot;)&#10;    Page&lt;User&gt; findDoctorsBySpecialization(@Param(&quot;specialization&quot;) String specialization, Pageable pageable);&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user.repository;&#10;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.enums.ConsultationMode;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, UUID&gt; {&#10;&#10;    Optional&lt;User&gt; findByEmail(String email);&#10;&#10;    boolean existsByEmail(String email);&#10;&#10;    Optional&lt;User&gt; findByPasswordResetToken(String token);&#10;&#10;    Optional&lt;User&gt; findByEmailVerificationToken(String token);&#10;&#10;    Page&lt;User&gt; findByRole(String role, Pageable pageable);&#10;&#10;    Long countByIsActiveTrue();&#10;&#10;    Long countByRoleAndIsActiveTrue(String role);&#10;&#10;    @Query(&quot;SELECT u FROM User u WHERE &quot; +&#10;           &quot;LOWER(u.firstName) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR &quot; +&#10;           &quot;LOWER(u.lastName) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR &quot; +&#10;           &quot;LOWER(u.email) LIKE LOWER(CONCAT('%', :searchTerm, '%'))&quot;)&#10;    Page&lt;User&gt; findByFirstNameContainingIgnoreCaseOrLastNameContainingIgnoreCaseOrEmailContainingIgnoreCase(&#10;            @Param(&quot;searchTerm&quot;) String searchTerm,&#10;            @Param(&quot;searchTerm&quot;) String searchTerm2,&#10;            @Param(&quot;searchTerm&quot;) String searchTerm3,&#10;            Pageable pageable);&#10;&#10;    @Query(&quot;SELECT u FROM User u JOIN Doctor d ON u.id = d.id &quot; +&#10;           &quot;WHERE u.role = 'DOCTOR' AND u.isActive = true &quot; +&#10;           &quot;AND (:query IS NULL OR LOWER(u.firstName) LIKE LOWER(CONCAT('%', :query, '%')) &quot; +&#10;           &quot;OR LOWER(u.lastName) LIKE LOWER(CONCAT('%', :query, '%')) &quot; +&#10;           &quot;OR LOWER(d.bio) LIKE LOWER(CONCAT('%', :query, '%'))) &quot; +&#10;           &quot;AND (:specialization IS NULL OR d.specialization.name = :specialization) &quot; +&#10;           &quot;AND (:maxFee IS NULL OR d.feePerConsultation &lt;= :maxFee) &quot; +&#10;           &quot;AND (:emergencyAvailable IS NULL OR d.emergencyAvailable = :emergencyAvailable)&quot;)&#10;    Page&lt;User&gt; findDoctorsWithFilters(@Param(&quot;query&quot;) String query,&#10;                                     @Param(&quot;specialization&quot;) String specialization,&#10;                                     @Param(&quot;condition&quot;) String condition,&#10;                                     @Param(&quot;maxFee&quot;) BigDecimal maxFee,&#10;                                     @Param(&quot;consultationMode&quot;) ConsultationMode consultationMode,&#10;                                     @Param(&quot;emergencyAvailable&quot;) Boolean emergencyAvailable,&#10;                                     Pageable pageable);&#10;&#10;    @Query(&quot;SELECT u FROM User u JOIN Doctor d ON u.id = d.id &quot; +&#10;           &quot;WHERE u.role = 'DOCTOR' AND u.isActive = true &quot; +&#10;           &quot;AND d.specialization.name = :specialization&quot;)&#10;    Page&lt;User&gt; findDoctorsBySpecialization(@Param(&quot;specialization&quot;) String specialization, Pageable pageable);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/service/DoctorService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/docmate/user/service/DoctorService.java" />
              <option name="originalContent" value="package com.docmate.user.service;&#10;&#10;import com.docmate.common.entity.Doctor;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.exception.BusinessException;&#10;import com.docmate.user.dto.DoctorDto;&#10;import com.docmate.user.dto.DoctorSearchResponse;&#10;import com.docmate.user.dto.DoctorStatsResponse;&#10;import com.docmate.user.dto.UpdateDoctorProfileRequest;&#10;import com.docmate.user.mapper.DoctorMapper;&#10;import com.docmate.user.repository.DoctorRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor&#10;@Transactional&#10;public class DoctorService {&#10;&#10;    private final DoctorRepository doctorRepository;&#10;    private final DoctorMapper doctorMapper;&#10;&#10;    public DoctorDto createDoctorProfile(DoctorDto doctorDto, User user) {&#10;        log.info(&quot;Creating doctor profile for user: {}&quot;, user.getEmail());&#10;&#10;        // Check if doctor profile already exists&#10;        if (doctorRepository.findByUserEmail(user.getEmail()).isPresent()) {&#10;            throw new BusinessException(&quot;DOCTOR_PROFILE_EXISTS&quot;, &quot;Doctor profile already exists for this user&quot;, 409);&#10;        }&#10;&#10;        Doctor doctor = doctorMapper.toEntity(doctorDto);&#10;        doctor.setUser(user);&#10;        doctor.setId(user.getId());&#10;        doctor.setIsApproved(false); // Requires admin approval&#10;        doctor.setIsActive(true);&#10;&#10;        doctor = doctorRepository.save(doctor);&#10;&#10;        log.info(&quot;Doctor profile created successfully for user: {} - Pending approval&quot;, user.getEmail());&#10;        return doctorMapper.toDto(doctor);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public DoctorDto getDoctorProfile(UUID doctorId) {&#10;        log.info(&quot;Fetching doctor profile with ID: {}&quot;, doctorId);&#10;&#10;        Doctor doctor = doctorRepository.findByIdWithUser(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        return doctorMapper.toDto(doctor);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public DoctorDto getDoctorByEmail(String email) {&#10;        log.info(&quot;Fetching doctor profile by email: {}&quot;, email);&#10;&#10;        Doctor doctor = doctorRepository.findByUserEmail(email)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        return doctorMapper.toDto(doctor);&#10;    }&#10;&#10;    public DoctorDto updateDoctorProfile(UUID doctorId, UpdateDoctorProfileRequest request) {&#10;        log.info(&quot;Updating doctor profile with ID: {}&quot;, doctorId);&#10;&#10;        Doctor existingDoctor = doctorRepository.findByIdWithUser(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        // Update doctor fields from request&#10;        if (request.getLicenseNumber() != null) {&#10;            existingDoctor.setLicenseNumber(request.getLicenseNumber());&#10;        }&#10;        if (request.getSpecializationId() != null) {&#10;            // Set specialization - would need SpecializationRepository to fetch entity&#10;            // existingDoctor.setSpecialization(specializationRepository.findById(request.getSpecializationId()));&#10;        }&#10;        if (request.getExperienceYears() != null) {&#10;            existingDoctor.setExperienceYears(request.getExperienceYears());&#10;        }&#10;        if (request.getFeePerConsultation() != null) {&#10;            existingDoctor.setFeePerConsultation(request.getFeePerConsultation());&#10;        }&#10;        if (request.getBio() != null) {&#10;            existingDoctor.setBio(request.getBio());&#10;        }&#10;        if (request.getClinicName() != null) {&#10;            existingDoctor.setClinicName(request.getClinicName());&#10;        }&#10;        if (request.getVideoConsultationEnabled() != null) {&#10;            existingDoctor.setVideoConsultationEnabled(request.getVideoConsultationEnabled());&#10;        }&#10;        if (request.getTeleConsultationEnabled() != null) {&#10;            existingDoctor.setTeleConsultationEnabled(request.getTeleConsultationEnabled());&#10;        }&#10;        if (request.getEmergencyAvailable() != null) {&#10;            existingDoctor.setEmergencyAvailable(request.getEmergencyAvailable());&#10;        }&#10;&#10;        existingDoctor = doctorRepository.save(existingDoctor);&#10;&#10;        log.info(&quot;Doctor profile updated successfully for ID: {}&quot;, doctorId);&#10;        return doctorMapper.toDto(existingDoctor);&#10;    }&#10;&#10;    public DoctorDto approveDoctorProfile(UUID doctorId) {&#10;        log.info(&quot;Approving doctor profile with ID: {}&quot;, doctorId);&#10;&#10;        Doctor doctor = doctorRepository.findByIdWithUser(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        if (doctor.getIsApproved()) {&#10;            throw new BusinessException(&quot;DOCTOR_ALREADY_APPROVED&quot;, &quot;Doctor is already approved&quot;, 400);&#10;        }&#10;&#10;        doctor.setIsApproved(true);&#10;        doctor = doctorRepository.save(doctor);&#10;&#10;        log.info(&quot;Doctor profile approved successfully for ID: {}&quot;, doctorId);&#10;        return doctorMapper.toDto(doctor);&#10;    }&#10;&#10;    public DoctorDto rejectDoctorProfile(UUID doctorId) {&#10;        log.info(&quot;Rejecting doctor profile with ID: {}&quot;, doctorId);&#10;&#10;        Doctor doctor = doctorRepository.findByIdWithUser(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        doctor.setIsApproved(false);&#10;        doctor.setIsActive(false);&#10;        doctor = doctorRepository.save(doctor);&#10;&#10;        log.info(&quot;Doctor profile rejected for ID: {}&quot;, doctorId);&#10;        return doctorMapper.toDto(doctor);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public Page&lt;DoctorDto&gt; getApprovedDoctors(Pageable pageable) {&#10;        log.info(&quot;Fetching approved doctors with pagination&quot;);&#10;&#10;        Page&lt;Doctor&gt; doctors = doctorRepository.findApprovedDoctors(pageable);&#10;        return doctors.map(doctorMapper::toDto);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public Page&lt;DoctorDto&gt; getPendingApprovalDoctors(Pageable pageable) {&#10;        log.info(&quot;Fetching pending approval doctors with pagination&quot;);&#10;&#10;        Page&lt;Doctor&gt; doctors = doctorRepository.findPendingApprovalDoctors(pageable);&#10;        return doctors.map(doctorMapper::toDto);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public Page&lt;DoctorDto&gt; getDoctorsBySpecialization(UUID specializationId, Pageable pageable) {&#10;        log.info(&quot;Fetching doctors by specialization ID: {}&quot;, specializationId);&#10;&#10;        Page&lt;Doctor&gt; doctors = doctorRepository.findBySpecializationId(specializationId, pageable);&#10;        return doctors.map(doctorMapper::toDto);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public Page&lt;DoctorSearchResponse&gt; searchDoctors(String query, UUID specializationId, UUID conditionId,&#10;                                                   BigDecimal maxFee, String consultationType, Pageable pageable) {&#10;        log.info(&quot;Searching doctors with query: {}, specializationId: {}, conditionId: {}, maxFee: {}, consultationType: {}&quot;,&#10;                query, specializationId, conditionId, maxFee, consultationType);&#10;&#10;        return doctorRepository.searchDoctors(query, specializationId, conditionId, maxFee, consultationType, pageable);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public DoctorStatsResponse getDoctorStats(UUID doctorId) {&#10;        log.info(&quot;Getting doctor statistics for ID: {}&quot;, doctorId);&#10;&#10;        Doctor doctor = doctorRepository.findById(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        // These would typically be calculated from appointment and payment data&#10;        // For now, returning placeholder data&#10;        return DoctorStatsResponse.builder()&#10;                .totalAppointments(0L)&#10;                .completedAppointments(0L)&#10;                .pendingAppointments(0L)&#10;                .cancelledAppointments(0L)&#10;                .totalPatients(0L)&#10;                .averageRating(doctor.getAverageRating() != null ? doctor.getAverageRating().doubleValue() : 0.0)&#10;                .totalReviews(doctor.getReviewCount() != null ? doctor.getReviewCount().longValue() : 0L)&#10;                .totalEarnings(0L)&#10;                .thisMonthAppointments(0L)&#10;                .thisMonthEarnings(0L)&#10;                .build();&#10;    }&#10;&#10;    public void deleteDoctor(UUID doctorId) {&#10;        log.info(&quot;Deleting doctor with ID: {}&quot;, doctorId);&#10;&#10;        Doctor doctor = doctorRepository.findById(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        // Soft delete by setting inactive&#10;        doctor.setIsActive(false);&#10;        doctorRepository.save(doctor);&#10;&#10;        log.info(&quot;Doctor deleted (deactivated) successfully for ID: {}&quot;, doctorId);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public long getApprovedDoctorCount() {&#10;        return doctorRepository.countByIsApprovedTrueAndIsActiveTrue();&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public long getPendingApprovalDoctorCount() {&#10;        return doctorRepository.countByIsApprovedFalseAndIsActiveTrue();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.docmate.user.service;&#10;&#10;import com.docmate.common.entity.Doctor;&#10;import com.docmate.common.entity.User;&#10;import com.docmate.common.exception.BusinessException;&#10;import com.docmate.common.dto.DoctorDto;&#10;import com.docmate.common.dto.DoctorSearchResponse;&#10;import com.docmate.common.dto.DoctorStatsResponse;&#10;import com.docmate.common.dto.UpdateDoctorProfileRequest;&#10;import com.docmate.user.mapper.DoctorMapper;&#10;import com.docmate.common.repository.DoctorRepository;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.math.BigDecimal;&#10;import java.util.UUID;&#10;&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor&#10;@Transactional&#10;public class DoctorService {&#10;&#10;    private final DoctorRepository doctorRepository;&#10;    private final DoctorMapper doctorMapper;&#10;&#10;    public DoctorDto createDoctorProfile(DoctorDto doctorDto, User user) {&#10;        log.info(&quot;Creating doctor profile for user: {}&quot;, user.getEmail());&#10;&#10;        // Check if doctor profile already exists&#10;        if (doctorRepository.findByUserEmail(user.getEmail()).isPresent()) {&#10;            throw new BusinessException(&quot;DOCTOR_PROFILE_EXISTS&quot;, &quot;Doctor profile already exists for this user&quot;, 409);&#10;        }&#10;&#10;        Doctor doctor = doctorMapper.toEntity(doctorDto);&#10;        doctor.setUser(user);&#10;        doctor.setId(user.getId());&#10;        doctor.setIsApproved(false); // Requires admin approval&#10;        doctor.setIsActive(true);&#10;&#10;        doctor = doctorRepository.save(doctor);&#10;&#10;        log.info(&quot;Doctor profile created successfully for user: {} - Pending approval&quot;, user.getEmail());&#10;        return doctorMapper.toDto(doctor);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public DoctorDto getDoctorProfile(UUID doctorId) {&#10;        log.info(&quot;Fetching doctor profile with ID: {}&quot;, doctorId);&#10;&#10;        Doctor doctor = doctorRepository.findByIdWithUser(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        return doctorMapper.toDto(doctor);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public DoctorDto getDoctorByEmail(String email) {&#10;        log.info(&quot;Fetching doctor profile by email: {}&quot;, email);&#10;&#10;        Doctor doctor = doctorRepository.findByUserEmail(email)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        return doctorMapper.toDto(doctor);&#10;    }&#10;&#10;    public DoctorDto updateDoctorProfile(UUID doctorId, UpdateDoctorProfileRequest request) {&#10;        log.info(&quot;Updating doctor profile with ID: {}&quot;, doctorId);&#10;&#10;        Doctor existingDoctor = doctorRepository.findByIdWithUser(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        // Update doctor fields from request&#10;        if (request.getLicenseNumber() != null) {&#10;            existingDoctor.setLicenseNumber(request.getLicenseNumber());&#10;        }&#10;        if (request.getSpecializationId() != null) {&#10;            // Set specialization - would need SpecializationRepository to fetch entity&#10;            // existingDoctor.setSpecialization(specializationRepository.findById(request.getSpecializationId()));&#10;        }&#10;        if (request.getExperienceYears() != null) {&#10;            existingDoctor.setExperienceYears(request.getExperienceYears());&#10;        }&#10;        if (request.getFeePerConsultation() != null) {&#10;            existingDoctor.setFeePerConsultation(request.getFeePerConsultation());&#10;        }&#10;        if (request.getBio() != null) {&#10;            existingDoctor.setBio(request.getBio());&#10;        }&#10;        if (request.getClinicName() != null) {&#10;            existingDoctor.setClinicName(request.getClinicName());&#10;        }&#10;        if (request.getVideoConsultationEnabled() != null) {&#10;            existingDoctor.setVideoConsultationEnabled(request.getVideoConsultationEnabled());&#10;        }&#10;        if (request.getTeleConsultationEnabled() != null) {&#10;            existingDoctor.setTeleConsultationEnabled(request.getTeleConsultationEnabled());&#10;        }&#10;        if (request.getEmergencyAvailable() != null) {&#10;            existingDoctor.setEmergencyAvailable(request.getEmergencyAvailable());&#10;        }&#10;&#10;        existingDoctor = doctorRepository.save(existingDoctor);&#10;&#10;        log.info(&quot;Doctor profile updated successfully for ID: {}&quot;, doctorId);&#10;        return doctorMapper.toDto(existingDoctor);&#10;    }&#10;&#10;    public DoctorDto approveDoctorProfile(UUID doctorId) {&#10;        log.info(&quot;Approving doctor profile with ID: {}&quot;, doctorId);&#10;&#10;        Doctor doctor = doctorRepository.findByIdWithUser(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        if (doctor.getIsApproved()) {&#10;            throw new BusinessException(&quot;DOCTOR_ALREADY_APPROVED&quot;, &quot;Doctor is already approved&quot;, 400);&#10;        }&#10;&#10;        doctor.setIsApproved(true);&#10;        doctor = doctorRepository.save(doctor);&#10;&#10;        log.info(&quot;Doctor profile approved successfully for ID: {}&quot;, doctorId);&#10;        return doctorMapper.toDto(doctor);&#10;    }&#10;&#10;    public DoctorDto rejectDoctorProfile(UUID doctorId) {&#10;        log.info(&quot;Rejecting doctor profile with ID: {}&quot;, doctorId);&#10;&#10;        Doctor doctor = doctorRepository.findByIdWithUser(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        doctor.setIsApproved(false);&#10;        doctor.setIsActive(false);&#10;        doctor = doctorRepository.save(doctor);&#10;&#10;        log.info(&quot;Doctor profile rejected for ID: {}&quot;, doctorId);&#10;        return doctorMapper.toDto(doctor);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public Page&lt;DoctorDto&gt; getApprovedDoctors(Pageable pageable) {&#10;        log.info(&quot;Fetching approved doctors with pagination&quot;);&#10;&#10;        Page&lt;Doctor&gt; doctors = doctorRepository.findApprovedDoctors(pageable);&#10;        return doctors.map(doctorMapper::toDto);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public Page&lt;DoctorDto&gt; getPendingApprovalDoctors(Pageable pageable) {&#10;        log.info(&quot;Fetching pending approval doctors with pagination&quot;);&#10;&#10;        Page&lt;Doctor&gt; doctors = doctorRepository.findPendingApprovalDoctors(pageable);&#10;        return doctors.map(doctorMapper::toDto);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public Page&lt;DoctorDto&gt; getDoctorsBySpecialization(UUID specializationId, Pageable pageable) {&#10;        log.info(&quot;Fetching doctors by specialization ID: {}&quot;, specializationId);&#10;&#10;        Page&lt;Doctor&gt; doctors = doctorRepository.findBySpecializationId(specializationId, pageable);&#10;        return doctors.map(doctorMapper::toDto);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public Page&lt;DoctorSearchResponse&gt; searchDoctors(String query, UUID specializationId, UUID conditionId,&#10;                                                   BigDecimal maxFee, String consultationType, Pageable pageable) {&#10;        log.info(&quot;Searching doctors with query: {}, specializationId: {}, conditionId: {}, maxFee: {}, consultationType: {}&quot;,&#10;                query, specializationId, conditionId, maxFee, consultationType);&#10;&#10;        return doctorRepository.searchDoctors(query, specializationId, conditionId, maxFee, consultationType, pageable);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public DoctorStatsResponse getDoctorStats(UUID doctorId) {&#10;        log.info(&quot;Getting doctor statistics for ID: {}&quot;, doctorId);&#10;&#10;        Doctor doctor = doctorRepository.findById(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        // These would typically be calculated from appointment and payment data&#10;        // For now, returning placeholder data&#10;        return DoctorStatsResponse.builder()&#10;                .totalAppointments(0L)&#10;                .completedAppointments(0L)&#10;                .pendingAppointments(0L)&#10;                .cancelledAppointments(0L)&#10;                .totalPatients(0L)&#10;                .averageRating(doctor.getAverageRating() != null ? doctor.getAverageRating().doubleValue() : 0.0)&#10;                .totalReviews(doctor.getReviewCount() != null ? doctor.getReviewCount().longValue() : 0L)&#10;                .totalEarnings(0L)&#10;                .thisMonthAppointments(0L)&#10;                .thisMonthEarnings(0L)&#10;                .build();&#10;    }&#10;&#10;    public void deleteDoctor(UUID doctorId) {&#10;        log.info(&quot;Deleting doctor with ID: {}&quot;, doctorId);&#10;&#10;        Doctor doctor = doctorRepository.findById(doctorId)&#10;                .orElseThrow(() -&gt; new BusinessException(&quot;DOCTOR_NOT_FOUND&quot;, &quot;Doctor not found&quot;, 404));&#10;&#10;        // Soft delete by setting inactive&#10;        doctor.setIsActive(false);&#10;        doctorRepository.save(doctor);&#10;&#10;        log.info(&quot;Doctor deleted (deactivated) successfully for ID: {}&quot;, doctorId);&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public long getApprovedDoctorCount() {&#10;        return doctorRepository.countByIsApprovedTrueAndIsActiveTrue();&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public long getPendingApprovalDoctorCount() {&#10;        return doctorRepository.countByIsApprovedFalseAndIsActiveTrue();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/resources/db/changelog/001-initial-schema.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/resources/db/changelog/001-initial-schema.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;databaseChangeLog&#10;        xmlns=&quot;http://www.liquibase.org/xml/ns/dbchangelog&quot;&#10;        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;        xsi:schemaLocation=&quot;http://www.liquibase.org/xml/ns/dbchangelog&#10;        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.23.xsd&quot;&gt;&#10;&#10;    &lt;changeSet id=&quot;001-create-addresses-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;addresses&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;address_line1&quot; type=&quot;VARCHAR(255)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;address_line2&quot; type=&quot;VARCHAR(255)&quot;/&gt;&#10;            &lt;column name=&quot;city&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;state&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;postal_code&quot; type=&quot;VARCHAR(20)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;country&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;002-create-patients-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;patients&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;address_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;date_of_birth&quot; type=&quot;DATE&quot;/&gt;&#10;            &lt;column name=&quot;gender&quot; type=&quot;VARCHAR(10)&quot;/&gt;&#10;            &lt;column name=&quot;blood_group&quot; type=&quot;VARCHAR(5)&quot;/&gt;&#10;            &lt;column name=&quot;height&quot; type=&quot;DECIMAL(5,2)&quot;/&gt;&#10;            &lt;column name=&quot;weight&quot; type=&quot;DECIMAL(5,2)&quot;/&gt;&#10;            &lt;column name=&quot;allergies&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;medical_conditions&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;emergency_contact_name&quot; type=&quot;VARCHAR(100)&quot;/&gt;&#10;            &lt;column name=&quot;emergency_contact_phone&quot; type=&quot;VARCHAR(15)&quot;/&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;003-create-doctors-table&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createTable tableName=&quot;doctors&quot;&gt;&#10;            &lt;column name=&quot;id&quot; type=&quot;UUID&quot; defaultValueComputed=&quot;uuid_generate_v4()&quot;&gt;&#10;                &lt;constraints primaryKey=&quot;true&quot; nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;user_id&quot; type=&quot;UUID&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;address_id&quot; type=&quot;UUID&quot;/&gt;&#10;            &lt;column name=&quot;license_number&quot; type=&quot;VARCHAR(50)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot; unique=&quot;true&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;specialization&quot; type=&quot;VARCHAR(100)&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;qualification&quot; type=&quot;TEXT&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;experience_years&quot; type=&quot;INTEGER&quot;/&gt;&#10;            &lt;column name=&quot;consultation_fee&quot; type=&quot;DECIMAL(10,2)&quot;/&gt;&#10;            &lt;column name=&quot;bio&quot; type=&quot;TEXT&quot;/&gt;&#10;            &lt;column name=&quot;is_verified&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;false&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;is_available&quot; type=&quot;BOOLEAN&quot; defaultValueBoolean=&quot;true&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;created_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;            &lt;column name=&quot;updated_date&quot; type=&quot;TIMESTAMP&quot; defaultValueComputed=&quot;CURRENT_TIMESTAMP&quot;&gt;&#10;                &lt;constraints nullable=&quot;false&quot;/&gt;&#10;            &lt;/column&gt;&#10;        &lt;/createTable&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;004-add-foreign-keys&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;patients&quot;&#10;                baseColumnNames=&quot;address_id&quot;&#10;                referencedTableName=&quot;addresses&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_patients_address&quot;/&gt;&#10;        &#10;        &lt;addForeignKeyConstraint&#10;                baseTableName=&quot;doctors&quot;&#10;                baseColumnNames=&quot;address_id&quot;&#10;                referencedTableName=&quot;addresses&quot;&#10;                referencedColumnNames=&quot;id&quot;&#10;                constraintName=&quot;fk_doctors_address&quot;/&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;    &lt;changeSet id=&quot;005-create-indexes&quot; author=&quot;docmate&quot;&gt;&#10;        &lt;createIndex tableName=&quot;patients&quot; indexName=&quot;idx_patients_user_id&quot;&gt;&#10;            &lt;column name=&quot;user_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctors&quot; indexName=&quot;idx_doctors_user_id&quot;&gt;&#10;            &lt;column name=&quot;user_id&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctors&quot; indexName=&quot;idx_doctors_specialization&quot;&gt;&#10;            &lt;column name=&quot;specialization&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;        &lt;createIndex tableName=&quot;doctors&quot; indexName=&quot;idx_doctors_license&quot;&gt;&#10;            &lt;column name=&quot;license_number&quot;/&gt;&#10;        &lt;/createIndex&gt;&#10;    &lt;/changeSet&gt;&#10;&#10;&lt;/databaseChangeLog&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>